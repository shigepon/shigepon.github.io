<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[shigeponが関心のある技術情報など]]></title>
  <link href="http://blog.shigepon.info/atom.xml" rel="self"/>
  <link href="http://blog.shigepon.info/"/>
  <updated>2015-09-24T09:59:34+09:00</updated>
  <id>http://blog.shigepon.info/</id>
  <author>
    <name><![CDATA[shigepon]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[ubuntu12.04でpg bulkloadを使う]]></title>
    <link href="http://blog.shigepon.info/blog/2015/09/24/use-pg-bulkload-in-ubuntu-12-dot-04/"/>
    <updated>2015-09-24T08:50:36+09:00</updated>
    <id>http://blog.shigepon.info/blog/2015/09/24/use-pg-bulkload-in-ubuntu-12-dot-04</id>
    <content type="html"><![CDATA[<p>pg_bulkloadを使いたくなるケース</p>

<ul>
<li>大量のデータをインポートしたい</li>
<li>中にはエラーがあるデータがちょこちょこある</li>
</ul>


<p>に当てはまったので、インストールからやってみた。
やったこと順に列記するので最低限の手順ではないと思う。</p>

<p>rpmからインストールする方法でなく、ソースからやってみることにした。
Ubuntu12.04でインストールしたけど、他のバージョンでもほぼ同じだと思う。</p>

<h2>ソースの取得</h2>

<p>まずは最新のstableをgithubから取ってくる。ブログ執筆時はこんな感じ。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>git clone -b VERSION3_1_STABLE https://github.com/ossc-db/pg_bulkload.git
</span></code></pre></td></tr></table></div></figure>


<h2>make(失敗)</h2>

<p>おもむろにmakeしてみると</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span><span class="nb">cd </span>pg_bulkload
</span><span class='line'><span class="nv">$ </span>make
</span></code></pre></td></tr></table></div></figure>


<p>するとpgxs.xmlが無い！というエラーが出て来た</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>Makefile:17: /usr/lib/postgresql/9.4/lib/pgxs/src/makefiles/pgxs.mk: そのようなファイルやディレクトリはありません
</span></code></pre></td></tr></table></div></figure>


<p>postgresqlは9.2しか入れてないはずなのに何故か9.4のファイルが無いとか言われた。</p>

<h2>試行錯誤(失敗)</h2>

<p>どうもMakefileを調べてみると、ここで出てくるバージョンはpg_configコマンドで取得するバージョンらしい。面倒なので、手動で9.2のファイルを設定するように変更して、さらにpgxs.mkを入れるためにpostgresql-server-dev-9.2をaptitudeでインストールした。</p>

<p>で、おもむろにmakeすると・・・</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>sudo make
</span><span class='line'>....
</span><span class='line'>/usr/include/postgresql/libpq-fe.h:547:1: エラー: 不明な型名 ‘pg_int64’ です
</span><span class='line'>/usr/include/postgresql/libpq-fe.h:547:50: エラー: 不明な型名 ‘pg_int64’ です
</span><span class='line'>/usr/include/postgresql/libpq-fe.h:551:1: エラー: 不明な型名 ‘pg_int64’ です
</span><span class='line'>/usr/include/postgresql/libpq-fe.h:553:48: エラー: 不明な型名 ‘pg_int64’ です
</span><span class='line'>make<span class="o">[</span>1<span class="o">]</span>: *** <span class="o">[</span>pg_bulkload.o<span class="o">]</span> エラー 1
</span><span class='line'>make<span class="o">[</span>1<span class="o">]</span>: ディレクトリ <span class="sb">`</span>/****/pg_bulkload/bin<span class="err">&#39;</span> から出ます
</span><span class='line'>make: *** <span class="o">[</span>all<span class="o">]</span> エラー 2
</span></code></pre></td></tr></table></div></figure>


<p>と結局エラーが出てしまった。ググって調べるとどうもlibpqのバージョンが関連するらしい。調べてみると</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>aptitude show libpq-dev
</span><span class='line'>パッケージ: libpq-dev
</span><span class='line'>状態: インストール済み
</span><span class='line'>自動的にインストールされた: いいえ
</span><span class='line'>バージョン: 9.4.0-1.pgdg12.4+1
</span><span class='line'>....
</span></code></pre></td></tr></table></div></figure>


<p>バージョンが9.4になっていたorz。多分だけど、9.2でpg_bulkloadをインストールするにはlibpqをダウングレードしないといけないっぽい。それは面倒なのでpostgresqlのバージョン9.4をインストールすることでバージョンを合わせることにした</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>sudo aptitude install postgresql-9.4
</span><span class='line'><span class="nv">$ </span>sudo aptitude install postgresql-server-dev-9.4
</span></code></pre></td></tr></table></div></figure>


<p>インストールの途中でlibpq-devは削除することになった。</p>

<h2>make(成功)</h2>

<p>バージョンを合わせたので、makeしてみると今度はライブラリが足らないというエラーが出た</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>sudo make
</span><span class='line'>....
</span><span class='line'>/usr/bin/ld: cannot find -lpam
</span><span class='line'>/usr/bin/ld: cannot find -ledit
</span><span class='line'>collect2: ld はステータス 1 で終了しました
</span><span class='line'>make<span class="o">[</span>1<span class="o">]</span>: *** <span class="o">[</span>pg_bulkload<span class="o">]</span> エラー 1
</span><span class='line'>make<span class="o">[</span>1<span class="o">]</span>: ディレクトリ <span class="sb">`</span>/***/pg_bulkload/bin<span class="err">&#39;</span> から出ます
</span><span class='line'>make: *** <span class="o">[</span>all<span class="o">]</span> エラー 2
</span></code></pre></td></tr></table></div></figure>


<p>これはubuntuではlibpam-devとlibedit-devが足らないという意味らしいので、aptitudeからインストールした。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>sudo aptitude install libpam-dev
</span><span class='line'><span class="nv">$ </span>sudo aptitude install libedit-dev
</span></code></pre></td></tr></table></div></figure>


<p>以上の作業でpg_bulkloadのmakeに成功した</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>sudo make
</span><span class='line'><span class="nv">$ </span>sudo make install
</span></code></pre></td></tr></table></div></figure>


<h2>使ってみる</h2>

<p>pg_bulkloadはbinフォルダ内にある。使い方は</p>

<ul>
<li>設定ファイルを書く</li>
<li>csvファイルを用意する</li>
<li>実行する</li>
</ul>


<p>となる。</p>

<h3>設定ファイルを書く</h3>

<p>設定ファイルの例はこんな感じ(下のコマンドの場合、example.ctlで保存しておく)、bin/data内にも例があるので参考になる。
この設定は</p>

<ul>
<li>リダイレクトでcsvファイルを入力する。</li>
<li>リレーションをチェックする。リレーションにミスがある場合はエラーにする</li>
<li>タブ区切り</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">TYPE</span> <span class="o">=</span> CSV
</span><span class='line'><span class="nv">INPUT</span> <span class="o">=</span> stdin
</span><span class='line'><span class="nv">TABLE</span> <span class="o">=</span> table_name
</span><span class='line'><span class="nv">CHECK_CONSTRAINTS</span> <span class="o">=</span> YES
</span><span class='line'><span class="nv">DELIMITER</span> <span class="o">=</span> <span class="s2">&quot;   &quot;</span> <span class="c">#タブの場合</span>
</span><span class='line'><span class="nv">WRITER</span> <span class="o">=</span> DIRECT
</span></code></pre></td></tr></table></div></figure>


<p>コマンドはこんな感じ</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>./pg_bulkload example.ctl --dbname db_name  &lt; csv_name.csv
</span><span class='line'>NOTICE: BULK LOAD START
</span><span class='line'>NOTICE: BULK LOAD END
</span><span class='line'>    0 Rows skipped.
</span><span class='line'>    10 Rows successfully loaded.
</span><span class='line'>    0 Rows not loaded due to parse errors.
</span><span class='line'>    0 Rows not loaded due to duplicate errors.
</span><span class='line'>    0 Rows replaced with new rows.
</span></code></pre></td></tr></table></div></figure>


<p>csvファイルはpsqlで\d table_nameで表示される順序にしておくこと。でないとパースエラーが出る。</p>

<h2>順序が変わる場合</h2>

<p>csvファイル内のフィールド順序をdb内の順序と違うものにしたい場合や、idなど、データを省略したい場合はフィルタを指定出来る。フィルタは</p>

<ul>
<li>db内に関数を作る</li>
<li>設定ファイルでフィルタを指定</li>
</ul>


<p>で設定する。</p>

<p>フィルタの例</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="k">CREATE</span> <span class="k">FUNCTION</span> <span class="n">sample_filter</span><span class="p">(</span><span class="nb">integer</span><span class="p">,</span> <span class="nb">text</span><span class="p">,</span> <span class="nb">text</span><span class="p">,</span> <span class="nb">real</span> <span class="k">DEFAULT</span> <span class="mi">0</span><span class="p">.</span><span class="mi">05</span><span class="p">)</span> <span class="k">RETURNS</span> <span class="n">record</span>
</span><span class='line'>    <span class="k">AS</span> <span class="err">$$</span> <span class="k">SELECT</span> <span class="err">$</span><span class="mi">1</span> <span class="o">*</span> <span class="err">$</span><span class="mi">4</span><span class="p">,</span> <span class="k">upper</span><span class="p">(</span><span class="err">$</span><span class="mi">3</span><span class="p">)</span> <span class="err">$$</span>
</span><span class='line'>    <span class="k">LANGUAGE</span> <span class="k">SQL</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>設定ファイル</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="k">TYPE</span> <span class="o">=</span> <span class="n">CSV</span>
</span><span class='line'><span class="k">INPUT</span> <span class="o">=</span> <span class="k">stdin</span>
</span><span class='line'><span class="k">TABLE</span> <span class="o">=</span> <span class="k">table_name</span>
</span><span class='line'><span class="n">CHECK_CONSTRAINTS</span> <span class="o">=</span> <span class="n">YES</span>
</span><span class='line'><span class="k">DELIMITER</span> <span class="o">=</span> <span class="ss">&quot;   &quot;</span> <span class="o">#</span><span class="err">タブの場合</span>
</span><span class='line'><span class="n">WRITER</span> <span class="o">=</span> <span class="n">DIRECT</span>
</span><span class='line'><span class="n">FILTER</span> <span class="o">=</span> <span class="n">sample_filter</span>
</span></code></pre></td></tr></table></div></figure>


<h2>出来てない点（追記予定）</h2>

<ul>
<li>MULTI_PROCESS = YESの時に認証失敗する件</li>
</ul>


<p>参考：</p>

<ul>
<li><a href="http://pgbulkload.projects.pgfoundry.org/pg_bulkload.html#filter">pg_bulkload</a></li>
<li><a href="http://www.atmarkit.co.jp/flinux/rensai/linuxtips/a115makeerror.html">makeで「/usr/bin/ld: cannot find」と表示されるときは － ＠IT</a></li>
<li><a href="http://pgfoundry.org/forum/forum.php?thread_id=2851&amp;forum_id=1004&amp;group_id=1000261">pgFoundry: Forum: help</a></li>
<li><a href="https://github.com/ossc-db/pg_bulkload">ossc-db/pg_bulkload</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Django 1.7から1.8にアップデートしてみた]]></title>
    <link href="http://blog.shigepon.info/blog/2015/08/25/migrate-from-django-1-dot-7-to-1-dot-8/"/>
    <updated>2015-08-25T15:39:02+09:00</updated>
    <id>http://blog.shigepon.info/blog/2015/08/25/migrate-from-django-1-dot-7-to-1-dot-8</id>
    <content type="html"><![CDATA[<p><a href="http://blog.shigepon.info/blog/2015/03/09/migrate-from-django-1-dot-6-to-1-dot-7/">1.6の時</a>と同様にpipでアップデートした。</p>

<h2>注意点</h2>

<p>個人的に作っているアプリでアップデートした際にコード変更が必要だった点は以下の通り。他にも色々使えなくなった命令とかあるみたいだけど引っ掛からなかったので省略。詳しくは<a href="https://docs.djangoproject.com/en/1.8/releases/1.8/#features-removed-in-1-8">Django 1.8 release notes | Django documentation | Django</a>で見ることが出来る。</p>

<h3>urls.pyで指定するnamespace</h3>

<p>urls.pyでapp_nameを指定した場合に必ずnamespaceを指定する必要があるようになった。</p>

<figure class='code'><figcaption><span>urls.py</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='py'><span class='line'><span class="n">url</span><span class="p">(</span><span class="s">r&#39;^&#39;</span><span class="p">,</span> <span class="n">include</span><span class="p">(</span><span class="s">&#39;hoge.urls&#39;</span><span class="p">,</span><span class="n">app_name</span><span class="o">=</span><span class="s">&#39;hoge&#39;</span><span class="p">)),</span><span class="c">#これはダメ</span>
</span><span class='line'><span class="n">url</span><span class="p">(</span><span class="s">r&#39;^&#39;</span><span class="p">,</span> <span class="n">include</span><span class="p">(</span><span class="s">&#39;hoge.urls&#39;</span><span class="p">,</span><span class="n">app_name</span><span class="o">=</span><span class="s">&#39;hoge&#39;</span><span class="p">,</span><span class="n">namespace</span><span class="o">=</span><span class="s">&#39;hoge&#39;</span><span class="p">)),</span><span class="c">#これはOK</span>
</span></code></pre></td></tr></table></div></figure>


<p>ダメなコード実装してた場合は、reverseでurlを作ってる箇所にも修正が必要になる。</p>

<h3>transactionについて</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='py'><span class='line'><span class="n">transaction</span><span class="o">.</span><span class="n">commit_unless_managed</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<p>みたいなメソッドが無くなってた。</p>

<h2>嬉しい点</h2>

<p>色々あるみたいだけど、PostgreSQLを使っているので、特にPostgreSQL使ってる場合に、独自のフィールドを使えるようになった点が嬉しい。ArrayFieldとか、わざわざリレーション作りたくない時とか便利そう。</p>

<p><a href="https://docs.djangoproject.com/en/1.8/ref/contrib/postgres/fields/">Djangoドキュメントによる説明</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Javascript memo]]></title>
    <link href="http://blog.shigepon.info/blog/2015/08/12/javascript-memo/"/>
    <updated>2015-08-12T09:01:59+09:00</updated>
    <id>http://blog.shigepon.info/blog/2015/08/12/javascript-memo</id>
    <content type="html"><![CDATA[<p>Javascript関連のメモ</p>

<h2>HighChartで日本時間をx軸に利用</h2>

<p>チャートを表示するライブラリに<a href="http://www.highcharts.com/">HighChart</a>ってのを使ってるけど、横軸の時間がUTCになってしまうので、ちょっとはまった。</p>

<p>こうすればいいらしい</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">Highcharts</span><span class="p">.</span><span class="nx">setOptions</span><span class="p">({</span>
</span><span class='line'>    <span class="nx">global</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">useUTC</span><span class="o">:</span> <span class="kc">false</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">chart</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">HighChart</span><span class="p">(...);</span>
</span></code></pre></td></tr></table></div></figure>


<p>グローバルな設定として使うらしい。
参考（ほぼそのまま）<a href="http://mtc.hatenablog.com/">mtcdotcom&rsquo;s blog</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Vmware Esxiがfatal error 33を出したのでインストールしなおしてついでに色々試した話]]></title>
    <link href="http://blog.shigepon.info/blog/2015/08/05/esxi-shows-fatal-error-33/"/>
    <updated>2015-08-05T16:45:31+09:00</updated>
    <id>http://blog.shigepon.info/blog/2015/08/05/esxi-shows-fatal-error-33</id>
    <content type="html"><![CDATA[<p>Vmware Esxiがある日</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>error loading /s.v00
</span><span class='line'>fatal error: 33 inconsistent data
</span></code></pre></td></tr></table></div></figure>


<p>というメッセージを出して起動しなくなったので、修復方法をメモしておく</p>

<h2>結論</h2>

<p>まず結論から言うと、Vmware Esxiを入れ直すことになった。他にも方法があるらしいが、その方法のページが途中で会員登録しないと見れなくなったので、参考にしなかった。</p>

<p>参考：
<a href="https://communities.vmware.com/thread/342182">error loading s.v00 fatal error 33 inconsistent&hellip; | VMware Communities</a></p>

<h2>Vmware Esxiの入れ直し</h2>

<p>USBにインストールしていたので、要はそのままインストールし直すだけなんだけど、以下手順</p>

<ul>
<li>Esxiのisoをダウンロード

<ul>
<li><a href="https://my.vmware.com/jp/web/vmware/login">my vmware</a>からログイン(ユーザー登録はフォームに記入して・・・という良くある方法なので省略)
&mdash; <a href="https://my.vmware.com/group/vmware/downloads#tab2">製品ダウンロード</a>に移動</li>
<li>VMware vSphere Hypervisor (ESXi)の横の<a href="https://my.vmware.com/group/vmware/info/slug/datacenter_cloud_infrastructure/vmware_vsphere_hypervisor_esxi/6_0">View Download Components</a>をクリック</li>
<li>左にバージョン選択用のコンボボックスがあるので、バージョンを選択して、Downloadリンクをクリック</li>
<li>Registerのボタンが出てる場合、まずクリックして、ライセンスの登録を行う</li>
<li>License Informationにlicense keysが出るので保存しておく。(Vmware ESXi Clientでのライセンスキー登録に使う)</li>
<li>ライセンスの登録が済んだらDownload Packages以下の項目からダウンロードするためのリンクが出るのでダウンロードする</li>
<li><strong><em>AdBlockを入れてるとダウンロードが開始しなかったので注意</em></strong></li>
</ul>
</li>
<li>ダウンロードしたisoをCDに焼く</li>
<li>Esxiのハード要件を全て満たすハード上でCD起動する</li>
<li>ESXiをインストールする

<ul>
<li>Boot MenuでESXi Installerを選択する</li>
<li>インストールを進めるかどうか聞かれる(Enter)</li>
<li>ライセンス許諾を聞かれる(F11でおk)</li>
<li>インストール先を選ぶ(入れたい場所を選ぶ。USB差しておけばUSBも出て選択出来る)</li>
<li>キーボードレイアウトを選択する</li>
<li>rootアカウントのパスワードを設定する(タブで移動、2回設定するEnterで完了)</li>
<li>最後の確認(F11でおk)</li>
<li>インストール終了後Enterで再起動</li>
</ul>
</li>
</ul>


<h2>バージョン5.5、6.0</h2>

<p>今まで入れてたのがEsxiバージョン5.0だったので、ついでに5.5、6.0を試してみた。インストール方法は入れ直し方法と同じ。</p>

<p>で、インストール後にクライアントをDLしてホストに接続してみた。どのバージョンでも問題なく出来たが、Windows XPの端末ではこの2つのバージョンは接続出来ないそうな。</p>

<p>Vmの操作（インベントリへの追加、起動、コンソール表示、終了）は全てのバージョンで同じように出来た。Vmはバージョン5で作ったものだが他のバージョンでの操作も問題ないらしい。これは便利。</p>

<h2>sshでEsxiホストを操作する</h2>

<p>linuxやmacからEsxiホストを操作して、vmの起動、終了とかやりたかったので、ついでに試してみた。手順は以下の通り</p>

<ul>
<li>EsxiホストでSSHを有効にする

<ul>
<li>初期画面からCustomize Systemへ移動(F2)</li>
<li>カーソルを上下移動して「Troubleshooting Options」のところでEnter</li>
<li>Disable ESXi Shellにカーソルを合わせてEnterを押すとEnable ESXi Shellに変わる</li>
<li>Disable SSHにカーソルを合わせてEnterを押すとEnable SSHに変わる</li>
<li>Restart Management Agentsにカーソルを合わせてEnterを押す</li>
</ul>
</li>
<li>ESXiクライアントでSSHを有効にする

<ul>
<li>インベントリが選択されている状態で、構成(Configuration) &ndash;> セキュリティプロファイル(Security Profile)の上部、サービス(Services)の「プロパティ(Properties)をクリック</li>
<li>SSHを選択し、オプション(Options)をクリック</li>
<li>ホストに連動して開始および停止(Start and stop with host)を選択し、サービスコマンドの開始(Start)ボタンを押す。その後okをクリックしてダイアログを消す。</li>
<li>同中部、ファイアウォール(Firewall)の「プロパティ(Properties)をクリック</li>
<li>SSHサーバ(SSH Server)をチェック</li>
<li>ファイアーウォール(Firewall)ボタンをクリック</li>
<li>IPアドレスの許可設定を行う。任意のIPアドレスからの接続を許可(Allow connections from any IP address)するのが一番楽。</li>
<li>okをクリックしていって、ダイアログを閉じる</li>
</ul>
</li>
</ul>


<p>以上で、linuxやmacから</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>ssh root@ESXiのip
</span></code></pre></td></tr></table></div></figure>


<p>でインストール時に指定したパスワードを入力するとsshでESXiホストにアクセス出来るようになる。</p>

<p>参考：<a href="http://www.serenity-networks.com/networking/how-to-enable-ssh-on-vmware-esxi-5-5-5-6-all-other-versions/">How To Enable SSH on VMware ESXi 5 / 5.5 / 6 &amp; All Other Versions | Serenity-Networks</a></p>

<h2>ESXiの管理コマンド(ごく一部。追記予定)</h2>

<h3>インベントリへのVMの追加、削除</h3>

<p>追加</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>vim-cmd solo/registervm <span class="o">[</span>vmxのパス.vmx<span class="o">]</span> <span class="o">[</span>vm名<span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>削除</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>vim-cmd vmsvc/unregister <span class="o">[</span>vmのid<span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>


<h3>vm一覧</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>vim-cmd vmsvc/getallvms
</span></code></pre></td></tr></table></div></figure>


<p>ここで出て来たvmidをvmのidとして色んなコマンド内で使用する。</p>

<h3>vm起動、シャットダウン</h3>

<p>起動</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>vim-cmd vmsvc/power.on <span class="o">[</span>vmのid<span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>終了</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>vim-cmd vmsvc/power.shutdown <span class="o">[</span>vmのid<span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>参考：<a href="http://qiita.com/binzume/items/096ce77f73b6e853c342">VMware ESXiをSSHでがんばるぞい(コマンドライン操作色々) &ndash; Qiita</a></p>

<p>ちなみに各コマンドについてはヘルプを出すオプションとか無いみたい。コマンド失敗した時に使用法が出ることもあるが、失敗するまで分からないとか怖いわー。</p>

<h3>ESXiシャットダウン</h3>

<p>シャットダウンと同時に電源を切る作業も必要</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>shutdown.sh <span class="o">&amp;&amp;</span> poweroff
</span></code></pre></td></tr></table></div></figure>


<p>でおk。USBにインストールしているせいか分からないが、poweroffが無い場合、SSHの設定が再起動後、元に戻っていた。</p>

<p>参考：<a href="http://www.nojokeit.com/2013/02/shut-down-esxi-51-guest-vms-and-host.html">No Joke IT: Shut down ESXi 5.1 guest VMs and the host (free edition) via SSH &ndash; the easy way!</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Djangoで作成済みテーブルに手動でリレーションを追加する]]></title>
    <link href="http://blog.shigepon.info/blog/2015/07/30/add-relation-to-existing-table-using-django/"/>
    <updated>2015-07-30T10:46:15+09:00</updated>
    <id>http://blog.shigepon.info/blog/2015/07/30/add-relation-to-existing-table-using-django</id>
    <content type="html"><![CDATA[<p>リレーションの理解が悪くて酷いコードを組んでいて、それを直した話。</p>

<p>article</p>

<table>
<thead>
<tr>
<th></th>
<th align="left">key</th>
<th align="right">title</th>
<th align="right">content</th>
<th align="right">author_key</th>
</tr>
</thead>
<tbody>
<tr>
<td></td>
<td align="left">1</td>
<td align="right">DjangoでHello World作ってみた</td>
<td align="right">出来なかった！</td>
<td align="right">1|</td>
</tr>
</tbody>
</table>


<p>author</p>

<table>
<thead>
<tr>
<th></th>
<th align="left">key</th>
<th align="right">name</th>
</tr>
</thead>
<tbody>
<tr>
<td></td>
<td align="left">1</td>
<td align="right">shigepon|</td>
</tr>
</tbody>
</table>


<p>こんなテーブルがあって、author.keyとarticle.author_keyが繋がっている場合に
ArticleモデルをDjango使い始めの時はこんな風に作ってた</p>

<figure class='code'><figcaption><span>models.py</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='py'><span class='line'><span class="k">class</span> <span class="nc">Article</span><span class="p">(</span><span class="n">models</span><span class="o">.</span><span class="n">Model</span><span class="p">):</span>
</span><span class='line'>    <span class="n">key</span><span class="o">=</span><span class="n">models</span><span class="o">.</span><span class="n">IntegerField</span><span class="p">(</span><span class="n">primary_key</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
</span><span class='line'>    <span class="n">title</span><span class="o">=</span><span class="n">models</span><span class="o">.</span><span class="n">TextField</span><span class="p">()</span>
</span><span class='line'>    <span class="n">content</span><span class="o">=</span><span class="n">models</span><span class="o">.</span><span class="n">TextField</span><span class="p">()</span>
</span><span class='line'>    <span class="n">author_key</span><span class="o">=</span><span class="n">models</span><span class="o">.</span><span class="n">IntegerField</span><span class="p">()</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">author</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">Author</span><span class="o">.</span><span class="n">objects</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="n">key</span><span class="o">=</span><span class="bp">self</span><span class="o">.</span><span class="n">author_key</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Author</span><span class="p">(</span><span class="n">models</span><span class="o">.</span><span class="n">Model</span><span class="p">):</span>
</span><span class='line'>    <span class="n">key</span><span class="o">=</span><span class="n">models</span><span class="o">.</span><span class="n">IntegerField</span><span class="p">(</span><span class="n">primary_key</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
</span><span class='line'>    <span class="n">name</span><span class="o">=</span><span class="n">models</span><span class="o">.</span><span class="n">TextField</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<p>いやー改めて見ると酷い。Articleを100個読み込んで、そのAuthorを出力するだけで、100回以上dbにアクセスしないといけない。という訳でこの酷いコードからリレーションを貼って、さらにdbアクセスが少なくなるように修正したらこうなった</p>

<p>参考：</p>

<ul>
<li><a href="https://docs.djangoproject.com/en/1.8/ref/models/fields/">Model field reference | Django documentation | Django</a></li>
<li><a href="https://docs.djangoproject.com/en/1.8/ref/models/querysets/">QuerySet API reference | Django documentation | Django</a></li>
</ul>


<figure class='code'><figcaption><span>models.py</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='py'><span class='line'><span class="k">class</span> <span class="nc">Article</span><span class="p">(</span><span class="n">models</span><span class="o">.</span><span class="n">Model</span><span class="p">):</span>
</span><span class='line'>    <span class="n">key</span><span class="o">=</span><span class="n">models</span><span class="o">.</span><span class="n">IntegerField</span><span class="p">(</span><span class="n">primary_key</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
</span><span class='line'>    <span class="n">title</span><span class="o">=</span><span class="n">models</span><span class="o">.</span><span class="n">TextField</span><span class="p">()</span>
</span><span class='line'>    <span class="n">content</span><span class="o">=</span><span class="n">models</span><span class="o">.</span><span class="n">TextField</span><span class="p">()</span>
</span><span class='line'>    <span class="n">author</span><span class="o">=</span><span class="n">models</span><span class="o">.</span><span class="n">ForeignKey</span><span class="p">(</span><span class="s">&#39;Author&#39;</span><span class="p">,</span> <span class="n">db_column</span><span class="o">=</span><span class="s">&#39;author_key&#39;</span><span class="p">,</span> <span class="n">to_field</span><span class="o">=</span><span class="s">&#39;key&#39;</span><span class="p">,</span> <span class="n">related_name</span><span class="o">=</span><span class="s">&#39;articles&#39;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Author</span><span class="p">(</span><span class="n">models</span><span class="o">.</span><span class="n">Model</span><span class="p">):</span>
</span><span class='line'>    <span class="n">key</span><span class="o">=</span><span class="n">models</span><span class="o">.</span><span class="n">IntegerField</span><span class="p">(</span><span class="n">primary_key</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
</span><span class='line'>    <span class="n">name</span><span class="o">=</span><span class="n">models</span><span class="o">.</span><span class="n">TextField</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<p>こんな感じで適切にForeignKeyフィールドを設定することで、上の構成のテーブルにもリレーションを貼ることが出来た。db_columnでArticle側のリレーションキーになるカラムを指定して、to_fieldでAuthor側のリレーションキーになるカラムを指定する。related_nameは指定しないとエラーが出た。</p>

<p>んで、dbアクセスがなるべく少なくなるように（sqlでjoinを組んでくれるように）views.pyを書いてみると</p>

<figure class='code'><figcaption><span>views.py</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='py'><span class='line'><span class="kn">from</span> <span class="nn">app.models</span> <span class="kn">import</span> <span class="n">Article</span>
</span><span class='line'><span class="k">def</span> <span class="nf">index</span><span class="p">(</span><span class="n">request</span><span class="p">):</span>
</span><span class='line'>    <span class="n">articles</span> <span class="o">=</span> <span class="n">Article</span><span class="o">.</span><span class="n">objects</span><span class="o">.</span><span class="n">select_related</span><span class="p">(</span><span class="s">&#39;author&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">all</span><span class="p">()</span>
</span><span class='line'>    <span class="o">...</span>
</span></code></pre></td></tr></table></div></figure>


<p>みたいにselect_relatedメソッドを使うとjoinしてくれた。prefetch_relatedってメソッドでも同じように出来る（ちょっと役割は違う）らしいが試していない。ざっくりドキュメントを読むと、ForeignKeyと１対１リレーションにはselect_relatedが良く、Many to ManyやMany to Oneにはprefetch_relatedが良いらしい。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[DjangoモデルをDjangoプロジェクトの外から使う]]></title>
    <link href="http://blog.shigepon.info/blog/2015/07/28/use-django-model-outside-django-project/"/>
    <updated>2015-07-28T16:43:55+09:00</updated>
    <id>http://blog.shigepon.info/blog/2015/07/28/use-django-model-outside-django-project</id>
    <content type="html"><![CDATA[<p>参考：</p>

<ul>
<li><a href="http://d.hatena.ne.jp/shobonengine/20120103/1325535420">外部から Django プロジェクトのデータベースを操作する &ndash; ShobonEngineの日記</a></li>
<li><a href="http://stackoverflow.com/questions/25537905/django-1-7-throws-django-core-exceptions-appregistrynotready-models-arent-load">python &ndash; Django 1.7 throws django.core.exceptions.AppRegistryNotReady: Models aren&rsquo;t loaded yet &ndash; Stack Overflow</a></li>
</ul>


<p>モデルインポート前に以下の手順が必要</p>

<ul>
<li>プロジェクトをsys.pathに追加</li>
<li>DJANGO_SETTINGS_MODULE環境変数がプロジェクトのsettings.pyを指すように指定</li>
<li>applicationのロードが必要? (上2つだけだとModels aren&rsquo;t loaded yetというエラーが出た)</li>
</ul>


<p>sys.pathにはフルパスを入れれば確実。必要なコードは下のような感じになる。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='py'><span class='line'><span class="c"># encoding: UTF-8</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">sys</span>
</span><span class='line'><span class="n">sys</span><span class="o">.</span><span class="n">path</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="s">&#39;/path/to/django/project&#39;</span><span class="p">)</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">os</span>
</span><span class='line'><span class="n">os</span><span class="o">.</span><span class="n">environ</span><span class="p">[</span><span class="s">&#39;DJANGO_SETTINGS_MODULE&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="s">&#39;project.settings&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="kn">from</span> <span class="nn">django.core.wsgi</span> <span class="kn">import</span> <span class="n">get_wsgi_application</span>
</span><span class='line'><span class="n">application</span> <span class="o">=</span> <span class="n">get_wsgi_application</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'><span class="kn">from</span> <span class="nn">application.models</span> <span class="kn">import</span> <span class="n">AModel</span>
</span><span class='line'>
</span><span class='line'><span class="nb">list</span> <span class="o">=</span> <span class="n">AModel</span><span class="o">.</span><span class="n">objects</span><span class="o">.</span><span class="n">all</span><span class="p">()</span>
</span><span class='line'><span class="o">...</span>
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[なでしこ2でssl使うとthe authentication or decription has failedエラーが出る件]]></title>
    <link href="http://blog.shigepon.info/blog/2015/07/20/nadesiko2-ssl-error-the-authentication-or-decription-has-failed/"/>
    <updated>2015-07-20T20:12:34+09:00</updated>
    <id>http://blog.shigepon.info/blog/2015/07/20/nadesiko2-ssl-error-the-authentication-or-decription-has-failed</id>
    <content type="html"><![CDATA[<p>結論から言うとmonoの問題だった。</p>

<p>参考：</p>

<ul>
<li><a href="http://d.hatena.ne.jp/unarist/20110601/1306945858">MonoでSSL接続しようとしたら怒られた &ndash; うなてっくろぐ</a></li>
<li><a href="https://ramorenoc.wordpress.com/2012/12/05/the-authentication-or-decryption-has-failed-mono/">The authentication or decryption has failed – Mono | Code Adventures</a></li>
<li><a href="http://ubuntuforums.org/showthread.php?t=1841740">Problems using SSL in C#</a></li>
</ul>


<p>なでしこ2でsslにアクセスするとエラーが出る</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>「https://どこかhttpsでアクセスするurl」からHTTPデータ取得してそれを表示</span></code></pre></td></tr></table></div></figure>


<p>エラーメッセージはこんな感じ</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[SystemError]Error getting response stream (Write: The authentication or decryption has failed.): SendFailure  at System.Net.HttpWebRequest.EndGetResponse (IAsyncResult asyncResult) [0x00000] in &lt;filename unknown&gt;:0 
</span><span class='line'>  at System.Net.HttpWebRequest.GetResponse () [0x00000] in &lt;filename unknown&gt;:0 
</span><span class='line'>  at System.Net.WebClient.GetWebResponse (System.Net.WebRequest request) [0x00000] in &lt;filename unknown&gt;:0 
</span><span class='line'>  at System.Net.WebClient.ReadAll (System.Net.WebRequest request, System.Object userToken) [0x00000] in &lt;filename unknown&gt;:0 
</span><span class='line'>  at System.Net.WebClient.DownloadDataCore (System.Uri address, System.Object userToken) [0x00000] in &lt;filename unknown&gt;:0</span></code></pre></td></tr></table></div></figure>


<p>調べてみると、コードで何とかなるというのがまず出て来たので、試してみたら対処出来た。C#のコードはこんな感じ</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='c#'><span class='line'><span class="k">public</span> <span class="n">Object</span> <span class="nf">_dataGet</span><span class="p">(</span><span class="n">INakoFuncCallInfo</span> <span class="n">info</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">System</span><span class="p">.</span><span class="n">Net</span><span class="p">.</span><span class="n">ServicePointManager</span><span class="p">.</span><span class="n">ServerCertificateValidationCallback</span> <span class="p">+=</span> <span class="p">(</span><span class="n">s</span><span class="p">,</span><span class="n">ce</span><span class="p">,</span><span class="n">ca</span><span class="p">,</span><span class="n">p</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="k">true</span><span class="p">;</span>
</span><span class='line'>    <span class="p">....</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>ただし、この対処だとhttpアクセスとhttpsアクセスが大差なくなるみたいなことが書いてあったので、これじゃいかんなともうちょっと調べてみると、要はmonoにルート証明書がインストールされてなかったのが原因らしかった。対処法は参考にしたページほぼそのままで</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>mozroots --import --sync
</span></code></pre></td></tr></table></div></figure>


<p>サードパーティーの認証を受入れる場合は</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>certmgr -ssl https://どこかhttpsでアクセスするドメイン
</span></code></pre></td></tr></table></div></figure>


<p>この認証本当に受入れていいの？みたいなメッセージが出たら「y」を押せばおk</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[なでしこ2でradikoの録音をやってみた]]></title>
    <link href="http://blog.shigepon.info/blog/2015/07/19/record-radiko-with-nadesiko2/"/>
    <updated>2015-07-19T17:22:00+09:00</updated>
    <id>http://blog.shigepon.info/blog/2015/07/19/record-radiko-with-nadesiko2</id>
    <content type="html"><![CDATA[<p>ネット上でラジオを聞けるサービス<a href="http://radiko.jp/">radiko</a>の録音ソフトが調子悪くなったので、自分で作ってみるかーとやってみたら出来たのでメモ。OSはUbuntu 12.04で、cui環境で行った。</p>

<p>参考：</p>

<ul>
<li><a href="https://gist.github.com/matchy2/3956266">簡易Radiko録音スクリプト</a></li>
<li><a href="http://d.hatena.ne.jp/zariganitosh/20130124/rtmpdump_radiko_access">rtmpdumpでradikoにアクセスする手順 &ndash; ザリガニが見ていた&hellip;。</a></li>
<li><a href="http://lifeonubuntu.com/ubuntu-missing-add-apt-repository-command/">Ubuntu Missing add-apt-repository command</a></li>
<li><a href="http://www.ubuntugeek.com/how-to-install-swftools-in-ubuntu-12-0411-10-using-ppa.html">How to install SWFTools in ubuntu 12.04/11.10 using PPA | Ubuntu Geek</a></li>
</ul>


<p>Radiko録音スクリプトをまず参考にしたが、実際に手順を手作業で追いたかったので、参考記事を見ながら再現してみた。するとまずswfextractコマンドが無くてつまずく。ぐぐるとaptのリポジトリを追加してインストールする必要があるらしい。しかもリポジトリ追加用コマンドも無いのでインストールする必要があった。swfextractを使えるようになるまでの手順は以下の通り</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>sudo aptitude install software-properties-common python-software-properties
</span><span class='line'><span class="nv">$ </span>sudo add-apt-repository ppa:guilhem-fr/swftools
</span><span class='line'><span class="nv">$ </span>sudo aptitude update
</span><span class='line'><span class="nv">$ </span>sudo aptitude install swftools
</span></code></pre></td></tr></table></div></figure>


<p>あとは参考ページの手順通りで録音出来た。<a href="http://www.dcc-jpl.com/foltia/wiki/radikomemo">radikomemo &ndash; foltia &ndash; Trac</a>で放送局のid（xml取得に使ったりする）をチェックした。</p>

<p>で、あとは一連の処理をなぞるスクリプトを書くだけ。pythonとかはググればあるので、なでしこ2でやってみた。</p>

<p><a href="https://gist.github.com/shigepon/01acb8686e6df6accce2">record_radiko.nako</a></p>

<p>gistを初めて使うので、こんなやり方で良いのかちょっと分からないけどこんな感じ。wgetとかddとかコマンドをそのまま使ってるので、windowsでは動かないはず。なでしこ2では7/19時点ではpostでヘッダー指定するとか出来ないので、こうせざるを得ない。</p>

<p>なでしこ2の一例ということで。ちなみにこれ作るのに3時間かかった。うち1時間半がググってインストールして手作業で動作確認に使って、1時間は休憩に使った。エラー処理とかtmpファイルの処理とか全然やってない適当コードですんません＞＜。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Djangoで複数データベースを使用する]]></title>
    <link href="http://blog.shigepon.info/blog/2015/07/07/use-multiple-databases-in-django/"/>
    <updated>2015-07-07T12:33:37+09:00</updated>
    <id>http://blog.shigepon.info/blog/2015/07/07/use-multiple-databases-in-django</id>
    <content type="html"><![CDATA[<p>Djangoでは複数データベースを扱える。でも色々コーディングや設定が必要なのでメモしておく。参考：<a href="https://docs.djangoproject.com/en/1.7/topics/db/multi-db/">Multiple databases | Django documentation | Django</a>。対応バージョンはDjango 1.7。使ったデータベースはPostgreSQL。</p>

<h2>settings.py</h2>

<p>settings.pyで複数データベースの接続設定をする</p>

<figure class='code'><figcaption><span>settings.py</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='py'><span class='line'><span class="n">DATABASES</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>    <span class="s">&#39;default&#39;</span><span class="p">:</span> <span class="p">{</span>
</span><span class='line'>        <span class="s">&#39;NAME&#39;</span><span class="p">:</span> <span class="s">&#39;app_data&#39;</span><span class="p">,</span>
</span><span class='line'>        <span class="s">&#39;ENGINE&#39;</span><span class="p">:</span> <span class="s">&#39;django.db.backends.postgresql_psycopg2&#39;</span><span class="p">,</span>
</span><span class='line'>        <span class="s">&#39;USER&#39;</span><span class="p">:</span> <span class="s">&#39;postgres_user&#39;</span><span class="p">,</span>
</span><span class='line'>        <span class="s">&#39;PASSWORD&#39;</span><span class="p">:</span> <span class="s">&#39;s3krit&#39;</span>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'>    <span class="s">&#39;users&#39;</span><span class="p">:</span> <span class="p">{</span>
</span><span class='line'>        <span class="s">&#39;NAME&#39;</span><span class="p">:</span> <span class="s">&#39;user_data&#39;</span><span class="p">,</span>
</span><span class='line'>        <span class="s">&#39;ENGINE&#39;</span><span class="p">:</span> <span class="s">&#39;django.db.backends.mysql&#39;</span><span class="p">,</span>
</span><span class='line'>        <span class="s">&#39;USER&#39;</span><span class="p">:</span> <span class="s">&#39;mysql_user&#39;</span><span class="p">,</span>
</span><span class='line'>        <span class="s">&#39;PASSWORD&#39;</span><span class="p">:</span> <span class="s">&#39;priv4te&#39;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>参考ページのをそのまま使った。さらに追加も出来る。</p>

<h2>ここまでの設定でのマイグレーション</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>python manage.py migrate
</span></code></pre></td></tr></table></div></figure>


<p>だとdefault設定のデータベースへのマイグレーション、</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>python manage.py migrate --database<span class="o">=</span>users
</span></code></pre></td></tr></table></div></figure>


<p>とするとusersで設定したデータベースへのマイグレーションとなる。
何も設定していないと、それぞれのデータベースに全アプリケーションの全てのモデルが反映される。</p>

<h2>データベースに保存するアプリ、モデルを限定したい</h2>

<p>ルーティング設定をする。</p>

<figure class='code'><figcaption><span>settings.py</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='py'><span class='line'><span class="n">DATABASE_ROUTERS</span> <span class="o">=</span> <span class="p">[</span><span class="s">&#39;myproject.routers.Router&#39;</span><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>settings.pyはこんな感じ。んでmyprojectフォルダにrouters.pyを作成して例えばuserアプリのものだけusersデータベースを使うという設定の場合次のように書く</p>

<figure class='code'><figcaption><span>routers.py</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='py'><span class='line'><span class="k">class</span> <span class="nc">Router</span><span class="p">(</span><span class="nb">object</span><span class="p">):</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">db_for_read</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">model</span><span class="p">,</span> <span class="o">**</span><span class="n">hints</span><span class="p">):</span>
</span><span class='line'>        <span class="c">#ここでランダムに選択すると、dbの負荷分散っぽいことが出来る</span>
</span><span class='line'>        <span class="c">#例：return random.choice[&#39;default&#39;,&#39;users&#39;]</span>
</span><span class='line'>        <span class="k">if</span> <span class="n">model</span><span class="o">.</span><span class="n">_meta</span><span class="o">.</span><span class="n">app_label</span> <span class="o">==</span> <span class="s">&quot;user&quot;</span><span class="p">:</span>
</span><span class='line'>            <span class="k">return</span> <span class="s">&quot;users&quot;</span>
</span><span class='line'>        <span class="k">return</span> <span class="s">&quot;default&quot;</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">db_for_write</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">model</span><span class="p">,</span> <span class="o">**</span><span class="n">hints</span><span class="p">):</span>
</span><span class='line'>        <span class="k">if</span> <span class="n">model</span><span class="o">.</span><span class="n">_meta</span><span class="o">.</span><span class="n">app_label</span> <span class="o">==</span> <span class="s">&quot;user&quot;</span><span class="p">:</span>
</span><span class='line'>            <span class="k">return</span> <span class="s">&quot;users&quot;</span>
</span><span class='line'>        <span class="k">return</span> <span class="s">&quot;default&quot;</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">allow_relation</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">obj1</span><span class="p">,</span> <span class="n">obj2</span><span class="p">,</span> <span class="o">**</span><span class="n">hints</span><span class="p">):</span>
</span><span class='line'>        <span class="c">#Trueはリレーションを認める、Falseは認めない、Noneはこのコードでは関知しないという意味</span>
</span><span class='line'>        <span class="k">return</span> <span class="bp">None</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">allow_migrate</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">db</span><span class="p">,</span> <span class="n">model</span><span class="p">):</span>
</span><span class='line'>        <span class="c">#userアプリの場合はusers設定のデータベースへmigrate。</span>
</span><span class='line'>        <span class="c">#他のアプリはusers以外のデータベースへmigrateする設定</span>
</span><span class='line'>        <span class="k">if</span> <span class="n">model</span><span class="o">.</span><span class="n">_meta</span><span class="o">.</span><span class="n">app_label</span> <span class="o">==</span> <span class="s">&quot;user&quot;</span>
</span><span class='line'>            <span class="k">return</span> <span class="n">db</span> <span class="o">==</span> <span class="s">&quot;users&quot;</span><span class="p">:</span>
</span><span class='line'>        <span class="k">else</span><span class="p">:</span>
</span><span class='line'>            <span class="k">return</span> <span class="bp">True</span>
</span><span class='line'>        <span class="k">return</span> <span class="bp">False</span>
</span></code></pre></td></tr></table></div></figure>


<p>routers.pyをちゃんと書かないと、色々不具合が出る（例：管理用のモデルがmigrateできないとか）ので気をつけた方が良い。</p>

<p>上に紹介した参考ページには色々コードが書いてあるので、参考になる。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Django1.7でPostgreSQLとBootstrap使ったアプリを作ってみた(1.5):管理ページを作ってみた]]></title>
    <link href="http://blog.shigepon.info/blog/2015/07/03/make-admin-page-using-django/"/>
    <updated>2015-07-03T21:59:10+09:00</updated>
    <id>http://blog.shigepon.info/blog/2015/07/03/make-admin-page-using-django</id>
    <content type="html"><![CDATA[<p>Django1.6.5でアプリを作ってみたってネタをやってたけど、Django1.7にバージョンアップしたので、タイトルを変えた。ついでにDjango1.7だとINSTALLED_APPにdjango.contrib.authを入れておかないとエラーが出るケースがある（例えば<a href="http://www.django-rest-framework.org/">Django REST framework</a>でエラーが出た）ので、エラー出ないように最初に管理ページを用意しておくと良いと思う。</p>

<p>管理ページを用意する手順はこんな感じ</p>

<h2>settings.pyに設定を書く</h2>

<figure class='code'><figcaption><span>settings.py</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='py'><span class='line'><span class="n">INSTALLED_APPS</span> <span class="o">=</span> <span class="p">(</span>
</span><span class='line'>    <span class="s">&#39;django.contrib.admin&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="s">&#39;django.contrib.auth&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="o">...</span>
</span><span class='line'><span class="p">)</span>
</span><span class='line'><span class="n">MIDDLEWARE_CLASSES</span> <span class="o">=</span> <span class="p">(</span>
</span><span class='line'>    <span class="s">&#39;django.contrib.auth.middleware.AuthenticationMiddleware&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="o">...</span>
</span><span class='line'><span class="p">)</span>
</span><span class='line'><span class="n">TEMPLATE_CONTEXT_PROCESSORS</span> <span class="o">=</span> <span class="p">(</span>
</span><span class='line'>    <span class="s">&#39;django.contrib.auth.context_processors.auth&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="o">...</span>
</span><span class='line'><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<h2>migrate</h2>

<p>マイグレーションしておく</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>python manage.py makemigrations
</span><span class='line'><span class="nv">$ </span>python manage.py migrate
</span></code></pre></td></tr></table></div></figure>


<p>マルチデータベースでやろうとして反映されずにハマったりしたけど、それはまた別の記事で書くかも</p>

<h2>管理アカウントを作る</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>python manage.py createsuperuser
</span><span class='line'>Username: hoge
</span><span class='line'>Email address: hoge@example.com
</span><span class='line'>Password: ********
</span><span class='line'>Password <span class="o">(</span>again<span class="o">)</span>: ********
</span><span class='line'>Superuser created successfully.
</span></code></pre></td></tr></table></div></figure>


<p>って出来るとおk</p>

<h2>urls.pyを書く</h2>

<figure class='code'><figcaption><span>urls.py</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='py'><span class='line'><span class="n">urlpatterns</span> <span class="o">=</span> <span class="n">patterns</span><span class="p">(</span><span class="s">&#39;&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="n">url</span><span class="p">(</span><span class="s">r&#39;^admin/&#39;</span><span class="p">,</span> <span class="n">include</span><span class="p">(</span><span class="n">admin</span><span class="o">.</span><span class="n">site</span><span class="o">.</span><span class="n">urls</span><span class="p">)),</span>
</span><span class='line'>    <span class="o">...</span>
</span><span class='line'><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>こんな感じで作って</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>python manage.py runserver
</span></code></pre></td></tr></table></div></figure>


<p>とすると、127.0.0.1/adminにアクセスすると管理画面へのログイン画面が出る。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[djangoをプロファイリングする]]></title>
    <link href="http://blog.shigepon.info/blog/2015/07/01/profiling-django/"/>
    <updated>2015-07-01T09:06:13+09:00</updated>
    <id>http://blog.shigepon.info/blog/2015/07/01/profiling-django</id>
    <content type="html"><![CDATA[<p>作ってるWebサービスが条件によってえらい重くなるので、ボトルネックを探すためにプロファイラを動かしてみようと考えてやってみたらそこそこハマった。</p>

<p>先に結論：</p>

<p><strong>Middleware使ってブラウザに表示させるのが楽だった</strong></p>

<p>条件</p>

<ul>
<li>cui環境なので、プロファイル結果は画像作るかブラウザ表示するかのどちらか</li>
<li>コードに埋めこまない形</li>
</ul>


<p>まず参考にしたのは公式ページの<a href="https://code.djangoproject.com/wiki/ProfilingDjango">ProfilingDjango – Django</a>。ざっくりとした結果が知りたかったのでrunprofileserverを試してみることにした。</p>

<h2>開発サーバでやってみる（runprofileserver）</h2>

<p>django-extensionの一機能で</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>pip install django-extensions
</span></code></pre></td></tr></table></div></figure>


<p>でインストールして、</p>

<figure class='code'><figcaption><span>settings.py</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='py'><span class='line'><span class="n">INSTALLED_APP</span> <span class="o">=</span> <span class="p">(</span><span class="o">...</span>
</span><span class='line'>   <span class="s">&#39;django_extensions&#39;</span><span class="p">,</span>
</span><span class='line'><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>で設定して</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>python manage.py runprofileserver
</span></code></pre></td></tr></table></div></figure>


<p>とすると、よしなに/tmpフォルダ内にプロファイル結果を吐き出してくれる開発用サーバだそうで、これは便利そうと思い、やってみた。</p>

<h3>結果を画像にしようとしてハマる</h3>

<p>プロファイル結果からgraphviz通して画像にしたらブラウザから確認出来るし楽なんじゃね？とか良く考えると不毛なことを考えたのが間違いのもと。普通にKCacheGrind使ってろって話なんだけど、やってみた</p>

<p>ツールとして使ったもの</p>

<ul>
<li><a href="https://github.com/jrfonseca/gprof2dot">gprof2dot</a>、プロファイル結果をdotファイルに変換する</li>
<li>graphviz、dotファイルを画像に変換する</li>
</ul>


<p>話にならなかったもの（良く考えるとこのケースで使えないの当たり前なのに使おうとして失敗したもの）</p>

<ul>
<li>xdebugtoolkit、単純にxdebugの結果でないとそりゃ使えないよねと納得した</li>
</ul>


<p>あまり良く分かってなかったので、KCacheGrind互換で出力しておけば、色んなソフト使ってよしなに出来るんじゃね？と思ってみた。んでKCacheGrind互換出力ってcallgrind形式ってことだよね！と勝手に思い込んでた</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>python manage.py runprofileserver --kcachegrind
</span></code></pre></td></tr></table></div></figure>


<p>おもむろにdotファイルに変換!</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>path/to/gprof2dot -o out.dot -f callgrind /tmp/xxx.prof
</span><span class='line'>....
</span><span class='line'>AssertionError
</span></code></pre></td></tr></table></div></figure>


<p>うまくいかない。何かの計算値がこうなるはずなのにならないよ！とか怒られてる。って良く考えたらKCacheGrind互換の出力がcallgrind形式って保証がどこにもない！</p>

<p>ってことで、あれこれドキュメント読んでたら、runprofileserverはhotshot使ってるとか何とか書いてあるから、何も指定しなかったらhotshotでの形式になる・・・ってことは全然説明されてないけど-fのオプションはpstatsで良いんじゃね？</p>

<p>と勝手に予想して</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>python manage.py runprofileserver
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>path/to/gprof2dot -o out.dot -f pstats /tmp/xxx.prof
</span></code></pre></td></tr></table></div></figure>


<p>とやるとout.dotが出来ましたとさ。あとは色んなとこに書いてある（例えば<a href="http://stackoverflow.com/questions/9279144/interpreting-callgrind-data">ここ</a>）ように、dotファイルを画像ファイルに変換すると、ちゃんと画像が出来上がった。</p>

<p>ただ・・・・、まだ設定分かってないからだと思うんだけど、出来上がった画像にはviewやmodelのメソッドが一切書かれておらず、この情報だけからボトルネック探すのかなりキツイんじゃね？ということだけが分かった。</p>

<h3>同一ドメインのurlを内部で呼び出してハマる</h3>

<p>何故かURLによってプロファイル作るのが途中で止まって、サーバもレスポンスを返してくれなくなった。問題箇所を調べると、どうも内部で同じrunprofileserverで管理しているurlにアクセスすると止まっちゃう模様。別サーバを立てて、そこにアクセスするようにすれば、問題無く動作した。</p>

<h2>手間なのでMiddlewareでプロファイルすることにした</h2>

<p>いちいち開発中の状態なのにサーバ2つ立てて面倒だったり、結局作った画像見ても良く分からなかったので、今度はMiddlewareに埋め込むタイプを試してみた。</p>

<h3>取りあえず動かなくてハマる</h3>

<p>Extendedって書いてあるしということで<a href="https://djangosnippets.org/snippets/605/">djangosnippets: Extended Profiling Middleware</a>を試してみた。</p>

<p>手順は</p>

<ul>
<li>↑のページのファイルをダウンロード（コード右上にダウンロードボタンがある）</li>
<li>適当な名前を付けてimport出来る適当な場所に配置。（オラはmodulesってとこにprofiler.pyという名前を付けて置いてみた）</li>
<li>settings.pyにmiddlewareを登録する</li>
<li>プロファイルしたいURLにprof=というパラメータを付けてブラウザでアクセスする</li>
</ul>


<p>って感じ。settings.pyは</p>

<figure class='code'><figcaption><span>settings.py</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='py'><span class='line'><span class="n">MIDDLEWARE_CLASSES</span> <span class="o">=</span> <span class="p">(</span>
</span><span class='line'><span class="o">...</span>
</span><span class='line'>    <span class="s">&#39;modules.profiler.ProfileMiddleware&#39;</span><span class="p">,</span>
</span><span class='line'><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>こんな感じ。で、上のようにブラウザでアクセスするとエラー・・・</p>

<figure class='code'><figcaption><span>settings.py</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='py'><span class='line'><span class="ne">AttributeError</span><span class="p">:</span> <span class="s">&#39;WSGIRequest&#39;</span> <span class="nb">object</span> <span class="n">has</span> <span class="n">no</span> <span class="n">attribute</span> <span class="s">&#39;has_key&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>なので、コード上で</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='py'><span class='line'><span class="n">request</span><span class="o">.</span><span class="n">has_key</span>
</span></code></pre></td></tr></table></div></figure>


<p>となっているところを</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='py'><span class='line'><span class="n">request</span><span class="o">.</span><span class="n">GET</span><span class="o">.</span><span class="n">has_key</span>
</span></code></pre></td></tr></table></div></figure>


<p>と変更すると上手く動いた。ProfileMiddlewareのページ内コメントを見ると</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='py'><span class='line'><span class="s">&#39;prof&#39;</span> <span class="ow">in</span> <span class="n">request</span><span class="o">.</span><span class="n">GET</span>
</span></code></pre></td></tr></table></div></figure>


<p>と変更しても動くらしい。んで、プロファイルしたいurlにprof=をパラメータとして付けてアクセスすると、ブラウザ上に</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='py'><span class='line'><span class="mi">47793</span> <span class="n">function</span> <span class="n">calls</span> <span class="p">(</span><span class="mi">42681</span> <span class="n">primitive</span> <span class="n">calls</span><span class="p">)</span> <span class="ow">in</span> <span class="mf">0.907</span> <span class="n">seconds</span>
</span><span class='line'>
</span><span class='line'>   <span class="n">Ordered</span> <span class="n">by</span><span class="p">:</span> <span class="n">internal</span> <span class="n">time</span><span class="p">,</span> <span class="n">call</span> <span class="n">count</span>
</span><span class='line'>
</span><span class='line'>   <span class="n">ncalls</span>  <span class="n">tottime</span>  <span class="n">percall</span>  <span class="n">cumtime</span>  <span class="n">percall</span> <span class="n">filename</span><span class="p">:</span><span class="n">lineno</span><span class="p">(</span><span class="n">function</span><span class="p">)</span>
</span><span class='line'>        <span class="mi">3</span>    <span class="mf">0.608</span>    <span class="mf">0.203</span>    <span class="mf">0.608</span>    <span class="mf">0.203</span> <span class="o">/</span><span class="n">path</span><span class="o">/</span><span class="n">to</span><span class="o">/</span><span class="n">python</span><span class="o">/</span><span class="n">local</span><span class="o">/</span><span class="n">lib</span><span class="o">/</span><span class="n">python</span><span class="o">/</span><span class="n">site</span><span class="o">-</span><span class="n">packages</span><span class="o">/</span><span class="n">django</span><span class="o">/</span><span class="n">db</span><span class="o">/</span><span class="n">backends</span><span class="o">/</span><span class="n">utils</span><span class="o">.</span><span class="n">py</span><span class="p">:</span><span class="mi">58</span><span class="p">(</span><span class="n">execute</span><span class="p">)</span>
</span><span class='line'>       <span class="mi">30</span>    <span class="mf">0.112</span>    <span class="mf">0.004</span>    <span class="mf">0.112</span>    <span class="mf">0.004</span> <span class="o">/</span><span class="n">usr</span><span class="o">/</span><span class="n">lib</span><span class="o">/</span><span class="n">python</span><span class="o">/</span><span class="n">socket</span><span class="o">.</span><span class="n">py</span><span class="p">:</span><span class="mi">406</span><span class="p">(</span><span class="n">readline</span><span class="p">)</span>
</span><span class='line'>       <span class="mi">12</span>    <span class="mf">0.050</span>    <span class="mf">0.004</span>    <span class="mf">0.050</span>    <span class="mf">0.004</span> <span class="o">/</span><span class="n">usr</span><span class="o">/</span><span class="n">lib</span><span class="o">/</span><span class="n">python</span><span class="o">/</span><span class="n">socket</span><span class="o">.</span><span class="n">py</span><span class="p">:</span><span class="mi">223</span><span class="p">(</span><span class="n">meth</span><span class="p">)</span>
</span><span class='line'><span class="o">....</span>
</span></code></pre></td></tr></table></div></figure>


<p>という形でプロファイルが表示出来た。もーこれでいーや。ということでやったのはここまで。まだまだだけど、取りあえずプロファイル結果を出すまでだけでハマったし、次回やっても同じようにハマりそうなのでメモしておく。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Jenkinsでなでしこ2をCIする]]></title>
    <link href="http://blog.shigepon.info/blog/2015/05/08/nadesiko2-continuous-integration-with-jenkins/"/>
    <updated>2015-05-08T09:19:18+09:00</updated>
    <id>http://blog.shigepon.info/blog/2015/05/08/nadesiko2-continuous-integration-with-jenkins</id>
    <content type="html"><![CDATA[<p><a href="http://blog.shigepon.info/blog/2015/05/05/nunit-console-test-for-nadesiko2/">なでしこ2をubuntu cuiでテストする &ndash; shigeponが関心のある技術情報など</a>
までやったので、CIできると便利かなと思ってやってみた。と言いつつ、単にやってみたかっただけ。mono developとかvisual studio使って開発する場合も同じように出来ると思う。例によって環境はUbuntu 12.04</p>

<p>参考：</p>

<ul>
<li><a href="http://d.hatena.ne.jp/Crest/20121220/1356023823">.NETとJenkinsで始めるCI開発 &ndash; CREST’S WEBLOG</a></li>
<li><a href="http://blog.bekijkhet.com/2013/01/create-mono-c-buildserver-using-jenkins.html">Create a Mono C# Buildserver using Jenkins and GitHub ~ BroersA Blog</a></li>
</ul>


<h2>1. Jenkinsインストール</h2>

<p>(略) 追記するかも？</p>

<!-- more -->


<h2>2. Jenkins設定</h2>

<!-- more -->


<h3>一般</h3>

<p>(略) 追記するかも？</p>

<h3>C#関連</h3>

<p>Jenkins > Jenkinsの管理 > プラグインの管理 > 利用可能(タブ)</p>

<p>からプラグインをインストールする。インストールするプラグインは</p>

<ul>
<li>GIT Plugin</li>
<li>MSBuild Plugin</li>
<li>NUnit plugin</li>
</ul>


<p>Jenkins > Jenkinsの管理 > システム設定</p>

<p>から</p>

<p>MSBuildの項目を編集。</p>

<ul>
<li>インストール済みMSBuild&hellip;をクリック</li>
<li>name</li>
<li>適当（とりあえず「mono」とした）</li>
<li>Path to MSBuild</li>
<li>/usr/bin/xbuild  (Warning出るけど気にしない)</li>
<li>Default Parameters</li>
<li>なし(Debugでビルドするかとか指定したりするかも。)</li>
<li>適用ボタンを押す</li>
</ul>


<p>Gitの項目は編集したか覚えてないけど</p>

<ul>
<li>Path to Git executable</li>
<li>/usr/bin/git</li>
</ul>


<p>くらいやっとけばいいかも？　</p>

<h2>3. プロジェクト作成</h2>

<p>Jenkins > 新規ジョブ作成　から</p>

<ul>
<li>ジョブ名</li>
<li>適当(nadesiko2とか付けてみた)</li>
<li>フリースタイル・プロジェクトのビルドを選択</li>
<li>OKボタンを押す</li>
</ul>


<h2>4. プロジェクト設定</h2>

<p>プロジェクトの設定画面に移動するので編集。Jenkins > プロジェクト(今回はnadesiko2) > 設定　からいつでも編集可能。</p>

<ul>
<li>ソースコード管理</li>
<li>Gitを選択</li>
<li>Repository URL</li>
<li> なでしこ2のリポジトリの場所。今回は<a href="http://blog.shigepon.info/blog/2015/05/01/develop-nadesiko2-on-ubuntu-cui/">ubuntuのcui環境でなでしこ2をビルドする &ndash; shigeponが関心のある技術情報など</a>の続きなので/home/username/nadesiko2</li>
<li>Branches to build</li>
<li> なでしこ2では変更点はpull requestする予定なので、pull requestする時のブランチを指定した。ここは色んな設定がありえる。</li>
<li>ビルド・トリガ</li>
<li>SCMをポーリングを選択</li>
<li>スケジュール</li>
<li> H/30 * * * * (大体30分おき)</li>
<li>ビルド</li>
<li>ビルド手順の追加 > Build a Visual Studio project or solution using MSBuild</li>
<li>Build a Visual Studio project or solution using MSBuildの設定</li>
<li> MSBuild Version

<ul>
<li>monoを選択</li>
</ul>
</li>
<li> MSBuild Build File

<ul>
<li>cnakoのソリューションファイルとしてNako2_CNako.slnを指定した。プラグインのソリューションファイルでも出来ると思う</li>
</ul>
</li>
<li>ビルド手順の追加 > シェルの実行(Windowsだと多分Windowsバッチコマンドの実行)</li>
<li>シェルの実行</li>
<li> nunit-console $WORKSPACE/CNako2Test/bin/Debug/CNako2Test.dll -xml cnako2test.xml -noshadow</li>
<li>ビルド後の処理</li>
<li>ビルド後の処理の追加 > Publish NUnit test result report</li>
<li>cnako2test.xml</li>
</ul>


<h2>5. 実行</h2>

<p>Jenkins > プロジェクト(今回はnadesiko2)
で、ビルド実行をクリックすると実行してくれる。あと、gitの指定したブランチでコミットした後もこの設定の場合30分おきにコミットをチェックしてビルドを実行してくれる。まだまだテストが通ってない部分もあるので、結果は失敗になるけど、とりあえずこれで進められる。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[なでしこ2をubuntu cuiでテストする]]></title>
    <link href="http://blog.shigepon.info/blog/2015/05/05/nunit-console-test-for-nadesiko2/"/>
    <updated>2015-05-05T23:02:32+09:00</updated>
    <id>http://blog.shigepon.info/blog/2015/05/05/nunit-console-test-for-nadesiko2</id>
    <content type="html"><![CDATA[<p><a href="http://blog.shigepon.info/blog/2015/05/01/develop-nadesiko2-on-ubuntu-cui/">ubuntuのcui環境でなでしこ2をビルドする</a>の続きで、cui環境でなでしこ2のテストを実行してみる。</p>

<p>cui環境でnunitを実行するには<a href="http://www.nunit.org/index.php?p=nunit-console&amp;r=2.5.10">nunit-console</a>を使う。なでしこ2のテストを実行するにはテスト関連のdllをnunitで実行すると良い。コマンドはなでしこ2をインストールしたディレクトリでこんな感じ。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>nunit-console CNako2Test/bin/Debug/CNako2Test.dll
</span></code></pre></td></tr></table></div></figure>


<p>プラグインのテスト(NakoPluginTest)プロジェクトでは外部ファイルを利用するので</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>nunit-console NakoPluginTest/bin/Debug/NakoPluginTest.dll
</span></code></pre></td></tr></table></div></figure>




<!-- more -->


<p>だと、外部ファイルを読み込むテスト（例えばTest_read）で、Could not find fileと怒られる。なので、コマンドにnoshadowオプションを付ける。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>nunit-console -noshadow NakoPluginTest/bin/Debug/NakoPluginTest.dll
</span></code></pre></td></tr></table></div></figure>


<p>とすると、外部ファイルを読み込んでくれる。
これでcui環境でなでしこ2をビルドからテストまで出来る。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ubuntuのcui環境でなでしこ2をビルドする]]></title>
    <link href="http://blog.shigepon.info/blog/2015/05/01/develop-nadesiko2-on-ubuntu-cui/"/>
    <updated>2015-05-01T08:23:00+09:00</updated>
    <id>http://blog.shigepon.info/blog/2015/05/01/develop-nadesiko2-on-ubuntu-cui</id>
    <content type="html"><![CDATA[<p>今までmono developでなでしこ2をビルド、テストして、cui環境にアップロードしてたんだけど、面倒になってきたのでcui環境で直接ビルド、テストしてみようと思ったのでついでに開発を始める段階からメモしてみる。</p>

<p>環境はubuntu 12.04とするが、上位バージョンでも問題無いはず</p>

<h1>mono環境の準備</h1>

<p>mono-develをインストールしたらmono関連で必要なものは勝手にインストールされたような気がする。ついでに<a href="http://blog.shigepon.info/blog/2014/08/20/vb-not-work-on-ubuntu/">VisualBasicが動かない件</a>にあるように、mono-vbnc、あとはnunitのインストール</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>aptitude install mono-devel mono-vbnc nunit
</span></code></pre></td></tr></table></div></figure>




<!-- more -->




<!-- more -->


<h1>なでしこ2リポジトリを取得</h1>

<p><a href="http://it.slashdot.jp/story/15/03/13/0340256/">Google Codeが2016年1月に閉鎖される</a>ので、なでしこ2のリポジトリはgithubに移動している。</p>

<p>なので、リポジトリの取得はgit cloneでいける。kujirahandさんのリポジトリをcloneするなら</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>git clone https://github.com/kujirahand/nadesiko2.git
</span></code></pre></td></tr></table></div></figure>


<p>shigeponがfolkしたリポジトリなら</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>git clone https://github.com/shigepon/nadesiko2.git
</span></code></pre></td></tr></table></div></figure>


<p>で、カレントディレクトリにnadesiko2ディレクトリが出来て、その下にプロジェクト1式が入っている。中にはソリューションが3つあり、それぞれ</p>

<ul>
<li>Nako2_CNako.sln → cui環境で動かすなでしこ2(cnako)関連</li>
<li>Nako2_Plugins.sln → なでしこ2のプラグイン関連</li>
<li>Nako2_Plugins_Office.sln → なでしこ2のOffice関係プラグイン</li>
</ul>


<p>のソリューションである。今回は\/home\/usernameディレクトリ上でcloneすると考える</p>

<h1>おもむろにビルド</h1>

<p>kujirahandさんのリポジトリをcloneしたとして、とりあえず何もせずにCNakoのソリューションをビルドしてみると</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>xbuild Nako2_CNako.sln
</span><span class='line'>...
</span><span class='line'>NakoPluginArrayTest.cs<span class="o">(</span>9,7<span class="o">)</span>: error CS0246: The <span class="nb">type </span>or namespace name <span class="sb">`</span>NUnit<span class="err">&#39;</span> could not be found. Are you missing a using directive or an assembly reference?
</span><span class='line'>...
</span></code></pre></td></tr></table></div></figure>


<p>みたいなエラーメッセージを出してビルド出来ない。一方でプラグイン関連のソリューションは</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>xbuild Nako2_Plugins.sln
</span><span class='line'>...
</span><span class='line'>    18 Warning<span class="o">(</span>s<span class="o">)</span>
</span><span class='line'>     0 Error<span class="o">(</span>s<span class="o">)</span>
</span><span class='line'>Time Elapsed 00:00:06.1095450
</span></code></pre></td></tr></table></div></figure>


<p>と出て、エラー無くビルド出来る。この違いはそれぞれのソリューションで参照しているテストプロジェクトにnunitへの参照パスが入っているかどうかの違いだったので、NakoPluginTest/NakoPluginTest.csprojを参考にしてCNakoTest/CNakoTest.csprojの</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>&lt;Reference <span class="nv">Include</span><span class="o">=</span><span class="s2">&quot;nunit.framework.extensions, ...&quot;</span> /&gt;
</span></code></pre></td></tr></table></div></figure>


<p>行に３行追記する</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'>   <span class="nt">&lt;Reference</span> <span class="na">Include=</span><span class="s">&quot;nunit.framework&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>       <span class="nt">&lt;HintPath&gt;</span>..\..\..\..\usr\lib\mono\gac\nunit.framework\2.5.10.0__96d09a1eb7f44a77\nunit.framework.dll<span class="nt">&lt;/HintPath&gt;</span>
</span><span class='line'>   <span class="nt">&lt;/Reference&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>で、再度ビルドするとビルド出来た。shigeponのリポジトリには修正したものをアップしておくのでそのままビルド出来ると思う。パスはリポジトリをcloneするディレクトリによっては変更しないといけないと思う。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[PythonでSparql使ってLinked Open Dataをいじってみた]]></title>
    <link href="http://blog.shigepon.info/blog/2015/03/19/use-sparql-with-python/"/>
    <updated>2015-03-19T22:07:12+09:00</updated>
    <id>http://blog.shigepon.info/blog/2015/03/19/use-sparql-with-python</id>
    <content type="html"><![CDATA[<p>以前<a href="http://blog.shigepon.info/blog/2014/11/25/kobe-dot-r-no-13/">Kobe.R no 13に参加してきました &ndash; shigeponが関心のある技術情報など</a>でLinked Open Dataが気になってたので、Pythonでいじれるライブラリを探してみて遊んでみた。</p>

<p>Sparqlで色々試してみると面白そうなので、pip search sparqlで出た結果とググってみた結果から、SPARQLWrapperが何となく良さげかなと思い、インストールしてみた。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>pip install SPARQLWrapper
</span></code></pre></td></tr></table></div></figure>


<p>これだけでおk</p>

<p>djangoのshellから使ってみる</p>

<!-- more -->




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='py'><span class='line'><span class="err">$</span> <span class="n">python</span> <span class="n">manage</span><span class="o">.</span><span class="n">py</span> <span class="n">shell</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">SPARQLWrapper</span> <span class="kn">import</span> <span class="n">SPARQLWrapper</span><span class="p">,</span> <span class="n">JSON</span>
</span><span class='line'><span class="n">sparql</span> <span class="o">=</span> <span class="n">SPARQLWrapper</span><span class="p">(</span><span class="s">&quot;http://dbpedia.org/sparql&quot;</span><span class="p">)</span>
</span><span class='line'><span class="n">sparql</span><span class="o">.</span><span class="n">setQuery</span><span class="p">(</span><span class="s">&quot;&quot;&quot;</span>
</span><span class='line'><span class="s">  PREFIX rdfs: &lt;http://www.w3.org/2000/01/rdf-schema#&gt;</span>
</span><span class='line'><span class="s">  SELECT ?label</span>
</span><span class='line'><span class="s">  WHERE { &lt;http://dbpedia.org/resource/Asturias&gt; rdfs:label ?label }</span>
</span><span class='line'><span class="s">&quot;&quot;&quot;</span><span class="p">)</span>
</span><span class='line'><span class="n">sparql</span><span class="o">.</span><span class="n">setReturnFormat</span><span class="p">(</span><span class="n">JSON</span><span class="p">)</span>
</span><span class='line'><span class="n">results</span> <span class="o">=</span> <span class="n">sparql</span><span class="o">.</span><span class="n">query</span><span class="p">()</span><span class="o">.</span><span class="n">convert</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="err">!</span><span class="o">--</span> <span class="n">more</span> <span class="o">--&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="k">for</span> <span class="n">result</span> <span class="ow">in</span> <span class="n">results</span><span class="p">[</span><span class="s">&quot;results&quot;</span><span class="p">][</span><span class="s">&quot;bindings&quot;</span><span class="p">]:</span>
</span><span class='line'>    <span class="k">print</span><span class="p">(</span><span class="n">result</span><span class="p">[</span><span class="s">&quot;label][&quot;</span><span class="n">value</span><span class="s">&quot;])</span>
</span></code></pre></td></tr></table></div></figure>


<p>とやるとこんな感じの結果が出た</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>Asturias
</span><span class='line'>منطقة أستورياس
</span><span class='line'>Asturien
</span><span class='line'>Asturias
</span><span class='line'>Asturies
</span><span class='line'>Asturie
</span><span class='line'>アストゥリアス州
</span><span class='line'>Asturië <span class="o">(</span>regio<span class="o">)</span>
</span><span class='line'>Asturia
</span><span class='line'>Astúrias
</span><span class='line'>Астурия
</span><span class='line'>阿斯图里亚斯
</span></code></pre></td></tr></table></div></figure>


<p>参考：<a href="http://rdflib.github.io/sparqlwrapper/">SPARQL Endpoint interface to Python</a></p>

<p>Sparqlの書き方は<a href="http://kobexr.blogspot.jp/2014/12/kober-13-open-data.html">Kobe.R: Kobe.R #13 + Open Data</a>に載っているスライドが参考になる。</p>

<p>Linked Open Dataで１つ気になるのが、エンドポイントをどうやって探すかなんだけど、今の所ググってみるくらいしかやり方が分からない。ここらへん何か良い方法無いのかなー。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Django 1.6から1.7にアップデートしてみた]]></title>
    <link href="http://blog.shigepon.info/blog/2015/03/09/migrate-from-django-1-dot-6-to-1-dot-7/"/>
    <updated>2015-03-09T22:11:02+09:00</updated>
    <id>http://blog.shigepon.info/blog/2015/03/09/migrate-from-django-1-dot-6-to-1-dot-7</id>
    <content type="html"><![CDATA[<p>Djangoが去年の9月に1.7にバージョンアップしてて、今更ながらアップデートしてみた。色々教えて頂いた<a href="https://twitter.com/key3">@key3</a>さんに感謝！</p>

<p>※注　アップデートの前に必ずデータとかソースとか色々バックアップしておくこと。</p>

<h2>Django本体のアップデート</h2>

<p>Djangoはpipで管理してるので、pipコマンドでアップデート出来る</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>pip install django -U
</span></code></pre></td></tr></table></div></figure>




<!-- more -->


<p>これで本体はアップデート完了した。</p>

<!-- more -->


<h2>プロジェクトをDjango1.7で動かす</h2>

<p>何も変更せずにおもむろに</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>python manage.py runserver
</span></code></pre></td></tr></table></div></figure>


<p>とするとエラー出て動かなかった。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>raise AppRegistryNotReady<span class="o">(</span><span class="s2">&quot;Models aren&#39;t loaded yet.&quot;</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Tracebackを見てみるとどうもmodels.pyの中で</p>

<figure class='code'><figcaption><span>models.py</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='py'><span class='line'><span class="n">admin</span><span class="o">.</span><span class="n">site</span><span class="o">.</span><span class="n">register</span><span class="p">(</span><span class="n">Model</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>とかやってたのがまずかったみたいで、管理サイトで使うモデル定義などのコードをadmin.pyに移動したら上のエラーは出なくなった。何となくで書いてたらいかんな。ちなみにアップデートには関係無いけど、Django1.7で@admin.register(Model)というデコレーターが使えるようになったので、そっちに変えた方がスマートな気がする。</p>

<p>次はSouthでマイグレーションやってるプロジェクトだったので、下のようなエラーが出た。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>raise RuntimeError<span class="o">(</span><span class="s2">&quot;South does not support Django 1.7 or higher. Please use native Django migrations.&quot;</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>要はSouthはもうサポートしてないからDjango自身のマイグレーションでやってねということらしい。</p>

<p><a href="https://docs.djangoproject.com/en/1.7/topics/migrations/#upgrading-from-south">Migrations | Django documentation | Django</a>を見ながらやってみる。ざっくり手順を日本語で書いておく</p>

<ul>
<li>マイグレーションの状態がちゃんと最新になっているか確認する</li>
<li>settings.pyのINSTALLED_APPSの行から&#8217;south&#8217;を取り除く</li>
<li>数字の付いたマイグレーションファイルを全て削除する。ディレクトリと__init__.pyは残す。.pycファイルも削除すること。</li>
<li>python manage.py makemigrasionsを実行する。Djangoが空のマイグレーションディレクトリに新しい初期マイグレーションを作る。</li>
<li>python manage.py migrateを実行する。Djangoは初期マイグレーションをチェックして、実行しないで適用済みにする。</li>
</ul>


<p>以上やってみたら、エラーは出ずにプロジェクトをDjango1.7に対応できた。めでたしめでたし。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[uwsgiメモ]]></title>
    <link href="http://blog.shigepon.info/blog/2015/03/05/uwsgi-memo/"/>
    <updated>2015-03-05T10:21:54+09:00</updated>
    <id>http://blog.shigepon.info/blog/2015/03/05/uwsgi-memo</id>
    <content type="html"><![CDATA[<p>uwsgi関連ではまった点などをメモ</p>

<h2>invalid request block size</h2>

<p>ajaxでサーバ側からデータを読み込むライブラリを使ってると、条件によって502エラーが出てる(=大体djangoとかのプログラム側のエラーで出る)ので、uwsgiのログを調べると、invalid request block sizeというエラーが出てた。</p>

<p>んで、調べてみると、uwsgiがリクエストのサイズが大きすぎるとエラーを吐いているらしい。ライブラリ側で勝手にパラメーター付けて送られてリクエストのサイズが大きくなっているので、こりゃ調整しないとなということで調べてみた。起動時にオプション設定するか、iniファイルで設定したらいけるらしい</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>uwsgi --buffer-size<span class="o">=</span>xxxx
</span></code></pre></td></tr></table></div></figure>




<!-- more -->




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ini'><span class='line'><span class="err">...</span>
</span><span class='line'><span class="na">buffer-size</span><span class="o">=</span> <span class="s">xxxx</span>
</span><span class='line'><span class="err">...</span>
</span></code></pre></td></tr></table></div></figure>




<!-- more -->


<p>参考：<a href="http://stackoverflow.com/questions/15878176/uwsgi-invalid-request-block-size">uwsgi invalid request block size &ndash; Stack Overflow</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[突然サーバエラーが頻発したので、調べてみたらエラーログが原因だった]]></title>
    <link href="http://blog.shigepon.info/blog/2015/03/03/error-log-make-php-error/"/>
    <updated>2015-03-03T09:56:56+09:00</updated>
    <id>http://blog.shigepon.info/blog/2015/03/03/error-log-make-php-error</id>
    <content type="html"><![CDATA[<p>参考：<a href="http://zapanet.info/blog/item/2489">PHPのエラーログが肥大してPHPが動かなくなった話</a></p>

<p>ある日、運用しているサービスがサーバエラーを頻出しだしたので、調べてみた。環境はUbuntu、nginx、php-fpm、postgresql。</p>

<ul>
<li>他のサーバへのdbアクセスがおかしくなったのかと思い、他の方法でdbアクセス→問題無し</li>
<li>サービスを色々再起動してみた。→変化なし</li>
<li>サーバを再起動。しばらくエラーでないが、しばらくするとエラーががが</li>
<li>php-fpmを再起動。しばらくエラーでないが、しばらくするとエラーががが</li>
<li>php周りかなと思ったので、phpのログを開く→開かない！</li>
<li>良く見たらphp-fpmのログが2GB超えてた。ナンテコッタイ。</li>
<li>ログを退避して、ローテーション設定して改めてphp-fpmを再起動したら直った。めでたしめでたし。</li>
</ul>


<p>メモがてらローテーション設定を書いておく</p>

<!-- more -->


<p>/etc/logrotate.d/php.conf</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>/path/to/php5-fpm.log {
</span><span class='line'>  daily
</span><span class='line'>  missingok
</span><span class='line'>  rotate 52
</span><span class='line'>  compress
</span><span class='line'>  delaycompress
</span><span class='line'>  notifyempty
</span><span class='line'>  create 0644 group username
</span><span class='line'>  dateext
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>エラーチェックテストはこんな感じ</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>logrotate -dv /etc/logrotate.d/php.conf
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Kobe.R #15に参加しました]]></title>
    <link href="http://blog.shigepon.info/blog/2015/03/01/kobe-dot-r-no-15/"/>
    <updated>2015-03-01T10:57:17+09:00</updated>
    <id>http://blog.shigepon.info/blog/2015/03/01/kobe-dot-r-no-15</id>
    <content type="html"><![CDATA[<p>勉強会の話なので丁寧語で。2/28に<a href="https://kobexr.doorkeeper.jp/events/20843">Kobe.R #15</a>があったので参加してきました。今回は三宮で開かれました。今回は珍しく（？）Rの話題が多いR勉強会でした。抜けてる点もちょいちょいあると思いますが、覚えている限りの感想を書いておきます。</p>

<h2>Rによるデータ処理入門</h2>

<p>Kobe Rの主催者の河原さん（@h_kawahara）による発表でした。 データ読み込み、加工、表示までのRで解析する前に絶対必要な操作をまとめてくれました。大事なことはデータ加工≠データ整形ということかなと。何となく突っ込みどころを箇条書きにします</p>

<ul>
<li>strがstructureの略称とか、stringの略称じゃないんだ！</li>
<li>何度も言うけどforは遅い</li>
<li>db接続がodbcだけだとちょっと今後辛い気がする</li>
<li>大きいファイルはRDataファイルにしておくと容量小さい</li>
<li>データ加工に便利なのはdplyr(でぃーぷらいやーと読むらしい）</li>
<li>dplyrのソート命令がarrange！sortとかorderじゃないのか。</li>
<li>dplyrだとカラムの結合や分解も手軽に出来そう</li>
<li>自分でちょっといじって、packageとかfunctionを探す方法を掴まないと、関数名に略称とか使ってるケースが結構あって、探しにくいかも。使ってみないと何とも言えないけど</li>
<li>発表でちょっと気になったけど、同じ書式の演算子でパッケージによって違う意味になったりするの？</li>
</ul>


<!-- more -->


<p>データの前処理ってとても大事なので、参考にしてちょっと練習出来たらなと思います。</p>

<h2>R in Life Science</h2>

<p>Tomitaさんの発表。生物系の学生さんだそうで、研究で使いそうなヒートマップ表示について教えてくれました。
車のデータを利用して燃費をベースにしてグルーピングしながら、各項目についてヒートマップ表示して傾向が見やすくなってました。
最初バイオ系なのでSDS-PAGEか何かかと思いましたががが。あと、ggplot（だったかな？）でのヒートマップ関数としてheatmap.2ってのを紹介されていましたが、関数名に2とか入るの久しぶりに見ました。これはん〜〜〜〜〜〜、ちょっとな〜〜〜。でも機能は多いみたいです。</p>

<h2>Incanterチョットシッテル</h2>

<p>@tnoda_さんの発表
<a href="http://sssslide.com/www.slideshare.net/tnoda/kober-15-incanter">スライドはこちら</a>。
Twitterでインなんとかとか言っちゃいましたが、インキャンターです。「ノリを間違えたかも！（意訳）」とおっしゃっていましたが、とても楽しい発表でした。リアルタイムに突っ込み入れたかったのですが、出来なかったので、ここで突っ込みしておきます。</p>

<ul>
<li>Clojureってカッコだらけだ！Lis(ry (*)</li>
<li>3D pie chart以外はRと同じことは出来るらしい</li>
<li>インストールはLeiningen（らいにんげん）からやるらしい。プロジェクト作ったりライブラリ管理とかやってくれるらしい。pipとかmagage.pyみたいなもん？</li>
<li>Incanterの公式ダウンロードリンクからインストールしてはいけない。インストールしてしまった後のことは知らない。</li>
<li>Rの話は8ページ目で終了と言ってたけど、dplyr出て来たよ（25ページ目）</li>
<li>マクロという言葉に拒否感ががが（C的Excel的意味で）。でもきっと慣れると便利なんだろう。きっと。多分。</li>
<li>Clojureが並列処理に向いているらしいので、並列処理＋統計処理に良さげ</li>
<li>javaベースなので、javaベースのものと統合しやすいらしい。javaで開発してないからさっぱり分かんないけど。</li>
<li>Incanterで3D pie chart書きたかったら、RserveってのでIncanterとRをつないだらいいらしい。3D pie chartの為だけにそこまでやるとか変態すぐる</li>
</ul>


<h2>分析実践</h2>

<p>残った時間で実際にやってみましょうということで、弁当屋のデータを元にして売り上げ予測をやるという目的でRを触ってみるということをやっていました。R勉強会とは言え、実際にRをバリバリ使ってる人とかほとんど居ないと思うので、とても良い試みだと思いました。が、私はパソコン持ってなかったので読書しながら他の人がハマっているのを見たりしてました（悪趣味）。どうも文字コード周りでハマるケースが結構あるっぽいです。うむむむむ。ハマりポイントはハッキリさせたいところです。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[djangoのModelFormでMultiWidgetを使って見る]]></title>
    <link href="http://blog.shigepon.info/blog/2015/01/24/django-modelform-multiwidget/"/>
    <updated>2015-01-24T17:23:07+09:00</updated>
    <id>http://blog.shigepon.info/blog/2015/01/24/django-modelform-multiwidget</id>
    <content type="html"><![CDATA[<p>ModelFormでModelの１つのカラムを複数のフォーム要素（inputとか）で表現したかったので調べてみた。フォーム要素を適当に作って、clean_xxxの時にくっつけるとかそんな実装の仕方も出来るみたいだけど、MultiWidgetを使うと、Modelの１つのカラムに対して複数のinput要素を使うことが出来るみたいなので、使ってみた。名前のカラムに対して姓、名の入力要素を作るとかそんなのが出来るみたい。</p>

<p>まずはMultiWidgetを継承したクラスを作る</p>

<figure class='code'><figcaption><span>models.py</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='py'><span class='line'><span class="kn">from</span> <span class="nn">django.forms.widgets</span> <span class="kn">import</span> <span class="n">MultiWidget</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">NameWidget</span><span class="p">(</span><span class="n">MultiWidget</span><span class="p">):</span>
</span><span class='line'>
</span></code></pre></td></tr></table></div></figure>


<p>次にクラスに対して、__init__をオーバーライドし、widgetとしてTextInputのフォームを2つ登録してみた。コードはこんな感じ。</p>

<!-- more -->




<figure class='code'><figcaption><span>models.py</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='py'><span class='line'><span class="k">class</span> <span class="nc">NameWidget</span><span class="p">(</span><span class="n">MultiWidget</span><span class="p">):</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span><span class="n">attrs</span><span class="o">=</span><span class="bp">None</span><span class="p">):</span>
</span><span class='line'>        <span class="n">widgets</span> <span class="o">=</span> <span class="p">(</span>
</span><span class='line'>                <span class="n">forms</span><span class="o">.</span><span class="n">TextInput</span><span class="p">(</span><span class="n">attrs</span><span class="o">=</span><span class="n">attrs</span><span class="o">.</span><span class="n">update</span><span class="p">({</span><span class="s">&quot;placeholder&quot;</span><span class="p">:</span><span class="s">&quot;姓&quot;</span><span class="p">})),</span>
</span><span class='line'>                <span class="n">forms</span><span class="o">.</span><span class="n">TextInput</span><span class="p">(</span><span class="n">attrs</span><span class="o">=</span><span class="n">attrs</span><span class="o">.</span><span class="n">update</span><span class="p">({</span><span class="s">&quot;placeholder&quot;</span><span class="p">:</span><span class="s">&quot;名&quot;</span><span class="p">}))</span>
</span><span class='line'>                <span class="p">)</span>
</span><span class='line'>        <span class="nb">super</span><span class="p">(</span><span class="n">NameWidget</span><span class="p">,</span><span class="bp">self</span><span class="p">)</span><span class="o">.</span><span class="n">__init__</span><span class="p">(</span><span class="n">widgets</span><span class="p">,</span><span class="n">attrs</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>widgetsはリストでもタプルでも良さげ？ともかくやることはwidgetのリストかタプルを作って、親クラス(MultiWidget)のinitを呼び出すこと。</p>

<p>次に、decompress、value_from_datadictメソッドを書く。decompressはカラムの値を複数のフォームに振り分ける手順、value_from_datadictはModelFormの入力データからModelのカラムに入れる値を作る手順を記述する。姓名を半角スペースで繋げて、半角スペースで分割するように作ってみた。</p>

<figure class='code'><figcaption><span>models.py</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='py'><span class='line'><span class="k">class</span> <span class="nc">NameWidget</span><span class="p">(</span><span class="n">MultiWidget</span><span class="p">):</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span><span class="n">attrs</span><span class="o">=</span><span class="p">{}):</span>
</span><span class='line'>        <span class="n">attrsSei</span> <span class="o">=</span> <span class="n">attrs</span><span class="o">.</span><span class="n">copy</span><span class="p">()</span>
</span><span class='line'>        <span class="n">attrsMei</span> <span class="o">=</span> <span class="n">attrs</span><span class="o">.</span><span class="n">copy</span><span class="p">()</span>
</span><span class='line'>        <span class="n">widgets</span> <span class="o">=</span> <span class="p">(</span>
</span><span class='line'>                <span class="n">forms</span><span class="o">.</span><span class="n">TextInput</span><span class="p">(</span><span class="n">attrs</span><span class="o">=</span><span class="n">attrsSei</span><span class="o">.</span><span class="n">update</span><span class="p">({</span><span class="s">&quot;placeholder&quot;</span><span class="p">:</span><span class="s">&quot;姓&quot;</span><span class="p">})),</span>
</span><span class='line'>                <span class="n">forms</span><span class="o">.</span><span class="n">TextInput</span><span class="p">(</span><span class="n">attrs</span><span class="o">=</span><span class="n">attrsMei</span><span class="o">.</span><span class="n">update</span><span class="p">({</span><span class="s">&quot;placeholder&quot;</span><span class="p">:</span><span class="s">&quot;名&quot;</span><span class="p">}))</span>
</span><span class='line'>                <span class="p">)</span>
</span><span class='line'>        <span class="nb">super</span><span class="p">(</span><span class="n">NameWidget</span><span class="p">,</span><span class="bp">self</span><span class="p">)</span><span class="o">.</span><span class="n">__init__</span><span class="p">(</span><span class="n">widgets</span><span class="p">,</span><span class="n">attrs</span><span class="p">)</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">decompress</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span><span class="n">value</span><span class="p">):</span>
</span><span class='line'>        <span class="k">if</span> <span class="n">value</span><span class="p">:</span>
</span><span class='line'>            <span class="n">names</span> <span class="o">=</span> <span class="n">value</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s">&#39; &#39;</span><span class="p">)</span>
</span><span class='line'>            <span class="k">return</span> <span class="p">(</span><span class="n">names</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span><span class="n">names</span><span class="p">[</span><span class="mi">1</span><span class="p">])</span>
</span><span class='line'>        <span class="k">return</span> <span class="p">(</span><span class="bp">None</span><span class="p">,</span><span class="bp">None</span><span class="p">)</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">value_from_datadict</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span><span class="n">data</span><span class="p">,</span><span class="n">files</span><span class="p">,</span><span class="n">name</span><span class="p">):</span>
</span><span class='line'>        <span class="n">ulist</span> <span class="o">=</span> <span class="p">[</span><span class="n">widget</span><span class="o">.</span><span class="n">value_from_datadict</span><span class="p">(</span><span class="n">data</span><span class="p">,</span><span class="n">files</span><span class="p">,</span><span class="n">name</span><span class="o">+</span><span class="s">&#39;_{0}&#39;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">i</span><span class="p">))</span> <span class="k">for</span> <span class="n">i</span><span class="p">,</span> <span class="n">widget</span> <span class="ow">in</span> <span class="nb">enumerate</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">widgets</span><span class="p">)]</span>
</span><span class='line'>        <span class="k">return</span> <span class="s">u&quot;{0} {1}&quot;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">ulist</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">.</span><span class="n">replace</span><span class="p">(</span><span class="s">u&#39; &#39;</span><span class="p">,</span><span class="s">&#39;&#39;</span><span class="p">),</span><span class="n">ulist</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span><span class="o">.</span><span class="n">replace</span><span class="p">(</span><span class="s">u&#39; &#39;</span><span class="p">,</span><span class="s">&#39;&#39;</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure>


<p>あとはこのWidgetを使いたい要素にwidgetとして指定すればおk</p>

<figure class='code'><figcaption><span>models.py</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='py'><span class='line'><span class="kn">from</span> <span class="nn">django</span> <span class="kn">import</span> <span class="n">forms</span>
</span><span class='line'><span class="o">...</span><span class="err">（上のコードなど）</span><span class="o">...</span>
</span><span class='line'><span class="k">class</span> <span class="nc">HogeForm</span><span class="p">(</span><span class="n">forms</span><span class="o">.</span><span class="n">ModelForm</span><span class="p">):</span>
</span><span class='line'>    <span class="n">name</span> <span class="o">=</span> <span class="n">forms</span><span class="o">.</span><span class="n">CharField</span><span class="p">(</span><span class="n">max_length</span><span class="o">=</span><span class="mi">100</span><span class="p">,</span><span class="n">label</span><span class="o">=</span><span class="s">u&#39;名前&#39;</span><span class="p">,</span><span class="n">widget</span><span class="o">=</span><span class="n">NameWidget</span><span class="p">())</span>
</span></code></pre></td></tr></table></div></figure>


<p>このコードだと姓、名のフォームが2行に表示されている。1行にしたい場合はインライン指定とかそんなのを付けたクラスをattrsで指定して後はcssでやっちゃえばいいんじゃないかなと</p>

<figure class='code'><figcaption><span>models.py</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='py'><span class='line'><span class="n">name</span> <span class="o">=</span> <span class="n">forms</span><span class="o">.</span><span class="n">CharField</span><span class="p">(</span><span class="n">max_length</span><span class="o">=</span><span class="mi">100</span><span class="p">,</span><span class="n">label</span><span class="o">=</span><span class="s">u&#39;名前&#39;</span><span class="p">,</span><span class="n">widget</span><span class="o">=</span><span class="n">NameWidget</span><span class="p">(</span><span class="n">attrs</span><span class="o">=</span><span class="p">{</span><span class="s">&quot;class&quot;</span><span class="p">:</span><span class="s">&quot;inline&quot;</span><span class="p">}))</span>
</span></code></pre></td></tr></table></div></figure>


<p>とかそんな感じ</p>

<p>他にももっと細かくhtmlを記述出来るformat_outputとかあるみたいだけど、試してないので省略。なくても取りあえず出来る。</p>

<p>参考：<a href="https://docs.djangoproject.com/en/1.7/ref/forms/widgets/#django.forms.MultiWidget">Django英語ドキュメント</a></p>
]]></content>
  </entry>
  
</feed>
