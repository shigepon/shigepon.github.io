<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[shigeponが関心のある技術情報など]]></title>
  <link href="http://blog.shigepon.com/atom.xml" rel="self"/>
  <link href="http://blog.shigepon.com/"/>
  <updated>2015-03-01T11:53:34+09:00</updated>
  <id>http://blog.shigepon.com/</id>
  <author>
    <name><![CDATA[shigepon]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Kobe.R #15に参加しました]]></title>
    <link href="http://blog.shigepon.com/blog/2015/03/01/kobe-dot-r-no-15/"/>
    <updated>2015-03-01T10:57:17+09:00</updated>
    <id>http://blog.shigepon.com/blog/2015/03/01/kobe-dot-r-no-15</id>
    <content type="html"><![CDATA[<p>勉強会の話なので丁寧語で。2/28に<a href="https://kobexr.doorkeeper.jp/events/20843">Kobe.R #15</a>があったので参加してきました。今回は三宮で開かれました。今回は珍しく（？）Rの話題が多いR勉強会でした。抜けてる点もちょいちょいあると思いますが、覚えている限りの感想を書いておきます。</p>

<h2>Rによるデータ処理入門</h2>

<p>Kobe Rの主催者の河原さん（@h_kawahara）による発表でした。 データ読み込み、加工、表示までのRで解析する前に絶対必要な操作をまとめてくれました。大事なことはデータ加工≠データ整形ということかなと。何となく突っ込みどころを箇条書きにします</p>

<ul>
<li>strがstructureの略称とか、stringの略称じゃないんだ！</li>
<li>何度も言うけどforは遅い</li>
<li>db接続がodbcだけだとちょっと今後辛い気がする</li>
<li>大きいファイルはRDataファイルにしておくと容量小さい</li>
<li>データ加工に便利なのはdplyr(でぃーぷらいやーと読むらしい）</li>
<li>dplyrのソート命令がarrange！sortとかorderじゃないのか。</li>
<li>dplyrだとカラムの結合や分解も手軽に出来そう</li>
<li>自分でちょっといじって、packageとかfunctionを探す方法を掴まないと、関数名に略称とか使ってるケースが結構あって、探しにくいかも。使ってみないと何とも言えないけど</li>
<li>発表でちょっと気になったけど、同じ書式の演算子でパッケージによって違う意味になったりするの？</li>
</ul>


<p>データの前処理ってとても大事なので、参考にしてちょっと練習出来たらなと思います。</p>

<h2>R in Life Science</h2>

<p>Tomitaさんの発表。生物系の学生さんだそうで、研究で使いそうなヒートマップ表示について教えてくれました。
車のデータを利用して燃費をベースにしてグルーピングしながら、各項目についてヒートマップ表示して傾向が見やすくなってました。
最初バイオ系なのでSDS-PAGEか何かかと思いましたががが。あと、ggplot（だったかな？）でのヒートマップ関数としてheatmap.2ってのを紹介されていましたが、関数名に2とか入るの久しぶりに見ました。これはん〜〜〜〜〜〜、ちょっとな〜〜〜。でも機能は多いみたいです。</p>

<h2>Incanterチョットシッテル</h2>

<p>@tnoda_さんの発表
<a href="http://sssslide.com/www.slideshare.net/tnoda/kober-15-incanter">スライドはこちら</a>。
Twitterでインなんとかとか言っちゃいましたが、インキャンターです。「ノリを間違えたかも！（意訳）」とおっしゃっていましたが、とても楽しい発表でした。リアルタイムに突っ込み入れたかったのですが、出来なかったので、ここで突っ込みしておきます。</p>

<ul>
<li>Clojureってカッコだらけだ！Lis(ry (*)</li>
<li>3D pie chart以外はRと同じことは出来るらしい</li>
<li>インストールはLeiningen（らいにんげん）からやるらしい。プロジェクト作ったりライブラリ管理とかやってくれるらしい。pipとかmagage.pyみたいなもん？</li>
<li>Incanterの公式ダウンロードリンクからインストールしてはいけない。インストールしてしまった後のことは知らない。</li>
<li>Rの話は8ページ目で終了と言ってたけど、dplyr出て来たよ（25ページ目）</li>
<li>マクロという言葉に拒否感ががが（C的Excel的意味で）。でもきっと慣れると便利なんだろう。きっと。多分。</li>
<li>Clojureが並列処理に向いているらしいので、並列処理＋統計処理に良さげ</li>
<li>javaベースなので、javaベースのものと統合しやすいらしい。javaで開発してないからさっぱり分かんないけど。</li>
<li>Incanterで3D pie chart書きたかったら、RserveってのでIncanterとRをつないだらいいらしい。3D pie chartの為だけにそこまでやるとか変態すぐる</li>
</ul>


<h2>分析実践</h2>

<p>残った時間で実際にやってみましょうということで、弁当屋のデータを元にして売り上げ予測をやるという目的でRを触ってみるということをやっていました。R勉強会とは言え、実際にRをバリバリ使ってる人とかほとんど居ないと思うので、とても良い試みだと思いました。が、私はパソコン持ってなかったので読書しながら他の人がハマっているのを見たりしてました（悪趣味）。どうも文字コード周りでハマるケースが結構あるっぽいです。うむむむむ。ハマりポイントはハッキリさせたいところです。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[djangoのModelFormでMultiWidgetを使って見る]]></title>
    <link href="http://blog.shigepon.com/blog/2015/01/24/django-modelform-multiwidget/"/>
    <updated>2015-01-24T17:23:07+09:00</updated>
    <id>http://blog.shigepon.com/blog/2015/01/24/django-modelform-multiwidget</id>
    <content type="html"><![CDATA[<p>ModelFormでModelの１つのカラムを複数のフォーム要素（inputとか）で表現したかったので調べてみた。フォーム要素を適当に作って、clean_xxxの時にくっつけるとかそんな実装の仕方も出来るみたいだけど、MultiWidgetを使うと、Modelの１つのカラムに対して複数のinput要素を使うことが出来るみたいなので、使ってみた。名前のカラムに対して姓、名の入力要素を作るとかそんなのが出来るみたい。</p>

<p>まずはMultiWidgetを継承したクラスを作る</p>

<figure class='code'><figcaption><span>models.py</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='py'><span class='line'><span class="kn">from</span> <span class="nn">django.forms.widgets</span> <span class="kn">import</span> <span class="n">MultiWidget</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">NameWidget</span><span class="p">(</span><span class="n">MultiWidget</span><span class="p">):</span>
</span><span class='line'>
</span></code></pre></td></tr></table></div></figure>


<p>次にクラスに対して、__init__をオーバーライドし、widgetとしてTextInputのフォームを2つ登録してみた。コードはこんな感じ。</p>

<figure class='code'><figcaption><span>models.py</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='py'><span class='line'><span class="k">class</span> <span class="nc">NameWidget</span><span class="p">(</span><span class="n">MultiWidget</span><span class="p">):</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span><span class="n">attrs</span><span class="o">=</span><span class="bp">None</span><span class="p">):</span>
</span><span class='line'>        <span class="n">widgets</span> <span class="o">=</span> <span class="p">(</span>
</span><span class='line'>                <span class="n">forms</span><span class="o">.</span><span class="n">TextInput</span><span class="p">(</span><span class="n">attrs</span><span class="o">=</span><span class="n">attrs</span><span class="o">.</span><span class="n">update</span><span class="p">({</span><span class="s">&quot;placeholder&quot;</span><span class="p">:</span><span class="s">&quot;姓&quot;</span><span class="p">})),</span>
</span><span class='line'>                <span class="n">forms</span><span class="o">.</span><span class="n">TextInput</span><span class="p">(</span><span class="n">attrs</span><span class="o">=</span><span class="n">attrs</span><span class="o">.</span><span class="n">update</span><span class="p">({</span><span class="s">&quot;placeholder&quot;</span><span class="p">:</span><span class="s">&quot;名&quot;</span><span class="p">}))</span>
</span><span class='line'>                <span class="p">)</span>
</span><span class='line'>        <span class="nb">super</span><span class="p">(</span><span class="n">NameWidget</span><span class="p">,</span><span class="bp">self</span><span class="p">)</span><span class="o">.</span><span class="n">__init__</span><span class="p">(</span><span class="n">widgets</span><span class="p">,</span><span class="n">attrs</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>widgetsはリストでもタプルでも良さげ？ともかくやることはwidgetのリストかタプルを作って、親クラス(MultiWidget)のinitを呼び出すこと。</p>

<p>次に、decompress、value_from_datadictメソッドを書く。decompressはカラムの値を複数のフォームに振り分ける手順、value_from_datadictはModelFormの入力データからModelのカラムに入れる値を作る手順を記述する。姓名を半角スペースで繋げて、半角スペースで分割するように作ってみた。</p>

<figure class='code'><figcaption><span>models.py</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='py'><span class='line'><span class="k">class</span> <span class="nc">NameWidget</span><span class="p">(</span><span class="n">MultiWidget</span><span class="p">):</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span><span class="n">attrs</span><span class="o">=</span><span class="p">{}):</span>
</span><span class='line'>        <span class="n">attrsSei</span> <span class="o">=</span> <span class="n">attrs</span><span class="o">.</span><span class="n">copy</span><span class="p">()</span>
</span><span class='line'>        <span class="n">attrsMei</span> <span class="o">=</span> <span class="n">attrs</span><span class="o">.</span><span class="n">copy</span><span class="p">()</span>
</span><span class='line'>        <span class="n">widgets</span> <span class="o">=</span> <span class="p">(</span>
</span><span class='line'>                <span class="n">forms</span><span class="o">.</span><span class="n">TextInput</span><span class="p">(</span><span class="n">attrs</span><span class="o">=</span><span class="n">attrsSei</span><span class="o">.</span><span class="n">update</span><span class="p">({</span><span class="s">&quot;placeholder&quot;</span><span class="p">:</span><span class="s">&quot;姓&quot;</span><span class="p">})),</span>
</span><span class='line'>                <span class="n">forms</span><span class="o">.</span><span class="n">TextInput</span><span class="p">(</span><span class="n">attrs</span><span class="o">=</span><span class="n">attrsMei</span><span class="o">.</span><span class="n">update</span><span class="p">({</span><span class="s">&quot;placeholder&quot;</span><span class="p">:</span><span class="s">&quot;名&quot;</span><span class="p">}))</span>
</span><span class='line'>                <span class="p">)</span>
</span><span class='line'>        <span class="nb">super</span><span class="p">(</span><span class="n">NameWidget</span><span class="p">,</span><span class="bp">self</span><span class="p">)</span><span class="o">.</span><span class="n">__init__</span><span class="p">(</span><span class="n">widgets</span><span class="p">,</span><span class="n">attrs</span><span class="p">)</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">decompress</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span><span class="n">value</span><span class="p">):</span>
</span><span class='line'>        <span class="k">if</span> <span class="n">value</span><span class="p">:</span>
</span><span class='line'>            <span class="n">names</span> <span class="o">=</span> <span class="n">value</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s">&#39; &#39;</span><span class="p">)</span>
</span><span class='line'>            <span class="k">return</span> <span class="p">(</span><span class="n">names</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span><span class="n">names</span><span class="p">[</span><span class="mi">1</span><span class="p">])</span>
</span><span class='line'>        <span class="k">return</span> <span class="p">(</span><span class="bp">None</span><span class="p">,</span><span class="bp">None</span><span class="p">)</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">value_from_datadict</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span><span class="n">data</span><span class="p">,</span><span class="n">files</span><span class="p">,</span><span class="n">name</span><span class="p">):</span>
</span><span class='line'>        <span class="n">ulist</span> <span class="o">=</span> <span class="p">[</span><span class="n">widget</span><span class="o">.</span><span class="n">value_from_datadict</span><span class="p">(</span><span class="n">data</span><span class="p">,</span><span class="n">files</span><span class="p">,</span><span class="n">name</span><span class="o">+</span><span class="s">&#39;_{0}&#39;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">i</span><span class="p">))</span> <span class="k">for</span> <span class="n">i</span><span class="p">,</span> <span class="n">widget</span> <span class="ow">in</span> <span class="nb">enumerate</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">widgets</span><span class="p">)]</span>
</span><span class='line'>        <span class="k">return</span> <span class="s">u&quot;{0} {1}&quot;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">ulist</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">.</span><span class="n">replace</span><span class="p">(</span><span class="s">u&#39; &#39;</span><span class="p">,</span><span class="s">&#39;&#39;</span><span class="p">),</span><span class="n">ulist</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span><span class="o">.</span><span class="n">replace</span><span class="p">(</span><span class="s">u&#39; &#39;</span><span class="p">,</span><span class="s">&#39;&#39;</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure>


<p>あとはこのWidgetを使いたい要素にwidgetとして指定すればおk</p>

<figure class='code'><figcaption><span>models.py</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='py'><span class='line'><span class="kn">from</span> <span class="nn">django</span> <span class="kn">import</span> <span class="n">forms</span>
</span><span class='line'><span class="o">...</span><span class="err">（上のコードなど）</span><span class="o">...</span>
</span><span class='line'><span class="k">class</span> <span class="nc">HogeForm</span><span class="p">(</span><span class="n">forms</span><span class="o">.</span><span class="n">ModelForm</span><span class="p">):</span>
</span><span class='line'>    <span class="n">name</span> <span class="o">=</span> <span class="n">forms</span><span class="o">.</span><span class="n">CharField</span><span class="p">(</span><span class="n">max_length</span><span class="o">=</span><span class="mi">100</span><span class="p">,</span><span class="n">label</span><span class="o">=</span><span class="s">u&#39;名前&#39;</span><span class="p">,</span><span class="n">widget</span><span class="o">=</span><span class="n">NameWidget</span><span class="p">())</span>
</span></code></pre></td></tr></table></div></figure>


<p>このコードだと姓、名のフォームが2行に表示されている。1行にしたい場合はインライン指定とかそんなのを付けたクラスをattrsで指定して後はcssでやっちゃえばいいんじゃないかなと</p>

<figure class='code'><figcaption><span>models.py</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='py'><span class='line'><span class="n">name</span> <span class="o">=</span> <span class="n">forms</span><span class="o">.</span><span class="n">CharField</span><span class="p">(</span><span class="n">max_length</span><span class="o">=</span><span class="mi">100</span><span class="p">,</span><span class="n">label</span><span class="o">=</span><span class="s">u&#39;名前&#39;</span><span class="p">,</span><span class="n">widget</span><span class="o">=</span><span class="n">NameWidget</span><span class="p">(</span><span class="n">attrs</span><span class="o">=</span><span class="p">{</span><span class="s">&quot;class&quot;</span><span class="p">:</span><span class="s">&quot;inline&quot;</span><span class="p">}))</span>
</span></code></pre></td></tr></table></div></figure>


<p>とかそんな感じ</p>

<p>他にももっと細かくhtmlを記述出来るformat_outputとかあるみたいだけど、試してないので省略。なくても取りあえず出来る。</p>

<p>参考：<a href="https://docs.djangoproject.com/en/1.7/ref/forms/widgets/#django.forms.MultiWidget">Django英語ドキュメント</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[pythonのデコレーターをdjangoで使って見る]]></title>
    <link href="http://blog.shigepon.com/blog/2015/01/06/python-decorator/"/>
    <updated>2015-01-06T08:55:46+09:00</updated>
    <id>http://blog.shigepon.com/blog/2015/01/06/python-decorator</id>
    <content type="html"><![CDATA[<p>pythonのデコレーターを使ってみたらとても便利だなと思ったのでメモ</p>

<p>参考にしたページを読んでいくと理解できた。要はデコレーターとして使う関数は引数に呼び出し元の関数を貰っておいて、内部で作った関数を返せば良い。内部の関数は適当に作れるみたい（今のとこそういう理解をしている）。djangoのビューで呼び出したかったので、内部の関数で可変長引数を取れるようにして下のようにしたら動いた。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='py'><span class='line'><span class="k">def</span> <span class="nf">outer</span><span class="p">(</span><span class="n">func</span><span class="p">):</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">inner</span><span class="p">(</span><span class="o">*</span><span class="n">args</span><span class="p">,</span><span class="o">**</span><span class="n">kwargs</span><span class="p">):</span>
</span><span class='line'>        <span class="k">print</span> <span class="s">&quot;hoge&quot;</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">func</span><span class="p">(</span><span class="o">*</span><span class="n">args</span><span class="p">,</span><span class="o">**</span><span class="n">kwargs</span><span class="p">)</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">inner</span>
</span></code></pre></td></tr></table></div></figure>


<p>この時、args[0]にHttpRequestオブジェクトが入ってるので、これをいじると適当に値を追加したり整形したりするのをビューの外部に持っていけるので、使いようによっては共通部分と個別部分の分離や、ビューに直接関係ない処理（ログとか）を分離出来るので便利な感じがする。ただ、やりすぎるとコードが分割されすぎて読みにくくなる気もする。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='py'><span class='line'><span class="k">def</span> <span class="nf">outer</span><span class="p">(</span><span class="n">func</span><span class="p">):</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">inner</span><span class="p">(</span><span class="o">*</span><span class="n">args</span><span class="p">,</span><span class="o">**</span><span class="n">kwargs</span><span class="p">):</span>
</span><span class='line'>        <span class="n">request</span> <span class="o">=</span> <span class="n">args</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>
</span><span class='line'>        <span class="n">request</span><span class="o">.</span><span class="n">hoge</span> <span class="o">=</span> <span class="s">&quot;fuga&quot;</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">func</span><span class="p">(</span><span class="o">*</span><span class="n">args</span><span class="p">,</span><span class="o">**</span><span class="n">kwargs</span><span class="p">)</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">inner</span>
</span><span class='line'>
</span><span class='line'><span class="nd">@outer</span>
</span><span class='line'><span class="k">def</span> <span class="nf">hoge</span><span class="p">(</span><span class="n">request</span><span class="p">):</span>
</span><span class='line'>    <span class="k">print</span> <span class="n">request</span><span class="o">.</span><span class="n">hoge</span>
</span><span class='line'>    <span class="o">....</span>
</span></code></pre></td></tr></table></div></figure>


<p>とやったりすることが出来る。個人的にはWebサービスでサイドメニューに必要な情報をデコレーターでやって、メインコンテンツに必要な情報をビューでやるとかそんな感じで使ってみようと思う。</p>

<p>参考：<a href="http://qiita.com/_rdtr/items/d3bc1a8d4b7eb375c368">Pythonのデコレータを理解するための12Step &ndash; Qiita</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[use bootstrap3 in django]]></title>
    <link href="http://blog.shigepon.com/blog/2014/12/18/use-bootstrap3-in-django/"/>
    <updated>2014-12-18T08:24:56+09:00</updated>
    <id>http://blog.shigepon.com/blog/2014/12/18/use-bootstrap3-in-django</id>
    <content type="html"><![CDATA[<p>そろそろbootstrap3を使ってみたいなと思い、Djangoでbootstrap3を使う方法を調べてみた。django-bootstrap-toolkitのページを見てみるとdjango-bootstrap3を使ってねと書いてあるので、それを使ってみることにした。</p>

<h2>インストール</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>pip install django-bootstrap3
</span></code></pre></td></tr></table></div></figure>


<h2>設定</h2>

<figure class='code'><figcaption><span>settings.py</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='py'><span class='line'><span class="n">INSTALLED_APPS</span> <span class="o">=</span> <span class="p">(</span>
</span><span class='line'><span class="o">....</span>
</span><span class='line'>    <span class="s">&#39;bootstrap3&#39;</span><span class="p">,</span>
</span><span class='line'><span class="o">....</span>
</span><span class='line'><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<h2>テンプレート</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>
</span><span class='line'>{% load bootstrap3 %}
</span><span class='line'>{% bootstrap_css %}
</span><span class='line'>{% bootstrap_javascript %}
</span><span class='line'>{% bootstrap_messages %}
</span><span class='line'>
</span></code></pre></td></tr></table></div></figure>


<p>これで必要ファイルがロードされる。あとはbootstrap3で使うタグで構成すれば良い。bootstrap_formとかそういうタグもあるけどまだ試していない。</p>

<h2>Bootswatchにあるテーマを試す</h2>

<p>まずはBootswatchのテーマcssをダウンロード</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span><span class="nb">cd</span> /static/css
</span><span class='line'><span class="nv">$ </span>wget http://bootswatch.com/cosmo/bootstrap.min.css
</span></code></pre></td></tr></table></div></figure>


<p>/staticはアプリのフォルダ下に作る</p>

<p>次に設定ファイルに項目を追加</p>

<figure class='code'><figcaption><span>settings.py</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='py'><span class='line'><span class="n">STATIC_URL</span> <span class="o">=</span> <span class="s">&#39;/static/&#39;</span>
</span><span class='line'><span class="n">BOOTSTRAP3</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>    <span class="s">&#39;css_url&#39;</span><span class="p">:</span><span class="s">&#39;/static/css/bootstrap.min.css&#39;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>これだけでテンプレートいじらずに動いてくれる</p>

<p>bootstrap2だとnavbar表示の時に表示が重なるとか何とかあったけど、bootstrap3だと気にしなくて良いのかな？何も追加css書かなくても特に問題無さそう。これは嬉しい。</p>

<p>でも<a href="http://qiita.com/Alex_23drum/items/bbf80aff7dbb6fd1a7d9">Navbarに画像入れると下に偏った配置になる</a>とかあるみたいなので、調べてみる必要があるかも</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[javascriptでカレンダーを書くライブラリを調べてみた]]></title>
    <link href="http://blog.shigepon.com/blog/2014/12/17/check-table-library/"/>
    <updated>2014-12-17T13:37:38+09:00</updated>
    <id>http://blog.shigepon.com/blog/2014/12/17/check-table-library</id>
    <content type="html"><![CDATA[<p>Django使ったサイトでカレンダーを表示しようとしたんだけど、HTMLCalendarとかだとレスポンシブにならないし、カスタマイズ面倒だしということで、javascriptで生成して、イベントデータはajaxリクエストから取り出すようにしたいと思ってライブラリを調べてみたのと感想を書いておく。結論からすると、FullCalendarが汎用的で使えそう。</p>

<h2>Zabuto Calendar</h2>

<p><a href="https://github.com/zabuto/calendar">github</a>
jqueryプラグイン。イベントは数字が表示される。カレンダーの表示は月毎のみ。言語設定に日本語は無い。日本語で日付表示する方法はReadmeに書かれていなかった。</p>

<h2>Calendario</h2>

<p><a href="http://tympanus.net/codrops/2012/11/27/calendario-a-flexible-calendar-plugin/">ダウンロードページ</a></p>

<p>デモは奇麗に見えるんだけど、そもそもメインのcssが何故かdemo.cssみたいなのをインポートしてて、これは無いんじゃないと思ったのと背景画像無しだとイメージに合わなかった。あと、デモサイトがあるだけで、最初に必要なファイルとかが分かりにくかった。</p>

<h2>pickadate</h2>

<p><a href="http://amsul.ca/pickadate.js/">ダウンロードページ</a></p>

<p>カレンダーだけじゃなく、タイムスケジュールの表示もあるライブラリ。でもパッと使ってみただけだとモーダル以外での表示方法が分からなかった。デートピッカーとして使うなら良い？</p>

<h2>FullCalendar</h2>

<p><a href="http://fullcalendar.io/">Home</a></p>

<p>GoogleCalendarっぽいカレンダーが作れて、カスタマイズ出来て、タイムスケジュールも表示出来るライブラリ。bower使うとか書いてあるけど、zip解凍して出て来たファイルを使うことでとりあえずはいけた。jqueryと<a href="http://momentjs.com/">Moment</a>ってライブラリが要る。汎用的だけど、それだけに色々見ないといけないけど、マニュアルあるので分かるようになっている。日本語の言語ファイルは無いが、曜日等のカスタマイズ方法がマニュアルに書いてあるので、日本語化出来る。</p>

<h2>bootstrap-calendar</h2>

<p><a href="https://github.com/Serhioromano/bootstrap-calendar">github</a></p>

<p>試してない。結構汎用的な感じ？言語ファイルに日本語は無い。曜日を日本語化する方法がReadmeに無くて良くわからん。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Titanium Mobileのプロジェクトをアドホック配信する時にテストしてもらうユーザーを追加する]]></title>
    <link href="http://blog.shigepon.com/blog/2014/12/08/add-uuid-to-titanium-mobile-project/"/>
    <updated>2014-12-08T01:42:49+09:00</updated>
    <id>http://blog.shigepon.com/blog/2014/12/08/add-uuid-to-titanium-mobile-project</id>
    <content type="html"><![CDATA[<p>追記：UUIDと書いてたのはUDIDの間違いでした！恥ずかしー。ご指摘いただいた@key3さんありがとうございました！</p>

<p>いやー色々ぐぐっても大変だったし、これからも結構な頻度でやりそうなのでメモ。</p>

<p>もともと作ったプロビジョニングファイルにUDIDを追加するには、</p>

<h2>ぐぐってしっかり情報があった箇所（プロビジョングファイルにUDIDを追加する）</h2>

<ul>
<li><a href="https://developer.apple.com/account/ios/profile/profileList.action">Apple Developer Center</a>で左メニューのDevices->Allをクリック</li>
<li>右上の＋ボタンからデバイスを追加。名前とUDIDを記入してContinueでおk</li>
<li>左メニューのProvisioning Profiles->AllからUDIDを追加したいプロビジョニングファイルを探してクリック->Editをクリック</li>
<li>Devicesの一覧で、追加したDevice名をチェックしてGenerateボタンを押す</li>
</ul>


<h2>ぐぐると古い情報が結構あって混乱した箇所（Xcode使ってローカルのプロビジョニングファイルを最新にする）</h2>

<ul>
<li>Xcodeを起動して、メニューのXcode->Preferencesで開いた画面でAccountsのボタン（右からに番目）をクリック->View Detailsをクリック</li>
<li>左下のリロードボタンを押す</li>
</ul>


<h2>そもそもあまりちゃんと情報が無かった箇所（Titanium Mobileで新しいプロビジョングファイルを使ってipaファイルを作成する）</h2>

<ul>
<li>Titanium Mobileを起動->App Explorerを表示->右上の箱型アイコンをクリック->Distribute &ndash; Ad Hoc/Enterpriseを選択</li>
<li>Distributeの項目でSelect Provisioning Profileの項目で、作成したprofileを選択->残りの必要事項を入力してPublish</li>
<li>DistributeのSpecify locationで指定したフォルダ内にipaファイルが出来ているのでそれを配布すればおk</li>
</ul>


<p>あまり良く分かってないけど、Titanium Mobileで配布する時のプロビジョングファイルと、デバッグ時のRun Configurationで指定するプロビジョングファイルは選択肢として違うものが出てくるので、結構混乱した。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Southをすでにあるプロジェクトに適用する]]></title>
    <link href="http://blog.shigepon.com/blog/2014/11/30/use-south-to-existing-project/"/>
    <updated>2014-11-30T23:19:26+09:00</updated>
    <id>http://blog.shigepon.com/blog/2014/11/30/use-south-to-existing-project</id>
    <content type="html"><![CDATA[<p>Southってのを使うとモデルを変更した時に、サクッとDB(PostgreSQL)に反映出来るらしんだけど、今すでに作成中のプロジェクトに反映させたかったので、メモ</p>

<h2>インストール</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>pip install south
</span></code></pre></td></tr></table></div></figure>


<h2>設定</h2>

<figure class='code'><figcaption><span>settings.py</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='py'><span class='line'><span class="n">INSTALLED_APPS</span> <span class="o">=</span> <span class="p">(</span>
</span><span class='line'><span class="o">....</span>
</span><span class='line'>    <span class="s">&#39;south&#39;</span><span class="p">,</span>
</span><span class='line'><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<h2>作成中のアプリをsouthに追加</h2>

<p>データベースが関連しているモデルが作成されているアプリにコマンドを実行すればおk</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>python manage.py schemamigration アプリ名 --init
</span><span class='line'><span class="nv">$ </span>python manage.py syncdb --all
</span><span class='line'><span class="nv">$ </span>python manage.py migrate アプリ名 --fake
</span></code></pre></td></tr></table></div></figure>


<p>syncdbしないでmigrateすると、PostgreSQLだとエラーが出たので、先にsyncdbするのが必要みたい</p>

<p>実際にモデル変更した時の作業を追記</p>

<h2>モデル変更</h2>

<p>モデルを変更したら次のコマンドでデータベースに反映する</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>python manage.py schemamigration アプリ名 --auto
</span><span class='line'><span class="nv">$ </span>python manage.py migrate アプリ名
</span></code></pre></td></tr></table></div></figure>


<p>この時にデータベース内の値が変更した制約等に引っ掛かる場合は途中で止まったりするので、制約に合うようにデータを変更するとか修正する。</p>

<p>参考：<a href="http://yu-write.blogspot.jp/2014/01/django-south.html">Yura YuWrite: [django] 既存のプロジェクトにsouthを追加する方法</a>、<a href="http://stackoverflow.com/questions/22236029/trouble-getting-django-set-up-on-heroku-using-south-keep-getting-programminger">postgresql &ndash; Trouble getting Django set up on Heroku using South &ndash; keep getting ProgrammingError: relation does not exist &ndash; Stack Overflow</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[djangoで国際化やってみた]]></title>
    <link href="http://blog.shigepon.com/blog/2014/11/27/django-locale/"/>
    <updated>2014-11-27T13:02:12+09:00</updated>
    <id>http://blog.shigepon.com/blog/2014/11/27/django-locale</id>
    <content type="html"><![CDATA[<p>Djangoで他の人が作ったモジュールを使ってると、英語のメッセージが入ってることがあるので、日本語化してみた。とりあえず英語のメッセージを日本語に変換するとこまで。</p>

<h2>準備</h2>

<p>gettextが無かったらインストール。Ubuntuの場合</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>sudo aptitude install gettext
</span></code></pre></td></tr></table></div></figure>


<p>プロジェクトにlocaleフォルダを作る。無いと後のコマンドでエラーが出た</p>

<h2>poファイル作成</h2>

<p>おもむろにpoファイルを作るコマンドを実行</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>django-admin.py makemessages -l ja
</span></code></pre></td></tr></table></div></figure>


<p>するとpath/to/locale/ja/LC_MESSAGES/django.poってファイルが出来るので、それを修正していく。ただ、このコマンドプロジェクト内だけ捜査してファイルを作るみたいで、外部モジュールの場合、上手く読み取ってくれなかった。</p>

<p>今回はvirtualenvでpipしたdjango-allauthのテンプレートを日本語化したかったので、path/to/virtualenv/dir/lib/python2.7/site-packages/allauth/templates/account/内のファイルを全部path/to/project/templates/account/にコピーしてからコマンド実行すると上手く読み取ってくれた。</p>

<h2>翻訳</h2>

<p>出来たpoファイルを編集すればオッケー。ファイル内でmsgid以下に書いてあるのが元の文、その次のmsgstr以下に文章書くと、翻訳文になる。元の英文に何かパラメーター付いてる場合は必ずパラメーターを翻訳文に設定しないとエラーが出る。</p>

<figure class='code'><figcaption><span>例</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='py'><span class='line'><span class="c">#: path/to/python/module.py:23</span>
</span><span class='line'><span class="n">msgid</span> <span class="s">&quot;Welcome to my site.&quot;</span>
</span><span class='line'><span class="n">msgstr</span> <span class="s">&quot;いらっしゃーい&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<h2>moファイル作成</h2>

<p>おもむろにコマンドを実行するとmoファイルが出来る</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>django-admin.py compilemessages
</span></code></pre></td></tr></table></div></figure>


<h2>settings.pyの設定</h2>

<p>これだけで動くと思ったら動かなかったので色々調べてみたらLOCALE_PATHSを設定しないといけなかった。</p>

<figure class='code'><figcaption><span>settings.py</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='py'><span class='line'><span class="n">LOCALE_PATHS</span> <span class="o">=</span> <span class="p">(</span>
</span><span class='line'>    <span class="s">&quot;path/to/locale&quot;</span><span class="p">,</span>
</span><span class='line'><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>これ設定しておいたらちゃんと動いた。</p>

<p>あとは普通にrunserverとかでサーバ起動したら翻訳されてる</p>

<p>参考：<a href="http://docs.djangoproject.jp/en/latest/topics/i18n/translation.html">翻訳 — Django 1.4 documentation</a></p>

<p>翻訳したい文字列をマークする方法とかはリンク見れば分かる。あと、使いたい言語を選択出来るようにするとかそういう場合はLocaleMiddlewareを使うとかなんとかあるみたいだけどやってない。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Kobe.R no 13に参加してきました]]></title>
    <link href="http://blog.shigepon.com/blog/2014/11/25/kobe-dot-r-no-13/"/>
    <updated>2014-11-25T23:33:42+09:00</updated>
    <id>http://blog.shigepon.com/blog/2014/11/25/kobe-dot-r-no-13</id>
    <content type="html"><![CDATA[<p>勉強会の話なので丁寧語で。11/24に<a href="http://kobexr.doorkeeper.jp/events/16989">Kobe.R #13</a>があったので参加してきました。<a href="http://blog.shigepon.info/blog/2014/10/28/kobe-dot-r-no-12/">前回</a>は大阪だったのですが今回は三宮で開かれました。今回はオープンデータ特集ということで、Rのネタもちょびっとある予定だったのですが、話がいっぱいあって結局オープンデータの話のみとなりました。Rネタだけでなく、データを扱う全般を範囲としているKobe.Rならではです。</p>

<p>内容盛りだくさんなので、毎度忘れてる人や内容があって申し訳ないですが、感想です。</p>

<h2>オープンデータとLinked Open Data</h2>

<p>古崎さん</p>

<p>Open Dataは今色々イベントやハッカソン、コンテストなどやってますよという話とオープンデータは誰でも自由に使える形で、さらに自分のデータにURI用意したり、他のデータにリンクしたりするともっとデータとしていいよという話でした。あとLinked Open DataはLODと略すそうです。</p>

<p>リンクというのがあまりイメージ出来なかったけど、次の上田さんの発表で実際に動かしているところを見るとなるほどと思いました。</p>

<p>ちなみに、12月7日の日曜日にOIHってとこ（グランドフロント大阪内）でLODハッカソン関西があるそうです。見てる人が居るかどうか知らないけど興味がある人は是非。</p>

<p>他にもコンテストとして</p>

<ul>
<li><a href="http://lod.sfc.keio.ac.jp">LODチャレンジ2015</a></li>
<li><a href="http://aigid.jp/?p=825">アーバンデータチャレンジ2014</a></li>
</ul>


<p>とか直近でやってるそうです。</p>

<h2>SPARQLについて</h2>

<p>@uedayouさん</p>

<p>Linked Open Dataにすると、SQLっぽい言語で色んな形式で色んな条件でデータが取って来れるよという話でした。何となくイメージはWebが巨大なデータベースになって、そのデータベースにアクセスするような感じがしました。んで、リンクがデータ間のリレーションになってて、リレーショナルデータベースみたいな感じでのアクセスが可能になるんじゃないかとイメージ出来ました。SPARQL知らなかったけど、凄いですね。</p>

<p>Google様にアクセスしたりするのとは訳が違うので、実際にこういうのを利用したサービスとかアプリとか作る場合はアクセス頻度を気にする必要がありそうですが、それは普通のデータベースでもそうですし、普通のことかなと思いました。</p>

<p>それよりも</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="k">PREFIX</span> <span class="n">rdfs</span><span class="p">:</span> <span class="o">&lt;</span><span class="n">http</span><span class="p">:</span><span class="o">//</span><span class="n">www</span><span class="p">.</span><span class="n">w3</span><span class="p">.</span><span class="n">org</span><span class="o">/</span><span class="mi">2000</span><span class="o">/</span><span class="mi">01</span><span class="o">/</span><span class="n">rdf</span><span class="o">-</span><span class="k">schema</span><span class="o">#&gt;</span>
</span><span class='line'><span class="k">PREFIX</span> <span class="n">dbpedia</span><span class="o">-</span><span class="n">ja</span><span class="p">:</span> <span class="o">&lt;</span><span class="n">http</span><span class="p">:</span><span class="o">//</span><span class="n">ja</span><span class="p">.</span><span class="n">dbpedia</span><span class="p">.</span><span class="n">org</span><span class="o">/</span><span class="n">resource</span><span class="o">/&gt;</span>
</span><span class='line'><span class="k">PREFIX</span> <span class="n">prop</span><span class="o">-</span><span class="n">ja</span><span class="p">:</span> <span class="o">&lt;</span><span class="n">http</span><span class="p">:</span><span class="o">//</span><span class="n">ja</span><span class="p">.</span><span class="n">dbpedia</span><span class="p">.</span><span class="n">org</span><span class="o">/</span><span class="n">property</span><span class="o">/&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="k">SELECT</span> <span class="k">DISTINCT</span> <span class="o">?</span><span class="n">pref</span> <span class="o">?</span><span class="n">label</span> <span class="k">WHERE</span>
</span><span class='line'><span class="err">{</span>
</span><span class='line'>    <span class="n">dbpedia</span><span class="o">-</span><span class="n">ja</span><span class="p">:</span><span class="err">東京都</span>  <span class="n">prop</span><span class="o">-</span><span class="n">ja</span><span class="p">:</span><span class="err">隣接都道府県</span>  <span class="o">?</span><span class="n">pref</span> <span class="p">.</span>
</span><span class='line'>    <span class="o">?</span><span class="n">pref</span>  <span class="n">rdfs</span><span class="p">:</span><span class="n">label</span>  <span class="o">?</span><span class="n">label</span> <span class="p">.</span>
</span><span class='line'><span class="err">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>こんな感じのクエリを実行すれば、2つの異なるデータソース（エンドポイントと呼ぶらしい）で関連付けされているデータを取って来たり出来るとかすげーなと思いました。実際に例えばUbuntuで使うならどうするかとかは時間が無かったので、自分で調べて使ってみようと思いますです。</p>

<h2>LOD Challengeについて</h2>

<p>和田さん</p>

<p>LOD Challengeというイベントについてのお話でした。ちょっと聞き疲れしてた時間帯だったので、頭を素通りしてしまいました＞＜すいませんです。</p>

<h2>時系列データ分析・予測の方法（コンペ結果報告）</h2>

<p>河原さん</p>

<p>売り上げ予測のコンペ結果の報告をして頂きました。関連度と忘却度のマトリックスを作るという手法は面白そうでした。初心者なので実際にやってみるまでは道のりが長そうですが・・・・</p>

<h2>OpenDataLabの活動紹介</h2>

<p>毎度のことですが、最後らへんはどうしても名前を忘れてしまったりしてます。すいません＞＜。</p>

<p>神戸でOpenDataLabというのをやっているという紹介でした。上手くやっておられるなぁという感じです。デジタルだけじゃないことも出来ることが強みだとおっしゃられていたような気がします。</p>

<p>最後に、今回でずっと運営の中心をされていた@floretsさんが東京へ行かれるということで、送別会みたいな感じで懇親会へ行ってきました。@floretsさんは勉強会の雰囲気をとても良く作ってくれる方で、Kobe.Rで今後お見かけ出来なくなるのは残念ですが、東京でのご活躍をお祈りしております。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[django-allauthを使ってみた]]></title>
    <link href="http://blog.shigepon.com/blog/2014/11/25/use-django-allauth/"/>
    <updated>2014-11-25T14:55:16+09:00</updated>
    <id>http://blog.shigepon.com/blog/2014/11/25/use-django-allauth</id>
    <content type="html"><![CDATA[<p>ソーシャルログインだけでなく、通常のログインもやりたかったので、django-allauthを試してみた。</p>

<h2>インストール</h2>

<p>pipで</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>pip install django-allauth
</span></code></pre></td></tr></table></div></figure>


<h2>ファイルでの設定</h2>

<p>settings.pyとurls.pyを設定</p>

<figure class='code'><figcaption><span>settings.py</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='py'><span class='line'><span class="n">INSTALLED_APPS</span> <span class="o">=</span> <span class="p">(</span>
</span><span class='line'><span class="o">...</span>
</span><span class='line'>    <span class="s">&#39;allauth&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="s">&#39;allauth.account&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="s">&#39;allauth.socialaccount&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="s">&#39;allauth.socialaccount.providers.twitter&#39;</span><span class="p">,</span> <span class="c">#例としてTwitter</span>
</span><span class='line'><span class="p">)</span>
</span><span class='line'><span class="n">AUTHENTICATION_BACKENDS</span> <span class="o">=</span> <span class="p">(</span>
</span><span class='line'><span class="o">...</span>
</span><span class='line'>    <span class="s">&#39;allauth.account.auth_backends.AuthenticationBackend&#39;</span><span class="p">,</span>
</span><span class='line'><span class="p">)</span>
</span><span class='line'><span class="n">TEMPLATE_CONTEXT_PROCESSORS</span> <span class="o">=</span> <span class="p">(</span>
</span><span class='line'><span class="o">...</span>
</span><span class='line'>    <span class="s">&quot;django.core.context_processors.request&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="s">&quot;django.contrib.auth.context_processors.auth&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="s">&quot;allauth.account.context_processors.account&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="s">&quot;allauth.socialaccount.context_processors.socialaccount&quot;</span><span class="p">,</span>
</span><span class='line'><span class="p">)</span>
</span><span class='line'><span class="n">SITE_ID</span> <span class="o">=</span> <span class="mi">1</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>urls.py</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='py'><span class='line'><span class="n">urlpatterns</span> <span class="o">=</span> <span class="n">patterns</span><span class="p">(</span><span class="s">&#39;&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="o">...</span>
</span><span class='line'>    <span class="n">url</span><span class="p">(</span><span class="s">&#39;^accounts/&#39;</span><span class="p">,</span> <span class="n">include</span><span class="p">(</span><span class="s">&#39;allauth.urls&#39;</span><span class="p">)),</span>
</span><span class='line'>    <span class="n">url</span><span class="p">(</span><span class="s">&#39;^accounts/profile/?&#39;</span><span class="p">,</span> <span class="n">include</span><span class="p">(</span><span class="s">&#39;profile.urls&#39;</span><span class="p">,</span><span class="n">namespace</span><span class="o">=</span><span class="s">&#39;profile&#39;</span><span class="p">)),</span> <span class="c">#ログイン後のリダイレクト先</span>
</span><span class='line'><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<h2>adminページでの設定</h2>

<p>ソーシャルログインする場合のみ必要。 <a href="http://domain/admin/">http://domain/admin/</a> にアクセスして管理者ログインしてSocial applicationを追加する。
フォーム内では名前を適当に付けて、Twitterの場合Client idにConsumer keyを登録して、Secret keyにConsumer secretを登録すればおk
最後に、利用可能サイトから一番上のサイト(SITE_ID=1と指定してるので)を選択するとおk</p>

<p><a href="http://domain/accounts">http://domain/accounts</a> にアクセスすればログインフォームが出てくる。出来た。</p>

<h2>テンプレートを上書きする</h2>

<p>プロジェクトディレクトリ/templates/account以下にファイルを設定すればおk
例えばログインのテンプレートなら、login.htmlを設置すればおk</p>

<p>元のファイルはgithubを見れば分かる</p>

<h2>使える機能</h2>

<p><a href="https://github.com/pennersr/django-allauth/blob/master/allauth/account/urls.py">githubのコード</a>
見れば大体分かる感じ</p>

<h2>ユーザー登録時のメール確認後の処理でハマる</h2>

<p>ユーザー登録すると通常は登録したメールアドレスにメールが届いて、そこに書いてあるURLにアクセスすると登録完了する手順が表示される。そこらへんの文章とかも上のテンプレート上書きでいけて問題ないんだけど、初期状態では登録が最後まで完了すると、そのままログインしてログイン時のリダイレクト先に移動してしまう。完了画面を表示したい場合はこれではまずい。</p>

<p>ので、<a href="http://django-allauth.readthedocs.org/en/latest/advanced.html">ここらへん</a>のCustom Redirectsの項目を参考にしてアダプタを作ってみた</p>

<figure class='code'><figcaption><span>settings.py</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='py'><span class='line'><span class="n">ACCOUNT_ADAPTER</span> <span class="o">=</span> <span class="s">&#39;project.users.adapter.MyAccountAdapter&#39;</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>project/users/adapter.py</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='py'><span class='line'><span class="kn">from</span> <span class="nn">django.conf</span> <span class="kn">import</span> <span class="n">settings</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">allauth.account.adapter</span> <span class="kn">import</span> <span class="n">DefaultAccountAdapter</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">MyAccountAdapter</span><span class="p">(</span><span class="n">DefaultAccountAdapter</span><span class="p">):</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">get_email_confirmation_redirect_url</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span><span class="n">request</span><span class="p">):</span>
</span><span class='line'>        <span class="n">path</span> <span class="o">=</span> <span class="s">&quot;/account/complete&quot;</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">path</span>
</span></code></pre></td></tr></table></div></figure>


<p>でもこれだけでは上手くいかなかった。普通にログイン時のリダイレクト先に移動してしまった。どうもACCOUNT_LOGIN_ON_EMAIL_CONFIRMATIONをFalseにしないとダメみたい</p>

<figure class='code'><figcaption><span>settings.py</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='py'><span class='line'><span class="n">ACCOUNT_LOGIN_ON_EMAIL_CONFIRMATION</span> <span class="o">=</span> <span class="bp">False</span>
</span></code></pre></td></tr></table></div></figure>


<p>これでやっと/account/completeにリダイレクトしてくれた。ログインした状態ではダメみたいなので、ログインは再度やってもらわないといけない。うーん今のとこ仕方ないか・・・。</p>

<h2>django-allauthのサインアップフォームをカスタマイズしたい</h2>

<h3>あるフィールドにhelp_textを付ける</h3>

<p>参考：<a href="http://stackoverflow.com/questions/23580771/overwrite-django-allauth-form-field">Overwrite django-allauth form field &ndash; Stack Overflow</a></p>

<p>__init__を上書きして、フィールドに属性を追加する
コードはこんな感じ。例としてユーザー名入力フォームにヘルプテキストとして「required」という文字を追加する</p>

<figure class='code'><figcaption><span>appname/forms.py</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='py'><span class='line'><span class="kn">from</span> <span class="nn">django</span> <span class="kn">import</span> <span class="n">forms</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">SignupForm</span><span class="p">(</span><span class="n">forms</span><span class="o">.</span><span class="n">Form</span><span class="p">):</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="o">*</span><span class="n">args</span><span class="p">,</span> <span class="o">**</span><span class="n">kwargs</span><span class="p">):</span>
</span><span class='line'>    <span class="nb">super</span><span class="p">(</span><span class="n">SignupForm</span><span class="p">,</span> <span class="bp">self</span><span class="p">)</span><span class="o">.</span><span class="n">__init__</span><span class="p">(</span><span class="o">*</span><span class="n">args</span><span class="p">,</span> <span class="o">**</span><span class="n">kwargs</span><span class="p">)</span>
</span><span class='line'>    <span class="bp">self</span><span class="o">.</span><span class="n">fields</span><span class="p">[</span><span class="s">&#39;username&#39;</span><span class="p">]</span><span class="o">.</span><span class="n">help_text</span> <span class="o">=</span> <span class="s">&quot;required&quot;</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>settings.py</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='py'><span class='line'><span class="n">ACCOUNT_SIGNUP_FORM_CLASS</span> <span class="o">=</span> <span class="s">&quot;appname.forms.SignupForm&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>こんな感じ</p>

<h3>フィールドのバリデーションを追加</h3>

<p>参考：<a href="http://stackoverflow.com/questions/24175228/how-to-clean-username-with-django-allauth-adapter">python &ndash; How to clean username with Django allauth adapter? &ndash; Stack Overflow</a></p>

<p>Account Adapterを設定してあげて、そこでclean_xxxを作ると上手くいくみたい</p>

<figure class='code'><figcaption><span>settings.py</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='py'><span class='line'><span class="sb">``</span><span class="err">`</span><span class="n">py</span> <span class="n">project</span><span class="o">/</span><span class="n">users</span><span class="o">/</span><span class="n">adapter</span><span class="o">.</span><span class="n">py</span>
</span><span class='line'><span class="k">class</span> <span class="nc">MyAccountAdapter</span><span class="p">(</span><span class="n">DefaultAccountAdapter</span><span class="p">):</span>
</span><span class='line'>    <span class="o">...</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">clean_username</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">username</span><span class="p">):</span>
</span><span class='line'>        <span class="s">&quot; 適当に処理を入れる</span>
</span><span class='line'>        <span class="s">&quot; エラーの場合はraise Exception</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">username</span>
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Django Memo]]></title>
    <link href="http://blog.shigepon.com/blog/2014/11/23/django-memo/"/>
    <updated>2014-11-23T22:35:38+09:00</updated>
    <id>http://blog.shigepon.com/blog/2014/11/23/django-memo</id>
    <content type="html"><![CDATA[<p>Djangoやってて忘れっぽいところとかをメモ</p>

<h2>リクエストパラメーターをモデルに入れる</h2>

<figure class='code'><figcaption><span>views.py</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='py'><span class='line'><span class="k">def</span> <span class="nf">a_view</span><span class="p">(</span><span class="n">request</span><span class="p">):</span>
</span><span class='line'>    <span class="n">hoge</span> <span class="o">=</span> <span class="n">Fuga</span><span class="p">(</span><span class="n">request</span><span class="o">.</span><span class="n">GET</span><span class="p">)</span> <span class="c">#新たにインスタンス作る場合</span>
</span><span class='line'>    <span class="n">fuga</span> <span class="o">=</span> <span class="n">Fuga</span><span class="o">.</span><span class="n">objects</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="n">pk</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'>    <span class="n">hage</span> <span class="o">=</span> <span class="n">Fuga</span><span class="p">(</span><span class="n">request</span><span class="o">.</span><span class="n">GET</span><span class="p">,</span><span class="n">instance</span><span class="o">=</span><span class="n">fuga</span><span class="p">)</span> <span class="c">#既にあるインスタンスに入れる場合</span>
</span></code></pre></td></tr></table></div></figure>


<p>instance=xxxとやるのを何度か忘れた＞＜</p>

<h2>forms.DateFieldでISO-8601フォーマットの入力を受入れる</h2>

<p>html5でdatetime-localとか扱おうとすると、入力値がISO-8601形式になって、そのままだとDateFieldが入力をdatetimeの正しい形式として認識してくれない。</p>

<p>で、input_formatsを設定するといけるらしいんだけど、あまりマニュアルでちゃんと説明してない。Stack Overflowの情報とかをググると設定方法が間違ってるコードとかあって、正しいのが良く分からない。で、結局色々調べたら</p>

<figure class='code'><figcaption><span>models.py</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='py'><span class='line'><span class="n">date</span> <span class="o">=</span> <span class="n">forms</span><span class="o">.</span><span class="n">DateField</span><span class="p">(</span><span class="n">input_formats</span><span class="o">=</span><span class="p">(</span><span class="s">&#39;%Y-%m-</span><span class="si">%d</span><span class="s">T%H:%M:%S&#39;</span><span class="p">,))</span>
</span></code></pre></td></tr></table></div></figure>


<p>とタプルで渡す必要があるらしい</p>

<p>参考：<a href="http://labs.uechoco.com/blog/2011/08/django-dateform-inputs_format-wrong.html">うえちょこ＠ぼろぐ» [Django]forms.DateFieldのinputs_formatではまった</a></p>

<h2>ModelForm使ってフォーム出力する時にrequeied属性をテンプレートで参照するとか</h2>

<figure class='code'><figcaption><span>models.py</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='py'><span class='line'><span class="n">hoge</span> <span class="o">=</span> <span class="n">forms</span><span class="o">.</span><span class="n">CharField</span><span class="p">(</span><span class="n">max_length</span><span class="o">=</span><span class="mi">100</span><span class="p">,</span><span class="n">widget</span><span class="o">=</span><span class="n">TextInput</span><span class="p">(</span><span class="n">attrs</span><span class="o">=</span><span class="p">{</span><span class="s">&quot;required&quot;</span><span class="p">:</span><span class="s">&quot;true&quot;</span><span class="p">}))</span><span class="err">↲</span>
</span></code></pre></td></tr></table></div></figure>


<p>こんな感じで定義したフィールドの属性取ってきたい場合、</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>\{\% for field in form \%\}
</span><span class='line'>  \{\% if field.field.required \%\}<span class="nt">&lt;p&gt;</span>必須<span class="nt">&lt;/p&gt;</span>\{\% endif \%\}
</span><span class='line'>\{\% endfor \%\}
</span></code></pre></td></tr></table></div></figure>


<p>適当だけど、こんな感じでアクセスできる。</p>

<h2>DjangoでGroup By</h2>

<p>DjangoでGroup Byして何個かのフィールドのデータで例えば、日付とその日に登録したデータの件数だけ欲しい時</p>

<figure class='code'><figcaption><span>views.py</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='py'><span class='line'><span class="n">q</span> <span class="o">=</span> <span class="n">Hoge</span><span class="o">.</span><span class="n">objects</span><span class="o">.</span><span class="n">filter</span><span class="p">(</span><span class="n">date__gte</span> <span class="o">=</span> <span class="n">date</span><span class="p">)</span><span class="o">.</span><span class="n">filter</span><span class="p">(</span><span class="n">date__lt</span> <span class="o">=</span> <span class="n">dto</span><span class="p">)</span><span class="o">.</span><span class="n">extra</span><span class="p">({</span><span class="s">&#39;date&#39;</span><span class="p">:</span><span class="s">&quot;date_trunc(&#39;day&#39;,date)&quot;</span><span class="p">})</span>
</span><span class='line'><span class="n">q</span><span class="o">.</span><span class="n">query</span><span class="o">.</span><span class="n">group_by</span> <span class="o">=</span> <span class="p">[</span><span class="s">&#39;date&#39;</span><span class="p">]</span>
</span><span class='line'><span class="n">values</span> <span class="o">=</span> <span class="n">q</span><span class="o">.</span><span class="n">values</span><span class="p">(</span><span class="s">&#39;date&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">order_by</span><span class="p">()</span><span class="o">.</span><span class="n">annotate</span><span class="p">(</span><span class="n">c</span> <span class="o">=</span> <span class="n">Count</span><span class="p">(</span><span class="s">&#39;id&#39;</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="err">こんな感じでいける。ちなみに</span><span class="n">PostgreSQL</span><span class="err">。</span><span class="n">date</span><span class="err">が時間の情報も持っているので</span><span class="n">PostgreSQL</span><span class="err">の</span><span class="n">date_trunc</span><span class="err">関数を使って</span><span class="n">date</span><span class="err">を日付の情報だけにしてから、</span><span class="n">group_by</span><span class="err">する。</span>
</span><span class='line'><span class="n">annotate</span><span class="err">は集計した値を新しいフィールド（ここだと</span><span class="n">c</span><span class="err">）に入れる。</span>
</span><span class='line'><span class="err">例えば</span><span class="n">values</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">.</span><span class="n">c</span><span class="err">でアクセスできる。このコードで、日付とその日に登録したデータ件数が入った辞書のリストを得ることが出来る</span>
</span></code></pre></td></tr></table></div></figure>


<h2>QuerySetで吐いたクエリを出力</h2>

<figure class='code'><figcaption><span>views.py</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='py'><span class='line'><span class="n">h</span> <span class="o">=</span> <span class="n">Hoge</span><span class="o">.</span><span class="n">objects</span><span class="o">.</span><span class="n">all</span><span class="p">()</span>
</span><span class='line'><span class="k">print</span> <span class="n">h</span><span class="o">.</span><span class="n">query</span>
</span></code></pre></td></tr></table></div></figure>


<p>でおk。でもクエリが例外出す時には出せないような・・・</p>

<p>参考：<a href="http://programmer-jobs.blogspot.jp/2013/01/djangosql.html">Djangoで、デバック用のSQLクエリの表示 一言多いプログラマーの独り言</a></p>

<h2>ModelFormでcleanを使ってデータの検証する時に、updateしようとしてるかcreateしようとしてるか判断する</h2>

<p>createの時だけチェックしたかったので、色々調べてみたらclean(self)内で、self.instanceでチェックすると良いみたい。例えばプライマリーキーでidがある場合こんな感じ</p>

<figure class='code'><figcaption><span>models.py</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='py'><span class='line'><span class="k">class</span> <span class="nc">Hoge</span><span class="p">(</span><span class="n">forms</span><span class="o">.</span><span class="n">ModelForm</span><span class="p">):</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">clean</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class='line'>        <span class="n">cleaned_data</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">cleaned_data</span>
</span><span class='line'>        <span class="k">if</span> <span class="bp">self</span><span class="o">.</span><span class="n">instance</span><span class="o">.</span><span class="n">id</span> <span class="ow">is</span> <span class="bp">None</span><span class="p">:</span>
</span><span class='line'>            <span class="c">#create用の処理</span>
</span><span class='line'>            <span class="k">raise</span> <span class="n">ValidationError</span><span class="p">(</span><span class="s">&#39;例外出すのはこんな感じ&#39;</span><span class="p">)</span>
</span><span class='line'>        <span class="k">else</span><span class="p">:</span>
</span><span class='line'>            <span class="c">#update用の処理</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">cleaned_data</span>
</span></code></pre></td></tr></table></div></figure>


<p>instanceの型チェックする方が正攻法かも。例外のメッセージは</p>

<figure class='code'><figcaption><span>views.py</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='py'><span class='line'><span class="k">def</span> <span class="nf">test</span><span class="p">(</span><span class="n">request</span><span class="p">):</span>
</span><span class='line'>    <span class="n">form</span> <span class="o">=</span> <span class="n">Hoge</span><span class="p">(</span><span class="n">request</span><span class="o">.</span><span class="n">POST</span><span class="p">)</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">form</span><span class="o">.</span><span class="n">is_valid</span><span class="p">():</span>
</span><span class='line'>        <span class="c">#例外が無かった場合</span>
</span><span class='line'>    <span class="k">else</span><span class="p">:</span>
</span><span class='line'>        <span class="k">for</span> <span class="n">k</span><span class="p">,</span><span class="n">v</span> <span class="ow">in</span> <span class="n">form</span><span class="o">.</span><span class="n">errors</span><span class="o">.</span><span class="n">item</span><span class="p">():</span>
</span><span class='line'>            <span class="c">#kが例外のフィールド。cleanの場合は__all__</span>
</span><span class='line'>            <span class="c">#vが例外のメッセージ</span>
</span></code></pre></td></tr></table></div></figure>


<p>みたいな感じで取り出せる。</p>

<h2>runserver実行時にコンソールにスタックとレースを出力する</h2>

<figure class='code'><figcaption><span>settings.py</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='py'><span class='line'><span class="n">LOGGING</span><span class="o">=</span><span class="p">{</span>
</span><span class='line'>    <span class="s">&#39;version&#39;</span><span class="p">:</span><span class="mi">1</span><span class="p">,</span>
</span><span class='line'>    <span class="s">&#39;handlers&#39;</span><span class="p">:{</span>
</span><span class='line'>        <span class="s">&#39;console&#39;</span><span class="p">:{</span>
</span><span class='line'>            <span class="s">&#39;level&#39;</span><span class="p">:</span><span class="s">&#39;DEBUG&#39;</span><span class="p">,</span>
</span><span class='line'>            <span class="s">&#39;class&#39;</span><span class="p">:</span><span class="s">&#39;logging.StreamHandler&#39;</span><span class="p">,</span>
</span><span class='line'>        <span class="p">},</span>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'>    <span class="s">&#39;loggers&#39;</span><span class="p">:{</span>
</span><span class='line'>        <span class="s">&#39;django.request&#39;</span><span class="p">:{</span>
</span><span class='line'>            <span class="s">&#39;handlers&#39;</span><span class="p">:[</span><span class="s">&#39;console&#39;</span><span class="p">],</span>
</span><span class='line'>            <span class="s">&#39;propagate&#39;</span><span class="p">:</span><span class="bp">True</span><span class="p">,</span>
</span><span class='line'>            <span class="s">&#39;level&#39;</span><span class="p">:</span><span class="s">&#39;DEBUG&#39;</span><span class="p">,</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>これを書いておけばコンソールにスタックトレースを出力してくれる。apiのコード書いてる時とかajaxで呼び出してる場合とかに便利。</p>

<p>参考：<a href="http://stackoverflow.com/questions/5886275/print-a-stack-trace-to-stdout-on-errors-in-django-while-using-manage-py-runserve">python &ndash; Print a stack trace to stdout on errors in Django while using manage.py runserver &ndash; Stack Overflow</a>というかここのコード丸コピー</p>

<h2>Gmail送信</h2>

<figure class='code'><figcaption><span>settings.py</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='py'><span class='line'><span class="n">EMAIL_USE_TLS</span><span class="o">=</span><span class="bp">True</span>
</span><span class='line'><span class="n">EMAIL_HOST</span><span class="o">=</span><span class="s">&#39;smpt.gmail.com&#39;</span>
</span><span class='line'><span class="n">EMAIL_HOST_USER</span><span class="o">=</span><span class="s">&#39;mymail@gmail.com&#39;</span>
</span><span class='line'><span class="n">EMAIL_HOST_PASSWORD</span><span class="o">=</span><span class="s">&#39;mypassword&#39;</span>
</span><span class='line'><span class="n">EMAIL_PORT</span><span class="o">=</span><span class="mi">587</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>views.py</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='py'><span class='line'><span class="kn">from</span> <span class="nn">django.core.mail</span> <span class="kn">import</span> <span class="n">send_mail</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">mail</span><span class="p">(</span><span class="n">request</span><span class="p">):</span>
</span><span class='line'>    <span class="n">send_mail</span><span class="p">(</span><span class="s">&#39;Subject&#39;</span><span class="p">,</span><span class="s">&#39;message&#39;</span><span class="p">,</span><span class="s">&#39;mymail.gmail.com&#39;</span><span class="p">,[</span><span class="s">&#39;to@mail.address&#39;</span><span class="p">],</span><span class="n">fail_silently</span><span class="o">=</span><span class="bp">False</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>こんだけ</p>

<p>参考：<a href="http://d.hatena.ne.jp/yuheiomori0718/20120714/1342266647">DjangoでGmailを使ってメール送信 &ndash; brainstorm</a>、</p>

<h2>MultiValueDictKeyError</h2>

<p>モデルをgetする時にキーに何も値が指定されてなかったりすると起こる。例えば</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='py'><span class='line'><span class="n">instance</span> <span class="o">=</span> <span class="n">SampleModel</span><span class="o">.</span><span class="n">objects</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="nb">id</span><span class="o">=</span><span class="n">key</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>でkeyに何も設定されてないと起こるみたい。出た時に何回かイチイチぐぐったのでメモ</p>

<h2>PostgreSQLでDateTimeFieldの値を日付に対してグルーピングしたい</h2>

<p>PostgreSQLではタイムゾーン入りのタイムスタンプで登録されるので、</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='py'><span class='line'><span class="n">q</span> <span class="o">=</span> <span class="n">Hoge</span><span class="o">.</span><span class="n">objects</span><span class="o">.</span><span class="n">extra</span><span class="p">({</span><span class="s">&quot;date&quot;</span><span class="p">:</span><span class="s">&quot;date_trunc(&#39;day&#39;,date)&quot;</span><span class="p">})</span>
</span><span class='line'><span class="n">q</span><span class="o">.</span><span class="n">query</span><span class="o">.</span><span class="n">group_by</span><span class="p">[</span><span class="s">&#39;date&#39;</span><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>みたいな構文で日付だけ取り出して、グルーピングしようとすると、PostgreSQLの設定でタイムゾーンがUTCになっていた場合に、2014/12/17 00:00:00+9のデータは2014/12/16 15:00:00+0と認識されるので12/16のデータとしてグルーピングされてしまう。日本のタイムゾーンでやってると、これはまずいので、以下のようなコードにすると良い</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='py'><span class='line'><span class="n">q</span> <span class="o">=</span> <span class="n">Hoge</span><span class="o">.</span><span class="n">objects</span><span class="o">.</span><span class="n">extra</span><span class="p">({</span><span class="s">&quot;date&quot;</span><span class="p">:</span><span class="s">&quot;date_trunc(&#39;day&#39;,date AT TIME ZONE &#39;JST&#39;)&quot;</span><span class="p">})</span>
</span><span class='line'><span class="n">q</span><span class="o">.</span><span class="n">query</span><span class="o">.</span><span class="n">group_by</span><span class="p">[</span><span class="s">&#39;date&#39;</span><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>


<h2>django+uwsgi+nginxで502エラーが出た原因の１つ</h2>

<p>djangoはあまり関係無いけどuwsgiの設定の問題だったので、こちらに。django+uwsgi+nginxで502エラーが出て、runserverでは普通に動いたので、しばらくググって解答が得られたのでメモ</p>

<p><a href="http://datatables.net/">DataTables</a>を使って動的にテーブルデータをロードしようとしたら、runserverでは上手く行くのにuwsgiだと502エラーが出てロード出来なかった。最初にnginxのログを見てみると、uwsgiのとこでエラーと書いてあったので、uwsgiのログをチェックした。すると</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='py'><span class='line'><span class="n">invalid</span> <span class="n">request</span> <span class="n">block</span> <span class="n">size</span><span class="p">:</span> <span class="n">xxxxx</span> <span class="p">(</span><span class="nb">max</span> <span class="mi">4096</span><span class="p">)</span><span class="o">...</span>
</span></code></pre></td></tr></table></div></figure>


<p>みたいなエラーが出ていた。リクエストが大きすぎるのかなと思い、リクエストの一部を削ってみたらエラーが出なかった。んで、対策をググってみたら書いてあったので、そのまま下のコードを実装してみた。</p>

<figure class='code'><figcaption><span>uwsgi.ini</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ini'><span class='line'><span class="na">buffer-size</span><span class="o">=</span><span class="s">65535</span>
</span></code></pre></td></tr></table></div></figure>


<p>みたいにバッファーサイズを大きく(例では64k)した。これでエラーが消えたのでめでたしめでたし。</p>

<p>参考：<a href="http://stackoverflow.com/questions/22697584/nginx-uwsgi-104-connection-reset-by-peer-while-reading-response-header-from-u">django &ndash; Nginx uwsgi (104: Connection reset by peer) while reading response header from upstream &ndash; Stack Overflow</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Titanium Mobileメモ]]></title>
    <link href="http://blog.shigepon.com/blog/2014/11/23/titanium-mobile-memo/"/>
    <updated>2014-11-23T09:48:44+09:00</updated>
    <id>http://blog.shigepon.com/blog/2014/11/23/titanium-mobile-memo</id>
    <content type="html"><![CDATA[<p>Titanium Mobileに関するメモ</p>

<h2>アプリ固有の設定を登録する</h2>

<p>アプリを終了して、再起動させた時も保存される設定をしたい時はTitanium.App.Propertiesを使う</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">Ti</span><span class="p">.</span><span class="nx">App</span><span class="p">.</span><span class="nx">Properties</span><span class="p">.</span><span class="nx">setString</span><span class="p">(</span><span class="s2">&quot;hoge&quot;</span><span class="p">,</span><span class="s2">&quot;fuga&quot;</span><span class="p">);</span><span class="c1">//設定</span>
</span><span class='line'><span class="nx">hoge</span> <span class="o">=</span> <span class="nx">Ti</span><span class="p">.</span><span class="nx">App</span><span class="p">.</span><span class="nx">Properties</span><span class="p">.</span><span class="nx">getString</span><span class="p">(</span><span class="s2">&quot;hoge&quot;</span><span class="p">);</span><span class="c1">//取得</span>
</span></code></pre></td></tr></table></div></figure>


<p>stringを例にしてるが、ListとかObjectとかBoolとか色々入れられる。</p>

<h2>Titanium MobileのUIで本家以外に参考にしてるサイト</h2>

<p><a href="https://code.google.com/p/titanium-mobile-doc-ja/w/list">Wiki Pages &ndash; titanium-mobile-doc-ja &ndash; Appcelerator Titanium Mobileに関するドキュメントを日本語でまとめていくプロジェクト &ndash; Google Project Hosting</a></p>

<h2>Android実機で文字が小さくなる</h2>

<figure class='code'><figcaption><span>tiapp.xml</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;android</span> <span class="na">xmlns:android=</span><span class="s">&quot;http://schemas.android.com/apk/res/android&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;manifest&gt;</span>
</span><span class='line'>         <span class="nt">&lt;supports-screens</span> <span class="na">android:anyDensity=</span><span class="s">&quot;false&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/manifest&gt;</span>
</span><span class='line'><span class="nt">&lt;/android&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>もしくは文字サイズをdpで指定</p>

<p>参考：<a href="http://www.fujimotohajime.net/pukiwiki/index.php?TitaniumMobile%2FAndroid%E3%81%A7%E5%AE%9F%E6%A9%9F%E3%83%86%E3%82%B9%E3%83%88%E3%81%99%E3%82%8B%E3%81%A8%E6%96%87%E5%AD%97%E3%81%8C%E5%B0%8F%E3%81%95%E3%81%84">TitaniumMobile/Androidで実機テストすると文字が小さい &ndash; Wiki</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[DjangoでDateTimeField received a naive datetimeってWarningが出た]]></title>
    <link href="http://blog.shigepon.com/blog/2014/11/22/django-datetimefield-received-a-naive-datetime/"/>
    <updated>2014-11-22T16:19:11+09:00</updated>
    <id>http://blog.shigepon.com/blog/2014/11/22/django-datetimefield-received-a-naive-datetime</id>
    <content type="html"><![CDATA[<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>RuntimeWarning: DateTimeField received a naive datetime
</span></code></pre></td></tr></table></div></figure>


<p>ってWarningが出るのに対する対処</p>

<figure class='code'><figcaption><span>settings.py</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='py'><span class='line'><span class="n">USE_TZ</span> <span class="o">=</span> <span class="bp">False</span>
</span></code></pre></td></tr></table></div></figure>


<p>を書けばおk。要はタイムゾーン入れてくれってエラーなので、そんなものはない！と指定すればいいっぽい</p>

<p>参考：<a href="http://stackoverflow.com/questions/18622007/runtimewarning-datetimefield-received-a-naive-datetime">django &ndash; RuntimeWarning: DateTimeField received a naive datetime &ndash; Stack Overflow</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Titanium MobileとDjangoでAjax認証を行う]]></title>
    <link href="http://blog.shigepon.com/blog/2014/11/20/titanium-ajax-post-to-django/"/>
    <updated>2014-11-20T09:42:26+09:00</updated>
    <id>http://blog.shigepon.com/blog/2014/11/20/titanium-ajax-post-to-django</id>
    <content type="html"><![CDATA[<p>最近Titanium Mobile使ってスマホアプリを作ろうかなと思って色々試してるんだけど、ログイン認証する時にはまったので、メモ</p>

<p>参考<a href="http://stackoverflow.com/questions/26022797/in-appcelerator-titanium-how-can-i-get-djangos-csrf-token">In Appcelerator Titanium, how can I get Django&rsquo;s CSRF token?(Stack Overflow)</a></p>

<h2>Titanium MobileでのPOST</h2>

<p>HTTPClientを使って、例えば次のように書く。UIの設計部分とかそんなのは省略。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>var <span class="nv">client</span> <span class="o">=</span> Ti.Network.createHTTPClient<span class="o">({</span>
</span><span class='line'>    onerror: <span class="k">function</span><span class="o">(</span>e<span class="o">){</span>
</span><span class='line'>        Ti.API.debug<span class="o">(</span>e.error<span class="o">)</span>;
</span><span class='line'>        alert<span class="o">(</span><span class="s1">&#39;error&#39;</span><span class="o">)</span>;
</span><span class='line'>    <span class="o">}</span>,
</span><span class='line'>    onload: <span class="k">function</span><span class="o">(</span>e<span class="o">){</span>
</span><span class='line'>        var <span class="nv">item</span> <span class="o">=</span> JSON.parse<span class="o">(</span>this.responseText<span class="o">)</span>;
</span><span class='line'>        <span class="k">if</span><span class="o">(</span>item.status<span class="o">==</span>1<span class="o">){</span>//例としてstatusを返すという設定にしているのでこんな感じにしてる
</span><span class='line'>            alert<span class="o">(</span><span class="s1">&#39;ログインしました&#39;</span><span class="o">)</span>;
</span><span class='line'>        <span class="o">}</span><span class="k">else</span><span class="o">{</span>
</span><span class='line'>            alert<span class="o">(</span><span class="s1">&#39;ログイン失敗しました&#39;</span><span class="o">)</span>;
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">})</span>;
</span><span class='line'>client.open<span class="o">(</span><span class="s1">&#39;POST&#39;</span>,<span class="s1">&#39;http://url/to/login&#39;</span><span class="o">)</span>;
</span><span class='line'>client.send<span class="o">({</span>username:<span class="s1">&#39;hoge&#39;</span>,password:<span class="s1">&#39;fuga&#39;</span><span class="o">})</span>;
</span></code></pre></td></tr></table></div></figure>


<h2>Djangoでのユーザー認証</h2>

<p>Djangoでユーザー認証しようとすると例えばこんな感じ(viewだけ)
REST API作るために、<a href="http://www.django-rest-framework.org/">Django REST framework</a>を使ってるので、そのままコピペしても使えないけど、@部分を消して、Responseとなっている箇所を自力でJSON出力すれば良いと思う。Django REST frameworkについてはどっかで書く。</p>

<figure class='code'><figcaption><span>views.py</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='py'><span class='line'><span class="kn">from</span> <span class="nn">rest_framework</span> <span class="kn">import</span> <span class="n">viewsets</span><span class="err">↲</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">rest_framework.response</span> <span class="kn">import</span> <span class="n">Response</span><span class="err">↲</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">rest_framework.decorators</span> <span class="kn">import</span> <span class="n">api_view</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">django.contrib.auth</span> <span class="kn">import</span> <span class="n">login</span><span class="p">,</span><span class="n">authenticate</span>
</span><span class='line'>
</span><span class='line'><span class="nd">@api_view</span><span class="p">([</span><span class="s">&#39;GET&#39;</span><span class="p">,</span><span class="s">&#39;POST&#39;</span><span class="p">])</span>
</span><span class='line'><span class="k">def</span> <span class="nf">do_login</span><span class="p">(</span><span class="n">request</span><span class="p">):</span><span class="err">↲</span>
</span><span class='line'> <span class="n">status</span> <span class="o">=</span> <span class="mi">0</span><span class="err">↲</span>
</span><span class='line'> <span class="k">if</span> <span class="n">request</span><span class="o">.</span><span class="n">user</span><span class="o">.</span><span class="n">is_authenticated</span><span class="p">():</span><span class="err">↲</span>
</span><span class='line'>     <span class="n">status</span> <span class="o">=</span> <span class="mi">1</span><span class="err">↲</span>
</span><span class='line'> <span class="k">else</span><span class="p">:</span><span class="err">↲</span>
</span><span class='line'>     <span class="k">if</span> <span class="n">request</span><span class="o">.</span><span class="n">method</span> <span class="o">==</span> <span class="s">&#39;POST&#39;</span><span class="p">:</span><span class="err">↲</span>
</span><span class='line'>         <span class="n">username</span> <span class="o">=</span> <span class="n">request</span><span class="o">.</span><span class="n">POST</span><span class="p">[</span><span class="s">&#39;username&#39;</span><span class="p">]</span><span class="err">↲</span>
</span><span class='line'>         <span class="n">password</span> <span class="o">=</span> <span class="n">request</span><span class="o">.</span><span class="n">POST</span><span class="p">[</span><span class="s">&#39;password&#39;</span><span class="p">]</span><span class="err">↲</span>
</span><span class='line'>         <span class="n">user</span> <span class="o">=</span> <span class="n">authenticate</span><span class="p">(</span><span class="n">username</span><span class="o">=</span><span class="n">username</span><span class="p">,</span><span class="n">password</span><span class="o">=</span><span class="n">password</span><span class="p">)</span><span class="err">↲</span>
</span><span class='line'>         <span class="k">if</span> <span class="n">user</span> <span class="ow">is</span> <span class="ow">not</span> <span class="bp">None</span><span class="p">:</span><span class="err">↲</span>
</span><span class='line'>             <span class="n">status</span> <span class="o">=</span> <span class="mi">1</span><span class="err">↲</span>
</span><span class='line'>             <span class="n">login</span><span class="p">(</span><span class="n">request</span><span class="p">,</span><span class="n">user</span><span class="p">)</span><span class="err">↲</span>
</span><span class='line'>     <span class="k">else</span><span class="p">:</span><span class="err">↲</span>
</span><span class='line'>         <span class="k">return</span> <span class="n">Response</span><span class="p">({</span><span class="s">&quot;status&quot;</span><span class="p">:</span><span class="n">status</span><span class="p">})</span><span class="err">↲</span>
</span><span class='line'> <span class="k">return</span> <span class="n">Response</span><span class="p">({</span><span class="s">&quot;status&quot;</span><span class="p">:</span><span class="n">status</span><span class="p">})</span><span class="err">↲</span>
</span><span class='line'><span class="err">↲</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="err">で、実際やってみるとレスポンスはこんな感じになる</span>
</span></code></pre></td></tr></table></div></figure>


<p>js
{</p>

<pre><code>"detail": "CSRF Failed: CSRF token missing or incorrect."
</code></pre>

<p>}</p>

<figure class='code'><figcaption><span>views.py</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='py'><span class='line'><span class="err">そういえば</span><span class="n">Django</span><span class="err">で</span><span class="n">CSRF</span><span class="err">対策してるんだった。</span>
</span></code></pre></td></tr></table></div></figure>


<p>py settings.py</p>

<figure class='code'><figcaption><span>views.py</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='py'><span class='line'><span class="n">MIDDLEWARE_CLASSES</span> <span class="o">=</span> <span class="p">(</span>
</span><span class='line'><span class="o">....</span>
</span><span class='line'>    <span class="s">&#39;django.middleware.csrf.CsrfViewMiddleware&#39;</span><span class="p">,</span>
</span><span class='line'><span class="o">....</span>
</span><span class='line'><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>ajaxでやり取りする部分だけ、MIDDLEWARE_CLASSESから削除するって手もあるけど、<a href="http://docs.djangoproject.jp/en/latest/ref/contrib/csrf.html">Django APIリファレンス</a>に書いてあるようにX-CSRFToken という独自ヘッダーに CSRF トークンの 値を設定するという対処をやってみた。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">function</span> <span class="nx">getCRSF</span><span class="p">(){</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">xhr</span> <span class="o">=</span> <span class="nx">Ti</span><span class="p">.</span><span class="nx">Network</span><span class="p">.</span><span class="nx">createHTTPClient</span><span class="p">({</span>
</span><span class='line'>        <span class="nx">onload</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">){</span>
</span><span class='line'>            <span class="kd">var</span> <span class="nx">item</span> <span class="o">=</span> <span class="nx">JSON</span><span class="p">.</span><span class="nx">parse</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">responseText</span><span class="p">);</span>
</span><span class='line'>            <span class="nx">Ti</span><span class="p">.</span><span class="nx">App</span><span class="p">.</span><span class="nx">Properties</span><span class="p">.</span><span class="nx">setString</span><span class="p">(</span><span class="s2">&quot;csrf&quot;</span><span class="p">,</span> <span class="nx">item</span><span class="p">.</span><span class="nx">csrf</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'>    <span class="nx">xhr</span><span class="p">.</span><span class="nx">open</span><span class="p">(</span><span class="s1">&#39;GET&#39;</span><span class="p">,</span><span class="s1">&#39;http://url/to/login&#39;</span><span class="p">);</span>
</span><span class='line'>    <span class="nx">xhr</span><span class="p">.</span><span class="nx">send</span><span class="p">();</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>これを書いて、getCRSFを先にどこかで実行しておいて
実際のリクエストはさっきのコードをこんな感じで修正する</p>

<p> &#8220;`js</p>

<pre><code>client.open('POST','http://url/to/login');
client.setRequestHeader('X-CSRFToken', Ti.App.Properties.getString("csrf"));//これを追加

client.send({username:'hoge',password:'fuga'});
</code></pre>

<p>&#8220;`</p>

<p>Django側のコードはGETの時にcsrfのトークンを戻すように書き換える</p>

<p> &#8220;`py views.py
from django.core.context_processors import csrf #を追加</p>

<h1>上のviews.pyの14行目をこんな感じで修正</h1>

<p>return Response({&ldquo;status&rdquo;:status,&ldquo;csrf&rdquo;:csrf(request)[&lsquo;csrf_token&rsquo;]})↲</p>

<p>これでいけたみたい。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Django1.6.5でPostgreSQLとBootstrap使ったアプリを作ってみた(4):djangoで作ったプロジェクトをnginx+uwsgiで使って公開する]]></title>
    <link href="http://blog.shigepon.com/blog/2014/11/04/use-django-with-uwsgi/"/>
    <updated>2014-11-04T21:33:54+09:00</updated>
    <id>http://blog.shigepon.com/blog/2014/11/04/use-django-with-uwsgi</id>
    <content type="html"><![CDATA[<p>nginxのインストールは省略。ubuntuならaptitudeでインストールすればいい。デフォルトはちょっと古いけど。
djangoで作ったmysiteプロジェクトを/path/to/mysiteに置いているという前提。</p>

<h2>uwsgiをインストール</h2>

<p>全てvirtualenv上で行うとよさげ。
<a href="http://docs.djangoproject.jp/en/latest/howto/deployment/wsgi/uwsgi.html">uWSGI で Django を使う方法 — Django 1.4 documentation</a>ほぼそのまま</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span><span class="nb">source </span>path/to/virtualenv/bin/activate
</span><span class='line'><span class="k">$(</span>virtualenv<span class="k">)</span> pip install uwsgi
</span></code></pre></td></tr></table></div></figure>


<h2>uwsgi.iniを作る</h2>

<p>djangoのプロジェクトを/path/to/mysiteに置いた場合の設定。pidfile,daemonizeはプロジェクト毎に適当に設定。</p>

<figure class='code'><figcaption><span>uwsgi.ini</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='ini'><span class='line'><span class="k">[uwsgi]</span>
</span><span class='line'><span class="na">chdir</span><span class="o">=</span><span class="s">/path/to/mysite</span>
</span><span class='line'><span class="na">module</span><span class="o">=</span><span class="s">&#39;mysite.wsgi:application&#39;</span>
</span><span class='line'><span class="na">master</span><span class="o">=</span><span class="s">True</span>
</span><span class='line'><span class="na">pidfile</span><span class="o">=</span><span class="s">/tmp/project-master.pid</span>
</span><span class='line'><span class="na">vacuum</span><span class="o">=</span><span class="s">True</span>
</span><span class='line'><span class="na">max-requests</span><span class="o">=</span><span class="s">5000</span>
</span><span class='line'><span class="na">daemonize</span><span class="o">=</span><span class="s">/var/log/uwsgi/mysite.log</span>
</span><span class='line'><span class="na">socket</span><span class="o">=</span><span class="s">127.0.0.1:1234 #適当なポート</span>
</span><span class='line'><span class="na">env</span><span class="o">=</span> <span class="s">DJANGO_SETTINGS_MODULE=mysite.settings</span>
</span></code></pre></td></tr></table></div></figure>


<p>virtualenvで使う場合、sudoを使わないでuwsgiを起動するので、/var/log/uwsgi/yourproject.logの権限に注意する。
uwsgiの起動や終了のコマンドは以下の通り</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>起動
</span><span class='line'><span class="nv">$ </span>uwsgi --ini uwsgi.ini
</span><span class='line'>再起動
</span><span class='line'><span class="nv">$ </span>uwsgi --reload /tmp/project-master.pid
</span><span class='line'>終了
</span><span class='line'><span class="nv">$ </span>uwsgi --stop /tmp/project-master.pid
</span></code></pre></td></tr></table></div></figure>


<h2>nginxの設定</h2>

<p><a href="http://uwsgi-docs.readthedocs.org/en/latest/tutorials/Django_and_nginx.html">Setting up Django and your web server with uWSGI and nginx — uWSGI 2.0 documentation</a>を参考にした。</p>

<h3>uwsgi_params</h3>

<p>uwsgi_paramsは/etc/nginx/uwsgi_paramsに入ってるけど、修正する可能性もあるので、/path/to/mysite/uwsgi_paramsにコピーして、それを修正する。</p>

<h3>nginx.conf</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>upstream django <span class="o">{</span>
</span><span class='line'>  server 127.0.0.1:1234; <span class="c">#uwsgi.iniで設定したポート番号</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'>server <span class="o">{</span>
</span><span class='line'>  server_name hoge.example.com; <span class="c"># substitute your machine&#39;s IP address or FQDN</span>
</span><span class='line'>      charset     utf-8;
</span><span class='line'><span class="c"># max upload size</span>
</span><span class='line'>  client_max_body_size 75M;   <span class="c"># adjust to taste</span>
</span><span class='line'><span class="c"># Django media</span>
</span><span class='line'><span class="c"># Finally, send all non-media requests to the Django server.</span>
</span><span class='line'>  location / <span class="o">{</span>
</span><span class='line'>      uwsgi_pass  django;
</span><span class='line'>      include     /path/to/mysite/uwsgi_params; <span class="c"># the uwsgi_params file you installed</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>これを作成して、/etc/nginx/sites-enabledへシンボリックリンクを貼っておけば良い</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>service nginx restart <span class="c">#reloadでもいい？</span>
</span></code></pre></td></tr></table></div></figure>


<p>でWebアクセスできるようになる。はず。</p>

<h2>静的ファイルの設定手順</h2>

<p>nginx+uwsgiでプロジェクトを公開した場合、manage.py runserverの場合と違い、静的ファイルの置場を設定しないといけないっぽい</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>location ~ ^/static/ <span class="o">{</span>
</span><span class='line'>root /path/to/mysite;
</span><span class='line'><span class="nb">break</span>;
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>settings.pyにSTATIC_URL, STATIC_ROOTを追加</p>

<figure class='code'><figcaption><span>settings.py</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='py'><span class='line'><span class="n">STATIC_URL</span> <span class="o">=</span> <span class="s">&#39;/static/&#39;</span>
</span><span class='line'><span class="n">STATIC_ROOT</span> <span class="o">=</span> <span class="s">&quot;/path/to/mysite/static&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>テンプレでは次のように静的ファイルにアクセスする</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;script </span><span class="na">type=</span><span class="s">&quot;text/javascript&quot;</span> <span class="na">src=</span><span class="s">&quot;js/hoge.js&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>この設定だけでは静的ファイルが/path/to/mysite/staticに入ってないので、collectstaticコマンドを使ってファイルを集める</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>python manage.py collectstatic
</span></code></pre></td></tr></table></div></figure>


<p>これで各アプリに入ってる静的ファイルとadmin関連の静的ファイル全て持って来てくれる</p>

<h2>設定反映</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>sudo service nginx reload <span class="c">#ubuntuの場合</span>
</span></code></pre></td></tr></table></div></figure>


<h2>deploy時に良く使うメモ</h2>

<p>mysite/settings.pyを以外を設定ファイルとして読み込む場合はmanage.pyに以下のオプションを付ける
uwsgi.iniのenvも変更しておく</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>--settings<span class="o">=</span>mysite.settings_deploy
</span></code></pre></td></tr></table></div></figure>


<p>設定ファイルは例えばこんな感じで書いて、元のsettings.pyを上書きする</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='py'><span class='line'><span class="kn">from</span> <span class="nn">pystock.settings</span> <span class="kn">import</span> <span class="o">*</span>
</span><span class='line'><span class="n">DATABASES</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>  <span class="o">.......</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Kobe.R #12に参加しました]]></title>
    <link href="http://blog.shigepon.com/blog/2014/10/28/kobe-dot-r-no-12/"/>
    <updated>2014-10-28T08:13:51+09:00</updated>
    <id>http://blog.shigepon.com/blog/2014/10/28/kobe-dot-r-no-12</id>
    <content type="html"><![CDATA[<p>勉強会の話なので丁寧語で。10/26に<a href="http://kobexr.doorkeeper.jp/events/16101">Kobe.R #12</a>があったので参加してきました。神戸で定期的に開催されているRの勉強会です。今回はたまたま大阪で開かれました。前回と同様誰がされたか名前を記憶していなかったりするので、とりあえず内容だけ紹介します。</p>

<h2>回帰分析の基礎</h2>

<p>@florets1さん</p>

<p>Rのコマンドを叩いて結果を確認しながら回帰分析の基礎を学べる発表でした。回帰分析はある程度知っていても、Rで実際にやるとこんな感じというのが分かって面白かったです。あと、基礎の部分も何となくで素通りしていた部分を改めて説明してもらえたりするので、とても為になる発表でした。</p>

<p>Rは結果をプロットなどで確認しやすかったり、要約を出してくれたりするのがとても便利です。評価はRで行って、定期的な処理になったらPythonで実装するというやりかたもアリかなと妄想しました。</p>

<h2>クラスタリングについて</h2>

<p>Twitter ID @Wakamatzさん</p>

<p>色んなデータをどうやってグループ分け（クラスタリング）するかという手法についての発表でした。基本は何グループに分けるかを指定して、その数に収束するまでクラスタリングするみたいですが、グループ数を決められない場合には自動的に決定する手法もあるそうです。が、なかなか難しい手法みたいです。</p>

<h2>Rのこれから</h2>

<p>不明(別のR勉強会を主催されていた方)</p>

<p>スマホでもサーバクライアント型のサービスが増えてくるだろうから、サーバ内での解析にRが使えるんじゃないかという話でした。RDBやNOSQLとの接続が楽に出来るようになるとそうなるかも。Rをスマホにインストールするのは難しいとお話があったのですが、インストールはやろうと思えば出来るのでしょうか？脱獄したら出来るでしょうが。</p>

<h2>カフェをなんとか盛り上げたい</h2>

<p>不明(神戸で英会話カフェを主催されている方)</p>

<p>神戸で毎週土曜日AM11:00〜PM2:00まで英会話の機会に使えるカフェを運営しているというお話と、カフェの問題点を紹介してくれました。今後何かRで分析する話になるかも？？？</p>

<h2>Rで時系列データを取り扱う</h2>

<p>Rで時系列データを扱い、時間に対して周期性があるデータから未来予測したりというライブラリの紹介とデモを見せて頂きました。Rのライブラリ紹介と実際に使った結果を見ることが出来ると理解が深まってとてもありがたいです。</p>

<p>前回今回と大阪で参加しているのですが、今度は神戸で開催される時も参加してみようかと思います。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[PhantomJSとSeleniumをpythonから使ってみる]]></title>
    <link href="http://blog.shigepon.com/blog/2014/10/10/phantomjs/"/>
    <updated>2014-10-10T13:33:48+09:00</updated>
    <id>http://blog.shigepon.com/blog/2014/10/10/phantomjs</id>
    <content type="html"><![CDATA[<p>スクレーピングするのに便利な方法を調べてる内に、PhantomJSが良さげだなと思ったので、軽く使ってみた。参考<a href="http://blog.kzfmix.com/entry/1379417397">Python+Selenium+PhantomJSが快適すぎる</a></p>

<h2>PhantomJSのインストール</h2>

<p>Ubuntuを使ってるので<a href="http://phantomjs.org/build.html">PhantomJSのページ</a>を参考に</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>sudo aptitude update
</span><span class='line'><span class="nv">$ </span>sudo aptitude install build-essential chrpath git-core libssl-dev libfontconfig1-dev libxft-dev
</span><span class='line'><span class="nv">$ </span>git clone git://github.com/ariya/phantomjs.git
</span><span class='line'><span class="nv">$ </span><span class="nb">cd </span>phantomjs
</span><span class='line'><span class="nv">$ </span>git checkout 1.9
</span><span class='line'><span class="nv">$ </span>./build.sh
</span></code></pre></td></tr></table></div></figure>


<p>あとは./bin/にphantomjsが入っているので、./bin/にパスを通しておしまい</p>

<h2>Seleniumをpythonから使えるようにする</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>pip install selenium
</span></code></pre></td></tr></table></div></figure>


<p>これだけでおk</p>

<h2>SeleniumでPhantomJSのドライバを使う</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='py'><span class='line'><span class="kn">import</span> <span class="nn">selenium</span> <span class="nn">import</span> <span class="nn">webdriver</span>
</span><span class='line'>
</span><span class='line'><span class="n">driver</span> <span class="o">=</span> <span class="n">webdriver</span><span class="o">.</span><span class="n">PhantomJS</span><span class="p">()</span>
</span><span class='line'><span class="n">driver</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s">&quot;http://www.yahoo.co.jp&quot;</span><span class="p">)</span>
</span><span class='line'><span class="k">print</span> <span class="n">driver</span><span class="o">.</span><span class="n">current_url</span>
</span></code></pre></td></tr></table></div></figure>


<p>こんな感じ。何が出来るかは<a href="http://selenium-python.readthedocs.org/en/latest/api.html">Selenium Python BindingsのWebDriver API</a>を見ると良い。</p>

<p>Javascriptをちゃんと評価してくれるので、すんげーやりやすい。昔ながらのフレームや、新規ウィンドウが出るようなものも上手く再現してくれる。すげーすげー</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Kobe.R #9に参加しました]]></title>
    <link href="http://blog.shigepon.com/blog/2014/09/22/kobe-dot-r-number-9/"/>
    <updated>2014-09-22T20:42:57+09:00</updated>
    <id>http://blog.shigepon.com/blog/2014/09/22/kobe-dot-r-number-9</id>
    <content type="html"><![CDATA[<p>勉強会の話なので丁寧語で。9/20に<a href="http://kobexr.doorkeeper.jp/events/14808">Kobe.R #9</a>があったので参加してきました。大阪で定期的に開催されているRの勉強会です。内容はRに限らず、統計処理をやる上で大事なことを扱うという感じでした。発表は誰がされたか名前を記憶していなかったりするので、とりあえず内容だけ照会します。</p>

<h2>Statistical Disclosure Controlの紹介</h2>

<p>Twitter ID @Wakamatzさん</p>

<p>個人情報を含むデータや、他の情報と組み合わせると個人情報になるデータをどのように匿名化するかという話でした。どうしても匿名化すると、実際に欲しいデータの精度とのトレードオフになるので、それをどう評価するかが重要なようです。
オォっと思った点を羅列します。</p>

<ul>
<li>開示リスク（どの程度特定されやすいデータになっているか?）を評価出来るライブラリがRにある。Rすげー。</li>
<li>匿名化には適当なデータを混ぜたりクラスタリングする手法があるのかー。なるほどー。確かに適当なデータを混ぜると集計精度が落ちそう</li>
<li>評価手法は何種類かあるけど、とりあえずIL1sという評価法を紹介してもらった。実際計算してみないとなんともいえないかな。</li>
</ul>


<h2>カードで説明する統計的独立</h2>

<p>@florets1さん</p>

<p>トランプのカードを例にして、独立とは何かを説明してくれました。なんとなくで済ませてたところを例を入れて分かりやすく説明してくれました。
どっかの書籍で「○○が独立な場合に△△」とか書かれてイメージはしにくいのが、ざっくりですが、「計算しやすいので△△」くらいに読み替えてよさそうというのが分かった感じです。</p>

<h2>Powershellいいよって話（タイトル忘れた）</h2>

<p>Windows8から、常にインストールされているPowershellを使いこなすと、スクリプトで.Net使えたりして便利って話</p>

<h2>他</h2>

<p>Rでパイプ使う時はpipe Rが便利とかsql使ってdbアクセスするライブラリとかforループを速く便利にする方法とか教えてもらいました。まだ実際に試してないので、試してみないといかんす。</p>

<p>次回参加は無理ですが、ちょこちょこ参加したいなと思いました（小並感）。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ubuntuのmonoでMicrosoft.VisualBasicが動かない件]]></title>
    <link href="http://blog.shigepon.com/blog/2014/08/20/vb-not-work-on-ubuntu/"/>
    <updated>2014-08-20T13:38:34+09:00</updated>
    <id>http://blog.shigepon.com/blog/2014/08/20/vb-not-work-on-ubuntu</id>
    <content type="html"><![CDATA[<p>なでしこ2にコミットしたりしつつ、実際にUbuntu 12.04で使ってみたりしているが、vb系のインポートが出来ないとか何とか言われたのでメモ</p>

<p>参考：<a href="http://stackoverflow.com/questions/10071836/vb-net-not-working-on-ubuntu-10-04-with-mono">.net &ndash; VB.NET Not working on Ubuntu 10.04 With Mono &ndash; Stack Overflow</a></p>

<p>要は普通にmonoをインストールしただけ</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>sudo aptitude install mono-devel
</span></code></pre></td></tr></table></div></figure>


<p>だとVB系のライブラリはインストールされないらしい。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>sudo aptitude install mono-vbnc
</span></code></pre></td></tr></table></div></figure>


<p>を追加インストールしておこうということだった。情報無かったので結構はまった。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[djangoで出てくるエラーメッセージメモ]]></title>
    <link href="http://blog.shigepon.com/blog/2014/08/06/django-error/"/>
    <updated>2014-08-06T15:42:43+09:00</updated>
    <id>http://blog.shigepon.com/blog/2014/08/06/django-error</id>
    <content type="html"><![CDATA[<p>Djangoでエラーメッセージが出た時に、どこから当たりを付けていくか
イチイチググってるので、まとめておく。逐次追記。</p>

<h2>other_dict must be a mapping (dictionary-like) object</h2>

<p>returnで返す時のdictionaryが</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>{'a','b'}</span></code></pre></td></tr></table></div></figure>


<p>となってないかチェック。正しくは</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>{'a':'b'}</span></code></pre></td></tr></table></div></figure>


<h2>Django ImportError when importing xxx</h2>

<p>ライブラリをインストールしていない場合、</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>pip install xxx
</span></code></pre></td></tr></table></div></figure>


<p>ライブラリ入れてる場合、xxxと同じファイル名のpythonファイル（とキャッシュ）が無いかチェックして、名前を変更するか、消す</p>

<h2>locale.Error: unsupported locale setting</h2>

<p>localeの設定名がおかしい。例えばこんな風だとエラー</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='py'><span class='line'><span class="kn">import</span> <span class="nn">locale</span>
</span><span class='line'><span class="n">locale</span><span class="o">.</span><span class="n">setlocale</span><span class="p">(</span><span class="n">locale</span><span class="o">.</span><span class="n">LC_ALL</span><span class="p">,</span><span class="s">&#39;ja_JP&#39;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>こうするとオッケー</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='py'><span class='line'><span class="kn">import</span> <span class="nn">locale</span>
</span><span class='line'><span class="n">locale</span><span class="o">.</span><span class="n">setlocale</span><span class="p">(</span><span class="n">locale</span><span class="o">.</span><span class="n">LC_ALL</span><span class="p">,</span><span class="s">&#39;ja_JP.utf8&#39;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<h2>IndexError: list index out of range</h2>

<p>リストのインデックスが範囲外なので、該当する箇所のリストの添字をチェック。そもそもリストになっているかどうかもチェック。</p>
]]></content>
  </entry>
  
</feed>
