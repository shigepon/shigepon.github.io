<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[shigeponが関心のある技術情報など]]></title>
  <link href="http://blog.shigepon.com/atom.xml" rel="self"/>
  <link href="http://blog.shigepon.com/"/>
  <updated>2014-07-29T01:14:36+09:00</updated>
  <id>http://blog.shigepon.com/</id>
  <author>
    <name><![CDATA[shigepon]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[まっちゃ139勉強会に参加しました]]></title>
    <link href="http://blog.shigepon.com/blog/2014/07/29/matcha-139/"/>
    <updated>2014-07-29T00:36:54+09:00</updated>
    <id>http://blog.shigepon.com/blog/2014/07/29/matcha-139</id>
    <content type="html"><![CDATA[<p>まっちゃ勉強会はITカレンダーで結構気になってたんですが、なかなか日が合わずに参加出来なかったのですが、<a href="http://www.matcha139.jp/workshop/28thworkshop">あまりに面白そうな内容</a>だったので初参加してきました。</p>

<h2>ネット違法有害情報規制の最新状況－児童ポルノ法改正を中心に</h2>

<p>会場に着いた時にはもうすでに始まっていました。
とても楽しい？怖い？濃い？話ばかりだったんですが、セッション内容は公開できないそうなので、一言だけ。</p>

<p>奥村弁護士、園田弁護士は<em>児童ポルノに詳しい人</em>ではなくて<em>児童ポルノ法に詳しい人</em>なのでTVで紹介されても勘違いしないで下さい。</p>

<p>もう一言だけ、セッションとは関係ないですが、岡村先生、JPCERT/CC理事就任おめでとうございます！</p>

<h2>ライトニングトーク</h2>

<p>メモとってないので、うろ覚えみたいになって申し訳ないですが、ざっくりこんな感じでした。抜けてるLTがあったら申し訳ありません。鳥頭です＞＜。</p>

<h3>はなずきん♪さん</h3>

<p>利用規約読んでる？って話でした。私はどうしても使わないといけないもの以外は読んでます。変な規約載せてるサイト時々ありますしね。</p>

<h3>dragon_TAさん</h3>

<p>和服い〜よって話からセキュリティに持っていくという力技のLT？でした。和服はインパクトあります。</p>

<h3>黒林檎さん</h3>

<p><a href="https://atnd.org/events/52714">私立プログラミングキャンプ2014</a>参加者募集の話でした。参加出来る人はぜひ！</p>

<h3>ここから名前覚えてない＞＜申し訳ないです　の人</h3>

<p>LibreOfficeの話がありました。オープンソースだし、コミュニティに参加しよう！って感じでした。LibreOfficeは使ってます。</p>

<p>もう一つ急いでプレゼン資料作ってた方（確かすがわらさん）、今後のセキュリティ関連のイベントについてお話していました。色々あるということしか頭に残ってない・・・申し訳ないです。</p>

<p>また、この勉強会は休憩時間にお菓子が食べれるとか、学生の方に交通費をカンパするとか色々凄いなと思いました（小並感）。これからも時間が合えば参加したいな〜と思えるイベントでした。</p>

<p>ちなみに懇親会で渡した名刺とメインで使ってるtwitterアカウントが違ってたりします。メインは<a href="https://twitter.com/shigepon">@shigepon</a>です。以後よろしくです。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Djangoでpython-social-authを使うための最低限の設定]]></title>
    <link href="http://blog.shigepon.com/blog/2014/07/23/use-python-social-auth-in-django/"/>
    <updated>2014-07-23T09:40:36+09:00</updated>
    <id>http://blog.shigepon.com/blog/2014/07/23/use-python-social-auth-in-django</id>
    <content type="html"><![CDATA[<p>「djangoでfacebook, twitter, mixiでの認証使うにはどうしたらいいんだろ？」<a href="http://twitter.com/shigepon/status/491397829215006720">URL</a>と質問したら、@key3さんから「@shigepon python-social-authおすすめ <a href="https://t.co/uWqOX8Xh94">https://t.co/uWqOX8Xh94</a>」<a href="http://twitter.com/key3/status/491404335335477248">URL</a>と教えて貰ったので試してみた。</p>

<p>一日試してみて、認証出来たんだけど、<a href="http://psa.matiasaguirre.net/docs/index.html">ドキュメント</a>見ても、どれが最低限必要な設定なのか良く分からなかったのでブログに残しておく。</p>

<h2>python-social-authをインストール</h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ pip install python-social-auth</span></code></pre></td></tr></table></div></figure>


<h2>設定</h2>

<figure class='code'><figcaption><span>settings.py</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='py'><span class='line'><span class="n">INSTALLED_APPS</span> <span class="o">=</span> <span class="p">(</span>
</span><span class='line'><span class="o">...</span>
</span><span class='line'>      <span class="s">&#39;social.apps.django_app.default&#39;</span><span class="p">,</span>
</span><span class='line'><span class="o">...</span>
</span><span class='line'><span class="p">)</span>
</span><span class='line'><span class="n">AUTHENTICATION_BACKENDS</span> <span class="o">=</span> <span class="p">(</span>
</span><span class='line'><span class="o">...</span>
</span><span class='line'>      <span class="s">&#39;social.backends.twitter.TwitterOAuth&#39;</span><span class="p">,</span><span class="c">#Twitterでの認証をする場合。他の認証がある場合は該当するバックエンドを追加</span>
</span><span class='line'>      <span class="s">&#39;django.contrib.auth.backends.ModelBackend&#39;</span><span class="p">,</span>
</span><span class='line'><span class="o">...</span>
</span><span class='line'>      <span class="p">)</span>
</span><span class='line'><span class="n">SOCIAL_AUTH_TWITTER_KEY</span><span class="o">=</span><span class="s">&#39;&#39;</span><span class="c">#これと次の行はTwitter認証用。別の認証を用いる場合は別の設定が必要</span>
</span><span class='line'><span class="n">SOCIAL_AUTH_TWITTER_SECRET</span><span class="o">=</span><span class="s">&#39;&#39;</span>
</span><span class='line'><span class="n">SOCIAL_AUTH_LOGIN_REDIRECT_URL</span> <span class="o">=</span> <span class="s">&#39;/&#39;</span>
</span><span class='line'><span class="n">SOCIAL_AUTH_LOGIN_URL</span> <span class="o">=</span> <span class="s">&#39;/login/&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>注意：
AUTH_USER_MODEL
を加えるとエラー出たので注意(Django 1.6)</p>

<figure class='code'><figcaption><span>urls.py</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='py'><span class='line'><span class="n">url</span><span class="p">(</span><span class="s">&#39;&#39;</span><span class="p">,</span> <span class="n">include</span><span class="p">(</span><span class="s">&#39;social.apps.django_app.urls&#39;</span><span class="p">,</span><span class="n">namespace</span><span class="o">=</span><span class="s">&#39;social&#39;</span><span class="p">)),</span>
</span></code></pre></td></tr></table></div></figure>


<h2>設定後</h2>

<p>syncdbしておく</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>python manage.py syncdb
</span></code></pre></td></tr></table></div></figure>


<p>これで例えばtwitter認証の場合に</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>http://host/login/twitter
</span></code></pre></td></tr></table></div></figure>


<p>にアクセスすると認証を行ってくれるようになった。
テンプレートにリンクを作りたい場合は</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;a</span> <span class="na">href=</span><span class="s">&quot;\{\% url &#39;social:base&#39; &#39;twitter&#39; \%\}&quot;</span><span class="nt">&gt;</span>login<span class="nt">&lt;/a&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>とかやると作れる。
「twitter」の部分は認証の種類によって変えるが、どういうルールで名前を決めるのかイマイチ分かってない。試行錯誤が要るかも。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Groongaアンケート？]]></title>
    <link href="http://blog.shigepon.com/blog/2014/07/05/groonga-qa/"/>
    <updated>2014-07-05T13:52:55+09:00</updated>
    <id>http://blog.shigepon.com/blog/2014/07/05/groonga-qa</id>
    <content type="html"><![CDATA[<p>今回は他の人からの話があるので丁寧語で。
@ktouさんからGroongaについて「Groongaについてのいくつかの質問について答えて欲しい」との話がありましたので、ブログに載せておきます。</p>

<p>質問は以下の3点</p>

<ul>
<li>Groongaを選んだ決め手</li>
<li>実際にGroongaを使っていてよいと思っているところ</li>
<li>Groongaがこうなるともっとうれしいと思うところ</li>
</ul>


<h2>Groongaを選んだ決め手</h2>

<p>現在運営しているサービス<a href="http://thoz.org">とある法律判例の全文検索</a>を作り始める時に、全文検索をサービスに入れるのを前提に考えてましたので、全文検索エンジンについて調べました。DBとしてはPostgreSQLをメインで使っているので、当時は選択肢として次のようなものがありました。</p>

<ul>
<li>Groonga（まだバージョン1になってなかったような）</li>
<li>Senna</li>
<li>tsvector</li>
<li>namazu</li>
<li>Hyper Estraier</li>
</ul>


<p>最初は何もアプリを入れなくていいのでtsvectorを使った全文検索を試してみたんですが、bigramで日本語が使えない。使うならソースからコンパイルというのが当時面倒だったので辞めました（当時からVagrantとかDockerとかあって、色々試せたらbigramでいってたかも）。</p>

<p>なので、他4つを比較した訳なんですが、作るサービスは個人サービスだし、なるべく新しいもので、かつ日本人が作っているものを利用してみようと思い、Groongaを選択しました。あと、Groongaが「Sennaの後継」という立場だったのも大きかったと思います。Sennaの後継なら新しいアプリだとしても、それなりに信用があるだろう。すぐにメンテされなくなるようなものでも無いだろうという判断をしました。</p>

<h2>実際にGroongaを使っていてよいと思っているところ</h2>

<p>まずサーバ1個でかなり無茶な使い方してもちゃんと動いてくれるところです。Groonga勉強会では「データ量がメモリを超えだしたら分散を考えて」みたいな話が出たのですが、結構超えてても何の問題もなく動いてくれます。</p>

<p>次は言語バインディングとかあまり考えなくてもHTTPでアクセス出来る方法を用意してくれているので、HTTPアクセスさえ出来ればどんな言語からでも利用出来る点が良いと思います。Mroongaは全く使っていませんし、Rroongaもデータのバックアップ用途以外は全く使ってません。HTTPアクセス出来る場合は、管理もHTTPで出来ます。これも便利だと思います。</p>

<p>ドリルダウン、タグ検索、補完補正など、全文検索以外にも使える機能が沢山あります。沢山ありすぎて利用できていない機能が多々ありますがorz。</p>

<p>機能とは関係ありませんが、TwitterでGroongaについてボヤくと@ktouさんがフォローしてくれるのがいつもとても助かっています＞＜。そういう人が居ると、使う時にとても心強いです。</p>

<p>名前が好きです。Elasticなんたらは何かエラそうですが、Groongaはグルグルしてるっぽいのがいいです。</p>

<h2>Groongaがこうなるともっとうれしいと思うところ</h2>

<p>現在もとてもありがたいのですが、こうなると嬉しい点を箇条書きします。</p>

<ul>
<li>現在使っている機能以外でもっと色々出来るようなのですが、情報が少ない気がします。ドキュメントが充実してくるととても嬉しいです。ドキュメントが充実すればきっとTwitterでボヤく率も減る・・・かも。</li>
<li>Rroonga使わないでGroonga単体の機能として、大容量データのバックアップを取れると嬉しいです。</li>
<li>難しいと思いますが、複数カラム（カラムA,B)での全文検索で、CとDを検索したい時、カラムAにCが、カラムBにDが入ってる時に、検索結果として出力出来るフラグみたいなのを入れて欲しいです。</li>
<li>もしかしたら出来るのかもしれませんが、ソースからビルドした場合にgroonga-server系の機能が使えるようにしてもらえるとHTTPから使っている身としては嬉しいです。</li>
<li>cliでのヒストリーは特に何もアプリ入れなくても出来るようにしてくれるとまた嬉しいです。</li>
<li>sqlのinsert文みたいな形でloadが出来ると、RDBで使っていたテーブルを丸々移動とか手軽に出来そうなので、そういうのが出来ると嬉しいです。もしくはcsvでloadが出来るとか。まぁsql使うならMroonga使えって話ですが・・・単体でも特にloadについてRDBから書き出せる形式のものを読み込めると嬉しいなーなんて思いました。</li>
<li>勉強会の時に「ぐるーんが」なのか「むるーんが」なのか「るるーんが」なのかが発音でハッキリしませんでしたが、私の耳が悪いんですねきっと。</li>
</ul>


<p>以上追記するかもしれませんが、こんな感じで〜</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Django1.6.5でPostgreSQLとBootstrap使ったアプリを作ってみた(3):データの一覧とページングを用意する]]></title>
    <link href="http://blog.shigepon.com/blog/2014/07/02/django-show-list-with-paging/"/>
    <updated>2014-07-02T11:51:44+09:00</updated>
    <id>http://blog.shigepon.com/blog/2014/07/02/django-show-list-with-paging</id>
    <content type="html"><![CDATA[<h2>データの一覧表示</h2>

<p>あとで参考ページとか追記する予定。
データの一覧表示には何種類かファイルが必要（モデル、ビュー、テンプレート、URLディスパッチャー）。
それぞれこんな感じで用意する。</p>

<h3>モデル</h3>

<figure class='code'><figcaption><span>models.py</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">from</span> <span class="nn">django.db</span> <span class="kn">import</span> <span class="n">models</span>
</span><span class='line'><span class="k">class</span> <span class="nc">Bocho</span><span class="p">(</span><span class="n">models</span><span class="o">.</span><span class="n">Model</span><span class="p">):</span>
</span><span class='line'>    <span class="n">name</span> <span class="o">=</span> <span class="n">models</span><span class="o">.</span><span class="n">TextField</span><span class="p">()</span>
</span><span class='line'>    <span class="n">court</span> <span class="o">=</span> <span class="n">models</span><span class="o">.</span><span class="n">TextField</span><span class="p">()</span>
</span><span class='line'>    <span class="n">date</span> <span class="o">=</span> <span class="n">models</span><span class="o">.</span><span class="n">DateField</span><span class="p">()</span>
</span><span class='line'>    <span class="o">....</span>
</span></code></pre></td></tr></table></div></figure>


<p>モデルではフィールドとその属性を決める。このコードではクラスの中でMetaクラスを定義すると、モデルのテーブル名とかそういうのを色々定義出来るみたい。定義出来るフィールドの種類はDjangoのマニュアルに書いてあるのですぐ分かる。</p>

<h3>ビュー</h3>

<p>データをテンプレートに設定する部分。リクエストパラメータから、必要なデータを取得する部分。多分。</p>

<figure class='code'><figcaption><span>views.py</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">from</span> <span class="nn">django.shortcuts</span> <span class="kn">import</span> <span class="n">render</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">django.core.paginator</span> <span class="kn">import</span> <span class="n">Paginator</span><span class="p">,</span> <span class="n">PageNotAnInteger</span><span class="p">,</span> <span class="n">EmptyPage</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">bocho.models</span> <span class="kn">import</span> <span class="n">Bocho</span>
</span><span class='line'><span class="k">def</span> <span class="nf">index</span><span class="p">(</span><span class="n">request</span><span class="p">):</span> <span class="c">#requestはHttpRequestオブジェクト</span>
</span><span class='line'>    <span class="n">objects</span> <span class="o">=</span> <span class="n">Bocho</span><span class="o">.</span><span class="n">objects</span><span class="o">.</span><span class="n">order_by</span><span class="p">(</span><span class="s">&quot;-date&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="n">paginator</span> <span class="o">=</span> <span class="n">Paginator</span><span class="p">(</span><span class="n">objects</span><span class="p">,</span><span class="mi">10</span><span class="p">)</span> <span class="c">#10行毎にページング</span>
</span><span class='line'>    <span class="n">page</span><span class="o">=</span><span class="n">request</span><span class="o">.</span><span class="n">GET</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s">&#39;page&#39;</span><span class="p">,</span><span class="mi">1</span><span class="p">)</span> <span class="c">#GETパラメータからページ番号を取得(初期値は1)</span>
</span><span class='line'>    <span class="k">try</span><span class="p">:</span>
</span><span class='line'>        <span class="n">object_list</span> <span class="o">=</span> <span class="n">paginator</span><span class="o">.</span><span class="n">page</span><span class="p">(</span><span class="n">page</span><span class="p">)</span> <span class="c">#ここでページング</span>
</span><span class='line'>    <span class="k">except</span> <span class="n">PageNotAnInteger</span><span class="p">:</span>
</span><span class='line'>        <span class="n">object_list</span> <span class="o">=</span> <span class="n">paginator</span><span class="o">.</span><span class="n">page</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span> <span class="c">#変なページ番号なら1ページ目</span>
</span><span class='line'>    <span class="k">except</span> <span class="n">EmptyPage</span><span class="p">:</span>
</span><span class='line'>        <span class="n">object_list</span> <span class="o">=</span> <span class="n">paginator</span><span class="o">.</span><span class="n">page</span><span class="p">(</span><span class="n">paginator</span><span class="o">.</span><span class="n">num_pages</span><span class="p">)</span> <span class="c">#存在しないページ番号なら最後のページ</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">render</span><span class="p">(</span><span class="n">request</span><span class="p">,</span> <span class="s">&#39;list.html&#39;</span><span class="p">,</span> <span class="p">{</span><span class="s">&#39;object_list&#39;</span><span class="p">:</span><span class="n">object_list</span><span class="p">})</span>
</span></code></pre></td></tr></table></div></figure>


<p>参考<a href="http://www.djangoproject.jp/doc/ja/1.0/ref/request-response.html">リクエストオブジェクトとレスポンスオブジェクト — Django v1.0 documentation</a></p>

<h3>テンプレート</h3>

<p>bocho/templates/list.htmlを作る。中身は一部だけ。でビューで割り当てた変数を表示する。
あと、色々テンプレート用のタグがある。これもDjangoマニュアルを見ると分かる。</p>

<figure class='code'><figcaption><span>list.html</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>
</span><span class='line'><span class="nt">&lt;table</span> <span class="na">class=</span><span class="s">&quot;table&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="nt">&lt;thead&gt;&lt;th</span> <span class="na">class=</span><span class="s">&quot;span2&quot;</span><span class="nt">&gt;</span>日付<span class="nt">&lt;/th&gt;&lt;th&gt;</span>名称<span class="nt">&lt;/th&gt;&lt;th&gt;</span>裁判所<span class="nt">&lt;/th&gt;&lt;/thead&gt;</span>
</span><span class='line'>{% for object in object_list %}
</span><span class='line'><span class="nt">&lt;tr&gt;</span>
</span><span class='line'>  <span class="nt">&lt;td&gt;</span>{{ object.date|date:&quot;Y-m-d&quot; }}<span class="nt">&lt;/td&gt;</span>
</span><span class='line'>  <span class="nt">&lt;td&gt;</span>{{ object.name }}<span class="nt">&lt;/td&gt;</span>
</span><span class='line'>  <span class="nt">&lt;td&gt;</span>{{ object.court }}<span class="nt">&lt;/td&gt;</span>
</span><span class='line'><span class="nt">&lt;/tr&gt;</span>
</span><span class='line'>{% endfor %}
</span><span class='line'><span class="nt">&lt;/table&gt;</span>
</span><span class='line'>
</span></code></pre></td></tr></table></div></figure>


<h3>URLディスパッチャー</h3>

<p>ドメイン名/bocho/で一覧表示出来るように正規表現使ってviewsに割り当てる。</p>

<p>myproject/urls.py</p>

<figure class='code'><figcaption><span>urls.py</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">from</span> <span class="nn">django.conf.urls</span> <span class="kn">import</span> <span class="n">patterns</span><span class="p">,</span> <span class="n">include</span><span class="p">,</span> <span class="n">url</span>
</span><span class='line'><span class="n">urlpatterns</span> <span class="o">=</span> <span class="n">patterns</span><span class="p">(</span><span class="s">&#39;&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="c"># Examples:</span>
</span><span class='line'>    <span class="c"># url(r&#39;^$&#39;, &#39;pycourt.views.home&#39;, name=&#39;home&#39;),</span>
</span><span class='line'>    <span class="c"># url(r&#39;^blog/&#39;, include(&#39;blog.urls&#39;)),</span>
</span><span class='line'>    <span class="n">url</span><span class="p">(</span><span class="s">r&#39;bocho/^&#39;</span><span class="p">,</span> <span class="n">include</span><span class="p">(</span><span class="s">&#39;bocho.urls&#39;</span><span class="p">,</span><span class="n">namespace</span><span class="o">=</span><span class="s">&#39;bocho&#39;</span><span class="p">)),</span> <span class="c">#url(正規表現, 別のurlsに投げる設定。ここではbocho/urls.pyに投げる)</span>
</span><span class='line'><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>bocho/urls.pyは無いので作る。</p>

<figure class='code'><figcaption><span>urls.py</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">from</span> <span class="nn">django.conf.urls</span> <span class="kn">import</span> <span class="n">patterns</span><span class="p">,</span> <span class="n">include</span><span class="p">,</span> <span class="n">url</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">bocho</span> <span class="kn">import</span> <span class="n">views</span>
</span><span class='line'><span class="n">urlpatterns</span> <span class="o">=</span> <span class="n">patterns</span><span class="p">(</span><span class="s">&#39;&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="n">url</span><span class="p">(</span><span class="s">r&#39;^$&#39;</span><span class="p">,</span> <span class="n">views</span><span class="o">.</span><span class="n">index</span><span class="p">,</span> <span class="n">name</span><span class="o">=</span><span class="s">&quot;index&quot;</span><span class="p">),</span> <span class="c">#url(正規表現, 割り当てるビュー, URL作ったりリダイレクトする時に付けておくと便利な名前)</span>
</span><span class='line'><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>一覧はどうせページングするので、views.pyはこの形で覚えておくと良いかも</p>

<h2>ページング</h2>

<p>どうせbootstrapを使うのでdjango-bootstrap-toolkitを使う方法を載せる。
ページ分けする対象をobject_list、ページ送りのURLにpage=以外に設定するパラメータをreqとすると、</p>

<figure class='code'><figcaption><span>list.html</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>
</span><span class='line'>{% load bootstrap_toolkit %}↲
</span><span class='line'>{% bootstrap_pagination object_list align=&quot;center&quot; extra=req %}
</span><span class='line'>
</span></code></pre></td></tr></table></div></figure>


<p>と設定しておけば良い。</p>

<h2>ページングにパラメータを付ける</h2>

<p>ついでにメモ
例えば&#8221;date=2001-01-01&#8221;みたいなパラメータを設定したいんだけど、割り当ててる変数？は日付オブジェクトの場合</p>

<figure class='code'><figcaption><span>list.html</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>
</span><span class='line'>{% bootstrap\_pagination object\_list align=&quot;center&quot; extra=date|date:&quot;Y-m-d&quot;|s    tringformat:&quot;%date=%s&quot;|slice:&quot;1:&quot; %}
</span><span class='line'>
</span></code></pre></td></tr></table></div></figure>


<p>こんな感じで文字列をくっつけてパラメータにすることが出来る。かなり強引<a href="https://www.google.com/url?q=http://d.hatena.ne.jp/feiz/20110414/1302771447&amp;usd=2&amp;usg=AFQjCNFN9kzyrEJj_WZEatK2wIL07eaD0w">参考</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ansible memo]]></title>
    <link href="http://blog.shigepon.com/blog/2014/07/01/ansible-memo/"/>
    <updated>2014-07-01T16:56:06+09:00</updated>
    <id>http://blog.shigepon.com/blog/2014/07/01/ansible-memo</id>
    <content type="html"><![CDATA[<p>ansibleで自分が欲しい情報が色んなページに散らばっていたので、メモ</p>

<h3>ansible-playbookのオプション</h3>

<ul>
<li>-K: sudoのパスワード入力</li>
<li>-C (&mdash;check): 実際に実行しないでチェックしてくれる</li>
<li>-l name: hostsファイルに[name]と書かれたホストにのみ実行</li>
<li>-i hostsfile: 初期状態では/etc/ansible/hostsを見に行くので、自分で指定したい場合に</li>
<li>&mdash;syntax-check: playbookの書式チェック。書いて最初にやるといい</li>
<li>&mdash;list-tasks: playbookで行う内容をリストアップ</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Python memo]]></title>
    <link href="http://blog.shigepon.com/blog/2014/06/30/python-memo/"/>
    <updated>2014-06-30T20:38:44+09:00</updated>
    <id>http://blog.shigepon.com/blog/2014/06/30/python-memo</id>
    <content type="html"><![CDATA[<p>Djangoやり始めたので、その過程で記録しておきたいことをメモ。</p>

<h2>pip freezeでWarning: cannot find svn location for distribute==0.6.24dev-r0</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>sudo pip install --upgrade distribute
</span></code></pre></td></tr></table></div></figure>


<p>でおk</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[全文検索エンジンGroongaユーザ勉強会＠神戸に参加しました]]></title>
    <link href="http://blog.shigepon.com/blog/2014/06/28/groonga-study-kobe-2014-06-27/"/>
    <updated>2014-06-28T13:24:22+09:00</updated>
    <id>http://blog.shigepon.com/blog/2014/06/28/groonga-study-kobe-2014-06-27</id>
    <content type="html"><![CDATA[<p>自分の話でなく、他人の話なので丁寧語で。
6月27日に<a href="http://koberoonga.doorkeeper.jp/events/11578">Groongaユーザー勉強会＠神戸</a>に参加しました。ブログに書くまでが勉強会だったのを久々に思い出したので、感想書いてみます。</p>

<p>正直あまり回数行ったことがない神戸で、さらに行ったこと無い区域で、さらに入り口に「Closed」と書いてあったので、見事に迷いました。スマホくらい持たないといかんかなー。</p>

<p>で、勉強会の内容は全員の自己紹介の後、@naoa_yさんが、Groongaについて全般的な紹介と事例紹介として<a href="http://patentfield.com/%E3%83%A1%E3%82%A4%E3%83%B3%E3%83%9A%E3%83%BC%E3%82%B8">特許検索のウェブサービスPatentField</a>を紹介する間に、途中気づいた点をどんどん質問していく形式となりました。</p>

<p>LTも時間があればやるはずだったのですが、開始時間が30分遅れたこともあり、出来ませんでした。遅れてすいません＞＜。</p>

<p>以下、色々感想書くと言いつつ、やっぱ感想を書くの苦手なので、自分が気になったポイントを箇条書きで〜</p>

<h3>Groonga全般の話</h3>

<ul>
<li>@ktoさんについに会えた！Twitterでいつも質問してすいません＞＜</li>
<li>cliで&mdash;output_type=xmlとかやると整形をよろしくやってくれる</li>
<li>dumpよりはgrndumpは今も変わらず。</li>
<li>PostgreSQLはpg_bgramがいーかも</li>
<li>データサイズがメモリを超えるくらいでDroonga考えると幸せかも（えーと、今動かしてるサービス、データサイズが余裕でメモリ超えてるんですけど）</li>
<li>Mroongaは正規化有りがデフォ、Groongaは正規化無しがデフォ。英語は正規化した方がデータサイズ小さくなるよ</li>
<li>gqtpはこれから非推奨になるかも。</li>
<li>bigramとmecabのインデックスは同時に使える。インデックスをそれぞれ用意して、mecabの方を重み付けてやると吉</li>
</ul>


<h3>事例紹介の話</h3>

<ul>
<li>トークナイザとかカスタマイズしてるすげー！</li>
<li>トークナイザをカスタマイズすることで、検索時間を短縮することが出来る</li>
<li>英語の正規化は複数形とかを考えてくれない。</li>
<li>Groongaの機能全て使いたいから、insertとupdateはMroongaでそれ以外はGroongaを使う</li>
<li>Groongaメーリングリストは優しい人がいっぱい！積極的に質問していいと思う。</li>
</ul>


<p>勉強会が終わった後は懇親会に行ってきました。そこで@soundkitchenさんにDocker薦められたので、一回Docker触ってみようと思います。Groonga全然関係ないですね。楽しかったので終電ギリギリまで居ちゃいました。</p>

<p>Groongaは結構使っているんですが、使いこなしてはいないなと思い知らされる点がボコボコ出てくるとても有意義な勉強会でした。次回あればまた参加すると思います！ とりあえずこんな感じで。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Django1.6.5でPostgreSQLとBootstrap使ったアプリを作ってみた(2):Bootstrapを使ってみる]]></title>
    <link href="http://blog.shigepon.com/blog/2014/06/25/django-with-bootstrap/"/>
    <updated>2014-06-25T21:41:23+09:00</updated>
    <id>http://blog.shigepon.com/blog/2014/06/25/django-with-bootstrap</id>
    <content type="html"><![CDATA[<p>テンプレートにBootstrapを当てはめたいので、Bootstrap関連のパッケージを探してみた。ググってみて<a href="https://github.com/dyve/django-bootstrap-toolkit">django-bootstrap-toolkit</a>が良さそうかなと思ったので、使ってみた。</p>

<p>インストール</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>pip install django-bootstrap-toolkit
</span></code></pre></td></tr></table></div></figure>


<p>myproject/settings.pyのINSTALLED_APPSに以下を追加</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="s1">&#39;bootstrap-toolkit&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>テンプレートを書く</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>
</span><span class='line'>{% load bootstrap_toolkit %}} #bootstrap-toolkitを使うページ全てに必要っぽい
</span><span class='line'>...
</span><span class='line'><span class="nt">&lt;head&gt;</span>
</span><span class='line'>{% bootstrap_stylesheet_tag %}  #bootstrapのcssへのタグ(CDNから読み込み)
</span><span class='line'>{% bootstrap_stylesheet_tag &quot;responsive %} #bootstrapのレスポンシブページ用タグ(CDNから読み込み)
</span><span class='line'>{% bootstrap_javascript_tag %}  #bootstrapのjavascriptへのタグ(CDNから読み込み)
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;/head&gt;</span>
</span><span class='line'>あとは普通にbootstrapのタグを書く
</span></code></pre></td></tr></table></div></figure>


<p>こんな感じで最低限使える。フォームに関してはもっと色々出来るみたいだけど、まだやってない。パッケージ使ってみたけど、これだけなら普通にbootstrapのファイルを読み込めば済むんだけど、フォーム関連などフィルタやカスタムタグがあるみたい。便利そうなので、これを使うことにしよう。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[詳細ページを作る：DjangoでPostgreSQLとBootstrapを使ったアプリを作ってみた(2)]]></title>
    <link href="http://blog.shigepon.com/blog/2014/06/19/make-detail-page-using-django-2/"/>
    <updated>2014-06-19T17:58:11+09:00</updated>
    <id>http://blog.shigepon.com/blog/2014/06/19/make-detail-page-using-django-2</id>
    <content type="html"><![CDATA[<p>詳細ページを作って表示するには</p>

<ul>
<li>models.pyでモデルを作る</li>
<li>urls.pyを作る</li>
<li>views.pyでビューを作る</li>
<li>テンプレを作る</li>
<li>Webサーバーを立ち上げる</li>
<li>アクセスして確認</li>
</ul>


<p>くらいの手順が必要。</p>

<h2>models.pyでモデルを作る</h2>

<p>とりあえずおもむろにmodels.pyを編集。Railsの時と同様にテーブル名にeventを使う</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='py'><span class='line'><span class="kn">from</span> <span class="nn">django.db</span> <span class="kn">import</span> <span class="n">models</span>
</span><span class='line'>
</span><span class='line'><span class="c"># Create your models here.</span>
</span><span class='line'><span class="k">class</span> <span class="nc">Event</span><span class="p">(</span><span class="n">models</span><span class="o">.</span><span class="n">Model</span><span class="p">):</span>
</span><span class='line'>  <span class="n">name</span> <span class="o">=</span> <span class="n">models</span><span class="o">.</span><span class="n">CharField</span><span class="p">(</span><span class="n">max_length</span><span class="o">=</span><span class="mi">100</span><span class="p">)</span>
</span><span class='line'>  <span class="n">date</span> <span class="o">=</span> <span class="n">models</span><span class="o">.</span><span class="n">DateTimeField</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">class</span> <span class="nc">Meta</span><span class="p">:</span>
</span><span class='line'>      <span class="n">db_table</span> <span class="o">=</span> <span class="s">&#39;event&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>コマンドとか無くて、ソースで定義するのは個人的に性に合っている。Railsではモデルを修正したい時に、db/migrate以下のファイルを修正したり、app/models以下のファイルを修正したりで、情報がまとまってなくて困ったけど、Djangoの場合、models.pyを修正すれば事足りるっぽい。Metaクラスでdb_tableってのにテーブル名を指定してやると、指定したテーブル名を使用出来る。指定しない場合、bocho_eventってテーブルにアクセスするっぽい。</p>

<p>フィールドの種類として何が使えるかとかまだまだ勉強中だけど、CharFieldはとりあえず最大文字数(max_length)を指定する必要があることは分かった。指定したくない場合はTextField使えばいいのかな？</p>

<h2>urls.pyを作る</h2>

<p>Railsでのconfig/routes.rbに当たるのが、urls.py。myproject以下には自動で出来るけど、作ったアプリ（今回はbocho）以下には用意されないので、自分で作って編集する。urlのルーティングは、まずmyproject側で行って、その後、必要な場合にアプリ側のルーティングが行われる。events/show/1でid=1のデータを表示する場合、</p>

<p>myproject/urls.pyは</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='py'><span class='line'><span class="n">urlpatterns</span> <span class="o">=</span> <span class="n">patterns</span><span class="p">(</span><span class="s">&#39;&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="n">url</span><span class="p">(</span><span class="s">r&#39;^events/&#39;</span><span class="p">,</span> <span class="n">include</span><span class="p">(</span><span class="s">&#39;bocho.urls&#39;</span><span class="p">,</span><span class="n">namespace</span><span class="o">=</span><span class="s">&#39;bocho&#39;</span><span class="p">)),</span>
</span><span class='line'><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>と書いて、bocho/urls.pyを</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='py'><span class='line'><span class="n">urlpatterns</span> <span class="o">=</span> <span class="n">patterns</span><span class="p">(</span><span class="s">&#39;&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="n">url</span><span class="p">(</span><span class="s">r&#39;^show/(\d+)/$&#39;</span><span class="p">,</span> <span class="n">views</span><span class="o">.</span><span class="n">detail</span><span class="p">,</span> <span class="n">name</span><span class="o">=</span><span class="s">&quot;detail&quot;</span><span class="p">),</span>
</span><span class='line'><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>と書くと、良さげな感じがする。書き方は色々あると思うけど（myproject側をr&#8217;&lsquo;みたいにして、bocho側にパターンを全て書いておくとかなんとか）。正規表現の()内はメソッドにパラメータとして渡される。rhacoもそうなので取っ付きやすい。</p>

<p>nameとかnamespaceはviews.pyやテンプレートなどでurlを生成する時に用いる。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='py'><span class='line'><span class="p">{</span><span class="o">%</span> <span class="n">url</span> <span class="s">&#39;bocho:detail&#39;</span> <span class="mi">1</span> <span class="o">%</span><span class="p">}</span> <span class="c">#テンプレート内</span>
</span><span class='line'><span class="n">reverse</span><span class="p">(</span><span class="s">&#39;bocho:detail&#39;</span><span class="p">,</span><span class="n">args</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span> <span class="c">#views内</span>
</span></code></pre></td></tr></table></div></figure>


<p>Railsだと、こういうのどうしたら良いか分からなくて困った。</p>

<h2>views.pyでビューを作る</h2>

<p>ビューはbocho/views.pyを編集すればおk。詳細表示の場合こんな感じ</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='py'><span class='line'><span class="c"># coding: utf-8</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">django.shortcuts</span> <span class="kn">import</span> <span class="n">render</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">bocho.models</span> <span class="kn">import</span> <span class="n">Event</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">detail</span><span class="p">(</span><span class="n">request</span><span class="p">,</span><span class="n">event_id</span><span class="p">):</span>
</span><span class='line'>  <span class="n">event</span> <span class="o">=</span> <span class="n">Event</span><span class="o">.</span><span class="n">objects</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="nb">id</span><span class="o">=</span><span class="n">event_id</span><span class="p">)</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">render</span><span class="p">(</span><span class="n">request</span><span class="p">,</span><span class="s">&#39;event/detail.html&#39;</span><span class="p">,{</span><span class="s">&#39;object&#39;</span><span class="p">:</span><span class="n">event</span><span class="p">})</span>
</span></code></pre></td></tr></table></div></figure>


<p>※　coding: utf-8ってのはpython3では要らないらしい。
modelは先にインポートする。表示に使うテンプレートと変数はview内で指定する。getとかallとかDBにアクセスするためのメソッドはこれから勉強が要るけど、要はDAOなので、それほど苦にはならないっしょ。</p>

<h2>テンプレを作る</h2>

<p>テンプレを作る前にテンプレのパスに関する設定をする。myproject/settings.pyに次の行を追加</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='py'><span class='line'><span class="n">INSTALLED_APPS</span> <span class="o">=</span> <span class="p">(</span>
</span><span class='line'><span class="o">....</span>
</span><span class='line'><span class="s">&#39;bocho&#39;</span><span class="p">,</span>
</span><span class='line'><span class="p">)</span>
</span><span class='line'><span class="n">TEMPLATE_DIRS</span> <span class="o">=</span> <span class="p">[</span><span class="n">os</span><span class="o">.</span><span class="n">path</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">BASE_DIR</span><span class="p">,</span> <span class="s">&#39;templates&#39;</span><span class="p">)]</span>
</span></code></pre></td></tr></table></div></figure>


<p>こうしておくと、bochoアプリのテンプレはbocho/templates/以下を参照し、さらにファイルが無い場合はtemplates/以下も調べる。上のように&#8217;event/detail.html&#8217;と指定した場合は、bocho/templates/event/detail.htmlを参照する。</p>

<p>設定出来たので、bocho/templates/event/detail.htmlを以下のように書く</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;html&gt;</span>
</span><span class='line'><span class="nt">&lt;body&gt;</span>
</span><span class='line'><span class="nt">&lt;h1&gt;</span>詳細画面<span class="nt">&lt;/h1&gt;</span>
</span><span class='line'><span class="nt">&lt;dl&gt;</span>
</span><span class='line'>  <span class="nt">&lt;dt&gt;</span><span class="nt">&lt;/dt&gt;</span>
</span><span class='line'>  <span class="nt">&lt;dd&gt;</span><span class="nt">&lt;/dd&gt;</span>
</span><span class='line'><span class="nt">&lt;/dl&gt;</span>
</span><span class='line'><span class="nt">&lt;/body&gt;</span>
</span><span class='line'><span class="nt">&lt;/html&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>フォーマットの方法とか良く分からないので、勉強が必要。dateはこの方法で良さそうだけど、他の場合どうなるんだろ？</p>

<h2>Webサーバーを立ち上げる</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>$ python manage.py runserver xxx.xxx.xx.xx:xxxx
</span></code></pre></td></tr></table></div></figure>


<p>xの部分にIPとポートを入れれば指定したIP、ポートで表示出来る。設定しない場合は知らない。どっかググれば書いてあるはず。あとはxxx.xxx.xx.xx:xxxxにブラウザでアクセスするとページを確認出来るようになる</p>

<p>最初に作る時のコード量はRailsより多いけど、大したことはない。それより、フォルダとファイル構成が分かりやすいので、どこ修正したら良いか分からないなんてことも無いし、Railsより修正がやりやすい気がする。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ubuntu12.04でjenkinsのインストールと設定]]></title>
    <link href="http://blog.shigepon.com/blog/2014/06/18/jenkins-setting/"/>
    <updated>2014-06-18T15:08:25+09:00</updated>
    <id>http://blog.shigepon.com/blog/2014/06/18/jenkins-setting</id>
    <content type="html"><![CDATA[<p><a href="http://jnst.hateblo.jp/entry/2013/10/03/123012">Ubuntu 12.04 LTS に Jenkins をインストール &ndash; MELODIC-X</a>を参考にして設定した。
Jenkins本体でアップグレード可能らしいので、aptitudeでインストール</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>sudo aptitude install jenkins
</span></code></pre></td></tr></table></div></figure>


<h2>Nginx設定</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>location /jenkins <span class="o">{</span>
</span><span class='line'>  proxy_pass http://127.0.0.1:8080;
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>で、nginxは起動してたので再読み込み</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>sudo service nginx reload
</span></code></pre></td></tr></table></div></figure>


<h2>Jenkins設定ファイル修正</h2>

<p>jenkinsの設定ファイルは/etc/default/jenkinsにあるので編集
最下行の起動パラメーターに</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>--prefix<span class="o">=</span>/jenkins
</span></code></pre></td></tr></table></div></figure>


<p>を追加。jenkins再起動</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>sudo service jenkins restart
</span></code></pre></td></tr></table></div></figure>


<p>以上</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Django1.6.5でPostgreSQLとBootstrap使ったアプリを作ってみた(1):とりあえずDjangoプロジェクトとアプリを作ってみた]]></title>
    <link href="http://blog.shigepon.com/blog/2014/06/18/start-django-project/"/>
    <updated>2014-06-18T12:49:29+09:00</updated>
    <id>http://blog.shigepon.com/blog/2014/06/18/start-django-project</id>
    <content type="html"><![CDATA[<p>Djangoはプロジェクトを作っておいて、アプリ毎に細かく機能を分けて、プロジェクトで統合するみたいな形式を取るみたい。なのでまずはDjangoプロジェクトを作成</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>django-admin.py startproject myproject
</span></code></pre></td></tr></table></div></figure>


<p>とすると、カレントフォルダにmyprojectフォルダが出来る。ファイル構成を見ると、</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>myproject/
</span><span class='line'>  manage.py
</span><span class='line'>  myproject/
</span><span class='line'>    __init__.py
</span><span class='line'>    settings.py
</span><span class='line'>    urls.py
</span><span class='line'>    wsgi.py
</span></code></pre></td></tr></table></div></figure>


<p>となっている。myprojectフォルダ内のファイルに共通設定を書くという感じになりそうだ。PostgreSQLに接続するので、settings.pyを修正</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='py'><span class='line'><span class="n">DATABASES</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>    <span class="s">&#39;default&#39;</span><span class="p">:</span> <span class="p">{</span>
</span><span class='line'>  <span class="s">&#39;ENGINE&#39;</span><span class="p">:</span> <span class="s">&#39;django.db.backends.postgresql_psycopg2&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="s">&#39;NAME&#39;</span><span class="p">:</span> <span class="s">&#39;hoge&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="s">&#39;USER&#39;</span><span class="p">:</span> <span class="s">&#39;username&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="s">&#39;PASSWORD&#39;</span><span class="p">:</span> <span class="s">&#39;******&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="s">&#39;HOST&#39;</span><span class="p">:</span> <span class="s">&#39;hostname or ip&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="s">&#39;PORT&#39;</span><span class="p">:</span> <span class="s">&#39;5432&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>あと、psycopg2をインストールしていないので</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>sudo pip install psycopg2
</span></code></pre></td></tr></table></div></figure>


<p>とやって</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span><span class="nb">cd </span>myproject
</span><span class='line'><span class="nv">$ </span>python manage.py syncdb
</span></code></pre></td></tr></table></div></figure>


<p>とやると、hogeに色々テーブルが出来る。INSTALLED_APPSに書いてあるアプリに関するテーブルみたい。初期状態では以下のアプリが入るみたい。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>django.contrib.admin - 管理用サイト
</span><span class='line'>django.contrib.auth - 認証
</span><span class='line'>django.contrib.contenttypes - ??
</span><span class='line'>django.contrib.sessions - セッション管理
</span><span class='line'>django.contrib.messages - ??
</span><span class='line'>django.contrib.staticfile - 静的ファイル用アプリ
</span></code></pre></td></tr></table></div></figure>


<p>テーブルは以下のものが作られた</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>auth_group
</span><span class='line'>auth_group_permissions
</span><span class='line'>auth_permission
</span><span class='line'>auth_user
</span><span class='line'>auth_user_groups
</span><span class='line'>auth_user_user_permissions
</span><span class='line'>django_admin_log
</span><span class='line'>django_content_type
</span><span class='line'>django_session
</span></code></pre></td></tr></table></div></figure>


<p>あと上のコマンド実行時に、管理者ユーザー作るかどうか聞かれる。とりあえず作った。</p>

<p>DB設定済ませたので、おもむろにアプリ作成。Railsの時と同様に傍聴情報の出力をやってみるか。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>python manage.py startapp bocho
</span></code></pre></td></tr></table></div></figure>


<p>を実行するとbochoフォルダが出来てその中に</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>bocho/
</span><span class='line'>  __init__.py
</span><span class='line'>  admin.py
</span><span class='line'>  models.py
</span><span class='line'>  tests.py
</span><span class='line'>  views.py
</span></code></pre></td></tr></table></div></figure>


<p>が出来た。とりあえずここまで。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ubuntu 12.04でDjangoを始める]]></title>
    <link href="http://blog.shigepon.com/blog/2014/06/18/start-django-on-ubuntu-12-dot-04/"/>
    <updated>2014-06-18T08:06:49+09:00</updated>
    <id>http://blog.shigepon.com/blog/2014/06/18/start-django-on-ubuntu-12-dot-04</id>
    <content type="html"><![CDATA[<p>ヘタレなことにRailsに挫折してしまったので、Railsと同様良く名前が出てくるDjangoを試してみることにする。Djangoを使うにはpythonとかpipとか入れておくといいらしい。</p>

<p>どれもとりあえずaptitudeでインストール出来るので、おもむろに</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>sudo aptitude install python,python-pip
</span></code></pre></td></tr></table></div></figure>


<p>でインストール。python2.7がインストール出来た。一応aptitude updateくらいしておいたら良いと思う。</p>

<p>んで、Djangoはpipでインストール</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>sudo pip install <span class="nv">Django</span><span class="o">==</span>1.6.5
</span></code></pre></td></tr></table></div></figure>


<p>でDjango 1.6.5をインストール出来た。python、pipはもうちょっと違うインストール方法があると思うけど、今回はこうしてみた。簡単。</p>

<p>で、次はチュートリアル進めるんだろうけど、チュートリアルは結構内容が多そうなので、必要な部分だけ取り出しながらやってみる。「データベースにすでに登録してあるデータをDjangoとBootstrapでWebサービスっぽく表示する」という方針で必要な箇所を進めていく。なのでadminとかそこらへんはすっ飛ばす予定。</p>

<p>&mdash; 7/2追記</p>

<p>Djangoのインストール前にvirtualenvという仮想環境を入れて、その中でDjango入れた方がいいみたい。</p>

<h3>virtualenvのインストール</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>sudo pip install virtualenv
</span></code></pre></td></tr></table></div></figure>


<h3>virtualenvで仮想環境構築</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>virtualenv hoge
</span></code></pre></td></tr></table></div></figure>


<p>とすると、カレントディレクトリにhogeというディレクトリが出来て、その中に仮想環境が入る。オプションでpythonのバージョン指定とかも出来るみたいだけど、今回はしない。</p>

<h3>virtualenvで作った仮想環境を使う</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span><span class="nb">source </span>hoge/bin/activate
</span></code></pre></td></tr></table></div></figure>


<p>で使うことが出来る。ここでDjangoのインストールとかやっておくと良いみたい</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ubuntuでaptitude installした時にinitramfs-toolsのエラーが出た]]></title>
    <link href="http://blog.shigepon.com/blog/2014/06/08/ubuntu-aptitude-error-in-initramfs-tools/"/>
    <updated>2014-06-08T21:41:18+09:00</updated>
    <id>http://blog.shigepon.com/blog/2014/06/08/ubuntu-aptitude-error-in-initramfs-tools</id>
    <content type="html"><![CDATA[<p>virtualboxをインストールしようとしたら</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>以下のパッケージの処理中にエラーが発生しました:
</span><span class='line'> initramfs-tools
</span><span class='line'>E: Sub-process /usr/bin/dpkg returned an error code <span class="o">(</span>1<span class="o">)</span>
</span><span class='line'>パッケージをインストールできませんでした。復旧を試みています:
</span><span class='line'>initramfs-tools <span class="o">(</span>0.99ubuntu13.5<span class="o">)</span> を設定しています ...
</span><span class='line'>update-initramfs: deferring update <span class="o">(</span>trigger activated<span class="o">)</span>
</span><span class='line'>initramfs-tools のトリガを処理しています ...
</span><span class='line'>update-initramfs: Generating /boot/initrd.img-3.2.0-53-generic
</span><span class='line'>
</span><span class='line'>gzip: stdout: No space left on device
</span><span class='line'>cpio: 書き込みエラー: Broken pipe
</span><span class='line'>E: mkinitramfs failure cpio 1 gzip 1
</span><span class='line'>update-initramfs: failed <span class="k">for</span> /boot/initrd.img-3.2.0-53-generic with 1.
</span><span class='line'>dpkg: initramfs-tools の処理中にエラーが発生しました <span class="o">(</span>--configure<span class="o">)</span>:
</span><span class='line'> サブプロセス インストール済みの post-installation スクリプト はエラー終了ステータス 1 を返しました
</span><span class='line'>以下のパッケージの処理中にエラーが発生しました:
</span><span class='line'> initramfs-tools
</span></code></pre></td></tr></table></div></figure>


<p>みたいなエラーが出た。どうも/bootが一杯になってると出るらしい。
<a href="http://www.cagylogic.com/archives/2012/11/04150426.php">/bootがあふれてapt-get upgradeが失敗したでござる | cagylogic</a>を参考にして削除することにした。ただ、普通にapt-get purgeとかapt-get removeしても結局エラーメッセージはなぜか出たまま。</p>

<p>で、さらにググって<a href="http://tatuas.hatenablog.com/entry/2013/08/22/015141">Ubuntuでboot容量不足という警告の対処法 &ndash; Tatuas Blog</a>のように</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>sudo apt-get remove linux-image-xxxx
</span><span class='line'><span class="nv">$ </span>sudo apt-get autoremove
</span></code></pre></td></tr></table></div></figure>


<p>とすると、上手く消すことが出来た</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[phpenvとphp-buildを使って適当なバージョンのphpをビルドする]]></title>
    <link href="http://blog.shigepon.com/blog/2014/06/07/build-php-with-phpenv/"/>
    <updated>2014-06-07T00:42:03+09:00</updated>
    <id>http://blog.shigepon.com/blog/2014/06/07/build-php-with-phpenv</id>
    <content type="html"><![CDATA[<p>基本は<a href="http://d.hatena.ne.jp/hnw/20130626">php-buildで複数バージョンのPHP-FPMを用意する &ndash; hnwの日記</a>を参考にして進める</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>curl https://raw.github.com/CHH/phpenv/master/bin/phpenv-install.sh | bash
</span></code></pre></td></tr></table></div></figure>


<p>これが何故か上手くいかなかったので</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>wget https://raw.github.com/CHH/phpenv/master/bin/phpenv-install.sh
</span><span class='line'><span class="nv">$ </span>chmod +x phpenv-install.sh
</span><span class='line'><span class="nv">$ </span>./phpenv-install.sh
</span></code></pre></td></tr></table></div></figure>


<p>こうやった。コマンド終了時のメッセージに従って.zshrcを変更して反映。
php-buildのインストールは下のような感じ</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>git clone git://github.com/CHH/php-build.git ~/.phpenv/plugins/php-build
</span></code></pre></td></tr></table></div></figure>


<p>で、おもむろにphpをインストール</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>phpenv install 5.5.5
</span></code></pre></td></tr></table></div></figure>


<p>とかやると出るわ出るわエラーが出るわ。どうもビルド用のライブラリやヘッダファイルみたいなのが何かと足りないみたいで色々出て来た。出るメッセージは人によって違うと思うので、入れるライブラリの一覧より、ライブラリが無い場合の対処法を書いておく。ubuntuにはapt-fileというアプリ？があって、これを使うとライブラリをインストールした時にインストールされるファイル名で検索することが出来る。</p>

<p>例えば「configure: error: mcrypt.h not found. Please reinstall libmcrypt.」みたいなエラーが出た場合、</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>apt-file search mcrypt.h
</span><span class='line'>libmcrypt-dev: /usr/include/mcrypt.h
</span><span class='line'>libmcrypt-dev: /usr/include/mutils/mcrypt.h
</span><span class='line'>libtomcrypt-dev: /usr/include/tomcrypt.h
</span><span class='line'>php-doc: /usr/share/doc/php-doc/html/book.mcrypt.html
</span><span class='line'>php-doc: /usr/share/doc/php-doc/html/intro.mcrypt.html
</span><span class='line'>php-doc: /usr/share/doc/php-doc/html/ref.mcrypt.html
</span></code></pre></td></tr></table></div></figure>


<p>みたいにすると、mcrypt.hを含むライブラリとインストール箇所が表示されるので、これを見ながらインストールするライブラリを選んだ（この場合だとlibmcrypt-devをインストールした）</p>

<p>これを地道に何度か繰り返して何とかビルド出来た。rbenvに比べると面倒だった。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Railsやりにくいから挫折しそうという話]]></title>
    <link href="http://blog.shigepon.com/blog/2014/06/06/difficult-to-use-rails/"/>
    <updated>2014-06-06T10:38:10+09:00</updated>
    <id>http://blog.shigepon.com/blog/2014/06/06/difficult-to-use-rails</id>
    <content type="html"><![CDATA[<p>今までphpの<a href="http://rhaco.org">rhaco</a>というドマイナーなフレームワークを使ってきてたので、メジャーなフレームワークでも使ってみるかー。ついでにrubyの練習にもなるかーと思ってRails4をはじめたんだけど、なんかこー色々自分の開発方法に合ってないような気がするので挫折する。</p>

<p>使いにくいなと思った点はメリットとの二律背反の部分もあるんだけど、次のような感じ</p>

<ul>
<li>モデルをコマンドで作ると、テーブル名が勝手に複数形になる</li>
<li>viewでurl表示させたりするのが面倒。きっとやり方知らないだけだろうけど。</li>
<li>コマンドありきで作っていくので、手作業でどこまで修正して良いか分からない</li>
<li>どんな流れで処理が進むのかさっぱり分からない（フレームワークが大きすぎるから？）。本読めって話だろうけど・・・なー(めんどい)。</li>
<li>分からない時に聞く相手が居ない</li>
<li>バージョンによってやり方が結構変わるみたいで、ググってもそれが正しい手法か分からない時がある（これはrhacoも同じだからrhacoにも何とかして欲しいとこではある）</li>
<li>Capistrano+nginx+unicornで結構ハマってそれだけで挫折しそうになった。未だにちゃんとunicornをリロード出来ない。</li>
<li>メジャーなフレームワークのはずなのに、ちょこちょこバッドノウハウない？違う？</li>
<li>SassやCoffeeScriptがデフォみたいなのがやだ</li>
<li>いちいちgemファイルでほにゃららしないと上手く動かない？Bootstrapとか。そしてgemがあるかどうかをいちいちググって探さないといけない。</li>
</ul>


<p>なんとなくだけどRailsって先に設計とかかっちりやってから作るってやり方な感じがして、「大雑把に作って、そこから細部をつめていく」みたいなやり方には合ってないんじゃないかと思った。個人でサクサクっとWebサービス作りたい場合には大雑把にまず作りたいんだよなー。</p>

<p>見当違いかもしれないけどね。とりあえず他を当たってみる？メジャーどころでDjango？同じように挫折するかもしれないけどとりあえず試してみよう。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rails memo]]></title>
    <link href="http://blog.shigepon.com/blog/2014/05/29/rails-memo/"/>
    <updated>2014-05-29T08:54:12+09:00</updated>
    <id>http://blog.shigepon.com/blog/2014/05/29/rails-memo</id>
    <content type="html"><![CDATA[<p>Rails関係でいつでも確認出来るようにメモ。</p>

<h2>ルーティングでのパラメータの使い方</h2>

<p>config/route.rbを編集する</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'> <span class="n">get</span> <span class="s2">&quot;main/index/:hoge&quot;</span> <span class="o">=&gt;</span> <span class="s2">&quot;main#index&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>app/controllers/main_controller.rbを編集</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="k">class</span> <span class="nc">MainController</span> <span class="o">&lt;</span> <span class="no">ApplicationController</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">index</span>
</span><span class='line'>    <span class="vi">@hoge</span> <span class="o">=</span> <span class="n">params</span><span class="o">[</span><span class="ss">:hoge</span><span class="o">]</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>と書いておくとrouteで設定したパラメーターにアクセス出来る。</p>

<h2>ルーティング中でURLの一部を省略可能にする</h2>

<p>config/route.rbを編集する</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'> <span class="n">get</span> <span class="s2">&quot;main/index/:hoge(/fuga/:hage)&quot;</span> <span class="o">=&gt;</span> <span class="s2">&quot;main#index&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>とやっておくと、main/index/1/fuga/2でもアクセス出来るし、main/index/1でもアクセス出来るようになる</p>

<h2>ルーティング時にパラメーターの初期値を設定する</h2>

<p>config/route.rbを編集する</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'> <span class="n">get</span> <span class="s2">&quot;main/index/:hoge(/fuga/:hage)&quot;</span> <span class="o">=&gt;</span> <span class="s2">&quot;main#index&quot;</span><span class="p">,</span><span class="ss">:defaults</span><span class="o">=&gt;</span><span class="p">{</span><span class="ss">:hage</span><span class="o">=&gt;</span><span class="mi">3</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>と設定しておくと、app/controllers/main_controller.rb中のparams[:hage]の初期値として3を入れることが出来る。</p>

<h2>Dateクラスの使い方メモ</h2>

<p>個人的に文字列からDateクラスにして、1年前にするとか1ヶ月前にするとかそういう作業をすることが多いのでメモ</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'>  <span class="n">d</span> <span class="o">=</span> <span class="no">Date</span><span class="o">.</span><span class="n">strptime</span><span class="p">(</span><span class="s2">&quot;2014-05-24&quot;</span><span class="p">,</span><span class="s2">&quot;%Y-%m-%d&quot;</span><span class="p">)</span><span class="o">.</span><span class="n">prev_year</span> <span class="c1">#1年前に指定</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[find by sqlでプリペアードステートメントを使う]]></title>
    <link href="http://blog.shigepon.com/blog/2014/05/28/use-prepared-statement-in-find-by-sql/"/>
    <updated>2014-05-28T08:19:12+09:00</updated>
    <id>http://blog.shigepon.com/blog/2014/05/28/use-prepared-statement-in-find-by-sql</id>
    <content type="html"><![CDATA[<p>ActiveRecordは便利なのかどうか知らないけど、allなどのメソッドで:conditionとかで?を使うことが出来る。だけど、sqlを直接打ちたいケースは必ず出てくるので、その時に?使いたいなと思ったけど、なかなか例文が無かった。</p>

<p>んで結局こうするといいみたい。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="vi">@results</span> <span class="o">=</span> <span class="no">Model</span><span class="o">.</span><span class="n">find_by_sql</span><span class="p">(</span><span class="o">[</span><span class="s2">&quot;select * from hoge where fuga=?&quot;</span><span class="p">,</span><span class="s2">&quot;hage&quot;</span><span class="o">]</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>しかし他にも直接sqlを実行する方法があって、</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="ss">ActiveRecord</span><span class="p">:</span><span class="ss">:Base</span><span class="o">.</span><span class="n">connection</span><span class="o">.</span><span class="n">raw_connection</span><span class="o">.</span><span class="n">exec</span><span class="p">(</span><span class="s2">&quot;select * from hoge where fuga = :1&quot;</span><span class="p">,</span> <span class="s1">&#39;hage&#39;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>こんな書き方も出来るらしい。ActiveRecord::Base.connectionでは無理らしい。うーむ。むか〜しからRailsはちょっとレールからはずれるととたんに難しくなるんだなー。やる気が減って来た＞＜。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ubuntuでodbcを用いてpostgresqlにアクセスする]]></title>
    <link href="http://blog.shigepon.com/blog/2014/05/12/access-postgresql-through-odbc-ubuntu/"/>
    <updated>2014-05-12T22:11:33+09:00</updated>
    <id>http://blog.shigepon.com/blog/2014/05/12/access-postgresql-through-odbc-ubuntu</id>
    <content type="html"><![CDATA[<p>なでしこ2のテストのためにubuntuにodbcドライバをインストールしたりしたのでメモ</p>

<h2>odbcドライバのインストール</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>sudo aptitude install unixodbc, odbc-postgresql
</span><span class='line'><span class="nv">$ </span>sudo odbcinst -i -d -f /usr/share/psqlodbc/odbcinst.ini.template
</span><span class='line'><span class="nv">$ </span>sudo odbcinst -i -s -l  -n adyoung-pg -f /usr/share/doc/odbc-postgresql/examples/odbc.ini.template
</span><span class='line'><span class="nv">$ </span>vim /etc/odbc.ini
</span></code></pre></td></tr></table></div></figure>


<p>odbc.iniにはサンプルの設定が入っているので、それを参考にしながら設定</p>

<h2>odbcアクセスしてみる</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>isql -v DSN <span class="o">(</span>UID <span class="o">(</span>PWD<span class="o">))</span>
</span></code></pre></td></tr></table></div></figure>


<p>でアクセスできる。あとはSQLを入力すれば結果を見たりできる。</p>

<h2>monoを使ってアクセスする場合</h2>

<p>monoというかなでしこ2でアクセスする場合に必要だった。libodbc.soが必要というエラーが出るのでunixodbc-devの追加インストールが必要。インストールすればエラー出ずに動くようになる。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Railsでurl forを使ったらshows proxy passで設定したURLになってしまう件]]></title>
    <link href="http://blog.shigepon.com/blog/2014/05/05/rails-url-for-shows-proxy-pass/"/>
    <updated>2014-05-05T14:00:54+09:00</updated>
    <id>http://blog.shigepon.com/blog/2014/05/05/rails-url-for-shows-proxy-pass</id>
    <content type="html"><![CDATA[<p>Nginx, Unicorn, Rails4でurl_forを使ったら変なURLになってしまったので対処法を書いておく</p>

<p>Ninxで</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>server hoge.com;
</span><span class='line'>proxy_pass http://upstream;</span></code></pre></td></tr></table></div></figure>


<p>のような設定をしているとurl_forで</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>http://hoge.com</span></code></pre></td></tr></table></div></figure>


<p>となってほしいところが</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>http://upstream</span></code></pre></td></tr></table></div></figure>


<p>となってしまうので、ググって対処を調べた。</p>

<p><a href="http://stackoverflow.com/questions/5834025/how-to-preserve-request-url-with-nginx-proxy-pass">ruby &ndash; How to preserve request url with nginx proxy_pass &ndash; Stack Overflow</a>を参考にして</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>proxy_set_header Host http://hoge.com</span></code></pre></td></tr></table></div></figure>


<p>を追記したら上手く動いた。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rails4でJSONを出力する]]></title>
    <link href="http://blog.shigepon.com/blog/2014/05/05/output-json-by-rails4/"/>
    <updated>2014-05-05T10:33:26+09:00</updated>
    <id>http://blog.shigepon.com/blog/2014/05/05/output-json-by-rails4</id>
    <content type="html"><![CDATA[<p>Rails4にはjbuilderが標準で入っていて、viewを設定するだけでJSON出力が可能ならしい。
 例えば<a href="http://blog.shigepon.com/blog/2014/03/10/a-way-of-creating-rails-application3/">Rails4でPostgreSQLとBootstrap使ったアプリを作ってみた(3):データ一覧ページを作って、詳細ページへのリンクを貼る &ndash; shigeponが関心のある技術情報など</a>のページをとりあえずjsonで出力するにはapp/views/events/index.json.jbuilderを用意するだけでOK。<a href="http://0.0.0.0:3000/events/index.json">http://0.0.0.0:3000/events/index.json</a> にアクセスするとJSONで表示してくれる。なんと楽チンな！
 JSONの出力形式を変更する場合はindex.json.jbuilderを編集する</p>

<p>例えばこんな感じ</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="n">json</span><span class="o">.</span><span class="n">array!</span><span class="p">(</span><span class="vi">@events</span><span class="p">)</span> <span class="k">do</span> <span class="o">|</span><span class="n">item</span><span class="o">|</span>
</span><span class='line'>  <span class="n">json</span><span class="o">.</span><span class="n">name</span>  <span class="n">item</span><span class="o">.</span><span class="n">name</span>
</span><span class='line'>  <span class="n">json</span><span class="o">.</span><span class="n">date</span>  <span class="n">item</span><span class="o">.</span><span class="n">date</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>例えばこうしておくと一覧を配列出力しつつ、出力したいフィールドを指定出来る。viewだけで操作出来るのは楽チンだわ。
 詳しい書式はブログ等の記事を見るよりも、英語だけど<a href="https://github.com/rails/jbuilder">rails/jbuilder · GitHub</a>を見るとよさげ。</p>

<h2>jbuilderでネストした配列を出力する</h2>

<p>大抵の説明では一番外側が配列で、中身はハッシュというものばかりで、配列の中が配列という形での出力方法の説明が無かったのでメモ</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="p">[[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">],[</span><span class="mi">2</span><span class="p">,</span><span class="mi">2</span><span class="p">],[</span><span class="mi">3</span><span class="p">,</span><span class="mi">1</span><span class="p">]]</span>
</span></code></pre></td></tr></table></div></figure>


<p>みたいなjsonを出力する場合</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="n">json</span><span class="o">.</span><span class="n">array!</span><span class="p">(</span><span class="vi">@events</span><span class="p">)</span> <span class="k">do</span> <span class="o">|</span><span class="n">item</span><span class="o">|</span>
</span><span class='line'>  <span class="n">json</span><span class="o">.</span><span class="n">array!</span><span class="p">(</span><span class="o">[</span><span class="n">item</span><span class="o">.</span><span class="n">x</span><span class="o">.</span><span class="n">to_i</span><span class="p">,</span><span class="n">item</span><span class="o">.</span><span class="n">y</span><span class="o">.</span><span class="n">to_i</span><span class="o">]</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>という指定をする。</p>
]]></content>
  </entry>
  
</feed>
