<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>shigeponが関心のある技術情報など - memo</title><link href="http://blog.shigepon.info/" rel="alternate"></link><link href="http://blog.shigepon.info/feeds/memo.atom.xml" rel="self"></link><id>http://blog.shigepon.info/</id><updated>2018-09-27T16:30:00+09:00</updated><entry><title>pythonメモ</title><link href="http://blog.shigepon.info/blog/2018/09/15/python_memo/" rel="alternate"></link><published>2018-09-15T22:30:00+09:00</published><updated>2018-09-15T22:30:00+09:00</updated><author><name>thoz</name></author><id>tag:blog.shigepon.info,2018-09-15:/blog/2018/09/15/python_memo/</id><summary type="html">&lt;p&gt;pythonでググることになった使い方をメモしておく&lt;/p&gt;</summary><content type="html">&lt;h2&gt;pyenvをUbuntuにインストール&lt;/h2&gt;
&lt;p&gt;なんか色々依存関係があるので、先にこれを実行&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo apt-get install -y make build-essential libssl-dev zlib1g-dev libbz2-dev &lt;span class="se"&gt;\&lt;/span&gt;
libreadline-dev libsqlite3-dev wget curl llvm libncurses5-dev libncursesw5-dev &lt;span class="se"&gt;\&lt;/span&gt;
xz-utils tk-dev
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;githubからpyenvをダウンロード&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ git clone https://github.com/yyuu/pyenv.git ~/.pyenv
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;設定&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;export PYENV_ROOT=$HOME/.pyenv
export PATH=$PYENV_ROOT/bin:$PATH
eval &amp;quot;$(pyenv init -)&amp;quot;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;pythonインストール(3.6.0をインストール)&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ pyenv install &lt;span class="m"&gt;3&lt;/span&gt;.6.0
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;globalきりかえ&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ pyenv global &lt;span class="m"&gt;3&lt;/span&gt;.6.0
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;参考：
+ &lt;a href="https://github.com/pyenv/pyenv/wiki/Common-build-problems"&gt;Common build problems&lt;/a&gt;
+ &lt;a href="https://qiita.com/mogom625/items/b1b673f530a05ec6b423"&gt;Pyenvの使い方&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;max() arg is an empty sequence&lt;/h2&gt;
&lt;p&gt;Python3.4からdefault引数が使える&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; max([], default=100)
100
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;参考：&lt;a href="https://stackoverflow.com/questions/36157995/a-safe-max-function-for-empty-lists"&gt;A safe max() function for empty lists&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;pythonとteeコマンドを組み合わせて出力を画面で見ながらファイルにも書き出す&lt;/h2&gt;
&lt;p&gt;pythonは-uオプションを使うと良い&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ python -u hoge.py &lt;span class="p"&gt;|&lt;/span&gt; tee hoge.log
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;追記なら&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ python -u hoge.py &lt;span class="p"&gt;|&lt;/span&gt; tee -a hoge.log
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;参考：
&lt;a href="http://nucl.hatenablog.com/entry/2016/10/28/223754"&gt;Python3 と tee コマンドを組み合わせたときにハマった&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;文字列を反転する&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="s s-Atom"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="s s-Atom"&gt;hoge&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s s-Atom"&gt;&amp;#39;abc&amp;#39;&lt;/span&gt;
&lt;span class="s s-Atom"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="s s-Atom"&gt;hoge&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s s-Atom"&gt;::-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="s s-Atom"&gt;cba&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;参考：
&lt;a href="http://d.hatena.ne.jp/redcat_prog/20111104/1320395840"&gt;Python で文字列反転 - 似非プログラマの覚え書き&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;リストの注意点&lt;/h2&gt;
&lt;p&gt;参照渡しされること。
値渡しするにはスライスかディープコピーしないといけない。
スライスで良さそう。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; hoge = [1,2,3]
&amp;gt;&amp;gt;&amp;gt; fuga = hoge[:]
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;参照：&lt;a href="https://qiita.com/utgwkk/items/5ad2527f19150ae33322"&gt;Python のリストの扱いで注意すること - Qiita&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;リストを日付でソート&lt;/h2&gt;
&lt;p&gt;参考： &lt;a href="http://akiyoko.hatenablog.jp/entry/2014/09/26/235300"&gt;Python でリストのソートまとめ - akiyoko blog&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;lambda式とか使える。日付の入った要素があったりして、日付でソートしたい場合は&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;datetime&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;datetime&lt;/span&gt;
&lt;span class="n"&gt;not_sort_list&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;id&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;date&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2017&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)},&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;id&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;date&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2017&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;19&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)},&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;id&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;date&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2017&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;29&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)},&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;id&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;date&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2017&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;19&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)}&lt;/span&gt;
&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;sorted_list&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;sorted&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;not_sort_list&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="k"&gt;lambda&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;date&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;timestamp&lt;/span&gt;&lt;span class="p"&gt;()))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;これで日付順でソートできる&lt;/p&gt;
&lt;p&gt;※　python3&lt;/p&gt;
&lt;h2&gt;データをJSONファイルで保存する&lt;/h2&gt;
&lt;p&gt;json.dumps()でいけるが、要素にdatetimeなどが入っているとjson化してくれないのでちょっと手間が必要&lt;/p&gt;
&lt;p&gt;参考：
+ &lt;a href="http://gihyo.jp/dev/serial/01/pythonhacks/0011"&gt;第11回　標準になったjsonモジュール：Python 3.0 Hacks｜gihyo.jp … 技術評論社&lt;/a&gt;
+ &lt;a href="https://qiita.com/podhmo/items/dc748a9d40026c28556d"&gt;pythonでjson出力する際で対応していない型(e.g. datetime)の値を変換しながら出力したい - Qiita&lt;/a&gt;
+ &lt;a href="http://diveintopython3-ja.rdy.jp/serializing.html"&gt;Pythonオブジェクトをシリアライズする - Dive Into Python 3 日本語版&lt;/a&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;datetime_to_str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;o&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;isinstance&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;o&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;o&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;isoformat&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;raise&lt;/span&gt; &lt;span class="ne"&gt;TypeError&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;repr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;o&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot; is not JSON serializable&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;str_to_datetime&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;o&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;date&amp;quot;&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;o&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
      &lt;span class="n"&gt;o&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;date&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;strptime&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;o&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;date&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;%Y-%m-&lt;/span&gt;&lt;span class="si"&gt;%d&lt;/span&gt;&lt;span class="s2"&gt;T%H:%M:%S&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;o&lt;/span&gt;
  &lt;span class="n"&gt;f&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;dump.json&amp;quot;&lt;/span&gt;
  &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;w&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;encoding&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;utf-8&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;json&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dump&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sorted_list&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;default&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;datetime_to_str&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&amp;quot;&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;exists&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;r&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
      &lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;json&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;load&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;object_hook&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;str_to_datetime&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;日時の差分を秒単位で出す&lt;/h2&gt;
&lt;p&gt;参考：&lt;a href="https://qiita.com/puriketu99/items/568befc13510ee4d587f"&gt;pythonで日時の差分を秒単位で出す方法 - Qiita&lt;/a&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;datetime&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;datetime&lt;/span&gt;
&lt;span class="n"&gt;from_date&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2017&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;to_date&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2017&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;21&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;to_date&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;from_date&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;total_seconds&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;リストから重複を省く&lt;/h2&gt;
&lt;p&gt;参考：&lt;a href="http://www.lifewithpython.com/2013/11/python-remove-duplicates-from-lists.html"&gt;Python Tips：リストから重複した要素を削除したい - Life with Python&lt;/a&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nb"&gt;list&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sorted_list&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;uniq_list&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;sorted_list&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;uniq_list&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;uniq_list&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;他にもあるけど、まだ使ってない。&lt;/p&gt;
&lt;h2&gt;pip freezeでWarning: cannot find svn location for distribute==0.6.24dev-r0&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ sudo pip install --upgrade distribute
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;でおk&lt;/p&gt;
&lt;h2&gt;pipで一気にインストールする&lt;/h2&gt;
&lt;p&gt;pip freezeで出てくる出力をファイルに書き出したものを使うと、別の環境で同じ状態にもっていける。ファイルからバージョン情報を消すと最新の状態でインストール出来る。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ pip install -r freezed.txt
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;for文でループカウント取得&lt;/h2&gt;
&lt;p&gt;参考&lt;a href="http://fujishinko.exblog.jp/7669024"&gt;Python 配列をfor文でまわしているときのループカウント取得 : fujishinko 雑記帳&lt;/a&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;item&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;enumerate&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;a&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;b&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;c&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]):&lt;/span&gt;
  &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;item&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;!-- more --&gt;

&lt;h2&gt;日本語のコマンドライン引数取得&lt;/h2&gt;
&lt;p&gt;参考&lt;a href="http://www.yukun.info/blog/2008/07/python-command-line-arguments.html"&gt;Python: コマンドライン引数の取得 – sys.argv変数&lt;/a&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;#hoge.py&lt;/span&gt;
&lt;span class="c1"&gt;# -\*- encoding: utf-8 -\*-&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;sys&lt;/span&gt;
&lt;span class="n"&gt;argv&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;argv&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;decode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;utf-8&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ python hoge.py あいうえお
あいうえお
$
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;コマンド実行して実行結果を取得&lt;/h2&gt;
&lt;p&gt;参考&lt;a href="http://qiita.com/mokemokechicken/items/a84b0aa96b94d1931f08"&gt;Python の subprocess で出力を受け取るときは communicate() を使おう - Qiita&lt;/a&gt;
subprocessを使う。何か昔は別の手法だったらしい。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;subprocess&lt;/span&gt;
&lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;subprocess&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Popen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;echo &amp;#39;hoge&amp;#39;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;shell&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;stdout&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;subprocess&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;PIPE&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;stderr&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;subprocess&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;PIPE&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;wait&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;stdout_data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;stderr_data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;communicate&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;stdout_data&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;decode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;utf-8&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;strip&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;親クラスのメソッド呼び出し&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Hoge&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;aaa&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;param&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;param&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Fuga&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Hoge&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;bbb&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;param&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;hage&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;super&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Fuga&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;aaa&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;param&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;f&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Fuga&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;bbb&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;test&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;こんな感じ。お作法を忘れがち。&lt;/p&gt;
&lt;h2&gt;正規表現オブジェクトのパターンをチェックする方法&lt;/h2&gt;
&lt;p&gt;他のライブラリで正規表現が設定されてて、その内容をチェックしたかったので調べてみたら、patternプロパティを見れば良いらしい&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;re&lt;/span&gt;
&lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;re&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;compile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;^hoge&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;re&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pattern&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;参考：&lt;a href="http://compgroups.net/comp.lang.python/how-to-print-sre_pattern-regexp-object-text/309372"&gt;How to print SRE_Pattern (regexp object) text for debugging purposes? - comp.lang.python&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;1ヶ月前の日付を求める&lt;/h2&gt;
&lt;p&gt;timedeltaを使うとweeksとかdaysしか指定出来ないので、1ヶ月前の日付を取得しようと思ったら、別の方法が必要になる&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;time&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;datetime&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;date&lt;/span&gt;

&lt;span class="n"&gt;base_date&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;date&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2015&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;one_month_ago&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;date&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fromtimestamp&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;mktime&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;base_date&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;year&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;base_date&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;month&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;base_date&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;day&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;こんな感じで出来る。
参考：&lt;a href="http://blog.kjirou.net/p/381"&gt;[Python] 月の加減算処理ができない？ | それなりブログ&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;日付表示で良く使うフォーマット&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;datetime&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;date&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;date&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2002&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;isoformat&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;としておくと、2002-12-04と表示される&lt;/p&gt;
&lt;h2&gt;lxmlをインストールしようとしたら、fatal error: libxml/xmlversion.h: No such file or directory&lt;/h2&gt;
&lt;p&gt;ライブラリが足らないのでインストールすればおk
&lt;a href="http://stackoverflow.com/questions/15759150/src-lxml-etree-defs-h931-fatal-error-libxml-xmlversion-h-no-such-file-or-di"&gt;python 2.7 - src/lxml/etree_defs.h:9:31: fatal error: libxml/xmlversion.h: No such file or directory - Stack Overflow&lt;/a&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ sudo aptitude install libxml2-dev libxslt1-dev
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;pythonでsudoを付けたコマンドを実行する&lt;/h2&gt;
&lt;p&gt;パスワードをリダイレクトすればおk
&lt;a href="http://stackoverflow.com/questions/13045593/using-sudo-with-python-script"&gt;shell - Using sudo with Python script - Stack Overflow&lt;/a&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;os&lt;/span&gt;
&lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;system&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;echo pass | sudo -S ...&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;popen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;sudo -S ...&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;w&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;pass&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;django rest frameworkでBasic認証のあるサイトを扱う&lt;/h2&gt;
&lt;p&gt;basic認証のあるサイトでdjango rest frameworkを使ったjson apiみたいなのを作ろうと思った時に、認証してアクセスしても&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;{&amp;quot;detail&amp;quot;: &amp;quot;Invalid username/password&amp;quot;}
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;みたいなメッセージが帰ってきてうまく情報を取って来れなかった。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# settings.py&lt;/span&gt;
&lt;span class="n"&gt;REST_FRAMEWORK&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;DEFAULT_AUTHENTICATION_CLASSES&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;と認証を削除するといけた
&lt;a href="http://stackoverflow.com/questions/19693433/django-rest-framework-behind-http-basic-authentication"&gt;nginx - Django Rest Framework behind HTTP Basic Authentication - Stack Overflow&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;リストの文字列をリストに変換する&lt;/h2&gt;
&lt;p&gt;リクエストでリストの文字列をパラメーターにして送って、それをリストとして評価したかったので、調べてみた。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;ast&lt;/span&gt;
&lt;span class="n"&gt;hoge&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="sa"&gt;u&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;[&amp;quot;A&amp;quot;,&amp;quot;B&amp;quot;,&amp;quot;C&amp;quot;]&lt;/span&gt;
&lt;span class="n"&gt;fuga&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ast&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;literal_eval&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;hoge&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;a href="https://docs.python.org/2/library/ast.html#ast.literal%5Feval"&gt;32.2. ast — Abstract Syntax Trees — Python 2.7.10 documentation&lt;/a&gt;見ると&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;This can be used for safely evaluating strings containing Python values from untrusted sources without the need to parse the values oneself.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;と、あるので、変換だけならチェックしなくても問題ない・・・かも？&lt;/p&gt;
&lt;p&gt;参考：&lt;a href="http://stackoverflow.com/questions/1894269/convert-string-representation-of-list-to-list-in-python"&gt;convert string representation of list to list in python - Stack Overflow&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;lxmlで&amp;nbsp;が入った文章をxmlでパース出来ない&lt;/h2&gt;
&lt;p&gt;xmlに&amp;nbsp;（空白）が入っている場合に、xmlとしてパースした場合に&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;lxml.etree.XMLSyntaxError: Entity &amp;#39;nbsp&amp;#39; not defined
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;みたいなメッセージを出されちゃうことがある。解決策としては&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;htmlとしてパースする&lt;/li&gt;
&lt;li&gt;xml定義をしっかりやっておく&lt;/li&gt;
&lt;li&gt;＆の部分を適当に置換&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;くらいがある。&lt;/p&gt;
&lt;h4&gt;htmlとしてパース&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;lxml&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;etree&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;StringIO&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;StringIO&lt;/span&gt;
&lt;span class="n"&gt;parser&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;etree&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;HTMLParser&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;parsed&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;etree&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;HTML&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;StringIO&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;source&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;parser&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;xml定義をしっかり書く&lt;/h4&gt;
&lt;p&gt;xmlとしてしっかり書いて、パーサーのパラメータとしてresolve_entities=Falseと指定すれば良いらしい&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;lxml&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;etree&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;StringIO&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;StringIO&lt;/span&gt;
&lt;span class="n"&gt;source&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&amp;quot;&amp;quot;&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;utf-8&amp;quot;?&amp;gt;&lt;/span&gt;
&lt;span class="s2"&gt;&amp;lt;!DOCTYPE html PUBLIC &amp;quot;-//W3C//DTD HTML 4.01 Transitional//EN&amp;quot; &amp;quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&amp;quot;&amp;gt;&lt;/span&gt;
&lt;span class="s2"&gt;&amp;lt;hoge&amp;gt;&amp;amp;nbsp;fuga&amp;lt;/hoge&amp;gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class="n"&gt;parser&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;etree&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;XMLParser&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;resolve_entities&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;False&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;parsed&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;etree&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;parse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;StringIO&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;source&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;parser&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;etree&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;tostring&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;parsed&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;＆を適当に置換&lt;/h4&gt;
&lt;p&gt;一個一個特殊文字をユニコードに変えるという手もあるけど、とても手間なので&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;source&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;source&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&amp;amp;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&amp;amp;amp;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;とやってからパースすれば通る&lt;/p&gt;
&lt;h2&gt;except時にトレースバックを表示&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;traceback&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;hoge&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="o"&gt;...&lt;/span&gt;
    &lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="ne"&gt;Exception&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;traceback&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;print_exc&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;こんな感じで、tracebackを使えば良い&lt;/p&gt;
&lt;p&gt;参考：&lt;a href="https://doughellmann.com/blog/2009/06/19/python-exception-handling-techniques/"&gt;Python Exception Handling Techniques | Doug Hellmann&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;datetimeからタイムスタンプへの変換（逆も)&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;datetime&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;time&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;datetime_to_timestamp&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;dt&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;timestamp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;mktime&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;dt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;timetuple&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;timestamp&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;timestamp_to_datetime&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;timestamp&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;dt&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fromtimestamp&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;timestamp&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;dt&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;こんな感じ&lt;/p&gt;
&lt;p&gt;参考：&lt;a href="http://uokada.hatenablog.jp/entry/20120217/1329444315"&gt;pythonでdatetimeとtimestampを相互変換するコード - uokadaの見逃し三振は嫌いです&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;パイプで渡されたデータを受け取る&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# encoding: UTF-8&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;sys&lt;/span&gt;
&lt;span class="n"&gt;lines&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;stdin&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;readlines&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;lines&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;こんな感じ。ちょっとしたコマンド作る時に使えるのでメモ&lt;/p&gt;
&lt;p&gt;参考；&lt;a href="http://studiot.jp/blog/?p=321"&gt;[Python]シェルからパイプで渡されたデータをPythonで受け取る « StudioT::DevLog&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;変数が文字列かチェックする&lt;/h2&gt;
&lt;p&gt;文字列が来てる場合はstrptimeやって、他の場合は普通に代入とかそんな場合に、文字列かチェックする必要があるのでメモ&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;hoge&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;fuga&amp;quot;&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;instanceof&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;hoge&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;basestring&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;pass&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;こんな感じ。整数ならbasestringをintにするとかやればおk&lt;/p&gt;
&lt;p&gt;参考：&lt;a href="http://stackoverflow.com/questions/4843173/how-to-check-if-type-of-a-variable-is-string-in-python"&gt;How to check if type of a variable is string in python? - Stack OverflowHow to check if type of a variable is string in python? - Stack Overflow&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;formatにリストを渡す&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;l&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;hoge&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;fuga&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;hage&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;{0},{1},{2}&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;tuple&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

&lt;span class="n"&gt;hoge&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;fuga&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;hage&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;こんな感じ。&lt;/p&gt;
&lt;h2&gt;forループ色々&lt;/h2&gt;
&lt;h3&gt;dict&lt;/h3&gt;
&lt;p&gt;iteritemsを使う&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;isinstance&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;dict&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;vakue&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;iteritems&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
        &lt;span class="k"&gt;pass&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;listとかtuple&lt;/h3&gt;
&lt;p&gt;enumerateを使う。直接listの番号を取ってる訳じゃないけど&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;isinstance&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;list&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;tuple&lt;/span&gt;&lt;span class="p"&gt;)):&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;enumerate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;pass&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;object&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;isinstance&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;o&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;vars&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;o&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;iteritems&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
        &lt;span class="k"&gt;pass&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;psycopg2をインストールする&lt;/h2&gt;
&lt;p&gt;依存ライブラリとしてlibpg-devが必要。postgresql-server-dev-x.xが必要とか言われるけど、こっちで良い。&lt;/p&gt;
&lt;p&gt;参考：&lt;a href="http://stackoverflow.com/questions/28253681/you-need-to-install-postgresql-server-dev-x-y-for-building-a-server-side-extensi"&gt;python - You need to install postgresql-server-dev-X.Y for building a server-side extension or libpq-dev for building a client-side application - Stack Overflow&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;seleniumでchromiumを使う(Ubuntu 18.04)&lt;/h2&gt;
&lt;p&gt;Ubuntuではchromeでなく、chromiumを使うので、chromiumやってみる&lt;/p&gt;
&lt;p&gt;pipでseleniumをインストール&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pip install selenium
````

chromium、chromeドライバーをインストール
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;sudo aptitude -y install chromium-browser chromium-chromedriver&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;chromedriverをパスが通るところに移動（シンボリックリックを作る）
(webdriver.Chromeでパスを直接指定でも良いかもしれない(参考：[Using chromedriver with selenium/python/ubuntu](https://stackoverflow.com/questions/22476112/using-chromedriver-with-selenium-python-ubuntu))
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;sudo ln -s /usr/lib/chromium-browser/chromedriver /usr/bin/chromedriver&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;テストコード&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="err"&gt;参考；&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;SeleniumからHeadless&lt;/span&gt; &lt;span class="n"&gt;Chromeを使ってみた&lt;/span&gt;&lt;span class="p"&gt;](&lt;/span&gt;&lt;span class="n"&gt;https&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="n"&gt;qiita&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;com&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;orangain&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;items&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;db4594113c04e8801aad&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

&lt;span class="sb"&gt;``&lt;/span&gt;&lt;span class="err"&gt;`&lt;/span&gt;&lt;span class="n"&gt;py&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;time&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;selenium&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;webdriver&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;selenium.webdriver.common.keys&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Keys&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;selenium.webdriver.chrome.options&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Options&lt;/span&gt;
&lt;span class="n"&gt;options&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Options&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;options&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;binary_location&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;/usr/bin/chromium-browser&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;options&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_argument&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;--headless&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;driver&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;webdriver&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Chrome&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;chrome_options&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;options&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;driver&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;https://www.google.co.jp/&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Google&amp;#39;&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;driver&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;title&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</content><category term="python"></category><category term="memo"></category></entry><entry><title>vmwareメモ</title><link href="http://blog.shigepon.info/blog/2018/09/10/mac_memo/" rel="alternate"></link><published>2018-09-10T17:30:00+09:00</published><updated>2018-09-27T16:30:00+09:00</updated><author><name>thoz</name></author><id>tag:blog.shigepon.info,2018-09-10:/blog/2018/09/10/mac_memo/</id><summary type="html"></summary><content type="html">&lt;h2&gt;コンソールで文字化け回避&lt;/h2&gt;
&lt;p&gt;sshで文字化けしてなくても、コンソールで文字化けする。
zshを使っているので、.zshrcに以下を追記&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;export LANG=ja_JP.UTF-8↲
case &amp;quot;$TERM&amp;quot; in↲
    linux)↲
        export LANG=&amp;quot;C&amp;quot; ;;↲
    *)↲
        export LANG=&amp;quot;ja_JP.UTF-8&amp;quot; ;;↲
esac↲
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;参考：
+ &lt;a href="https://www57.atwiki.jp/hiiragiwiki/pages/25.html"&gt;仮想コンソールの文字化け回避
&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;コンソールのキーボードレイアウト変更&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;dpkg-reconfigure keyboard-configuration
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;でGeneric 105-key (Intl) PC -&amp;gt; Japanese -&amp;gt; Japanese -&amp;gt; The default for the keyboard layout -&amp;gt; No compose key&lt;/p&gt;
&lt;p&gt;参考：
+ &lt;a href="https://qiita.comii26/items/af134896483ae9d32a7d/"&gt;キーボードレイアウト変更&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;vSphereでのキーボードレイアウト変更&lt;/h2&gt;
&lt;p&gt;vSphere上部のアカウントをクリックして&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;クライアントの設定&lt;/li&gt;
&lt;li&gt;キーボード設定&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;で変更&lt;/p&gt;
&lt;h2&gt;UbuntuクライアントにHDD追加&lt;/h2&gt;
&lt;p&gt;電源切った状態で&lt;/p&gt;
&lt;p&gt;設定の編集→ハードディスクの追加&lt;/p&gt;
&lt;p&gt;で追加する。&lt;/p&gt;
&lt;p&gt;マウント手順は&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo fdisk -l
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;で追加したハードディスクのパスを確認（/dev/sdaとする）&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo fdisk /dev/sda
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;でパーティション作成
入力は、n -&amp;gt; enter -&amp;gt; enterでおk&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo mkfs.ext4 /dev/sda
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;でフォーマット&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo mkdir /mnt/hoge
sudo mount /dev/sda /mnt/hoge
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;でマウント&lt;/p&gt;
&lt;p&gt;起動時に自動マウントするには&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo blkid /dev/sda
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;でUUIDやTYPEの情報を取得して/etc/fstabに&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nv"&gt;UUID&lt;/span&gt;&lt;span class="o"&gt;={&lt;/span&gt;UUID&lt;span class="o"&gt;}&lt;/span&gt; /mnt/hoge   &lt;span class="o"&gt;{&lt;/span&gt;TYPE&lt;span class="o"&gt;}&lt;/span&gt;    defaults    &lt;span class="m"&gt;0&lt;/span&gt;   &lt;span class="m"&gt;0&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;を追加すればおk&lt;/p&gt;
&lt;p&gt;参考：&lt;a href="https://hirooka.pro/?p=8450"&gt;Ubuntu 16.04 で HDD を増設する件&lt;/a&gt;&lt;/p&gt;</content><category term="memo"></category><category term="vmware"></category></entry><entry><title>macメモ</title><link href="http://blog.shigepon.info/blog/2017/11/02/mac_memo/" rel="alternate"></link><published>2017-11-02T17:30:00+09:00</published><updated>2018-09-06T16:30:00+09:00</updated><author><name>thoz</name></author><id>tag:blog.shigepon.info,2017-11-02:/blog/2017/11/02/mac_memo/</id><summary type="html"></summary><content type="html">&lt;h2&gt;sambaで「オリジナルの項目が見つからなかったため開けません」と出た&lt;/h2&gt;
&lt;p&gt;接続しなおし&lt;/p&gt;
&lt;p&gt;Finder -&amp;gt; 移動 -&amp;gt; サーバへ接続 -&amp;gt; ブラウズ&lt;/p&gt;
&lt;p&gt;でおk&lt;/p&gt;
&lt;p&gt;参考：
+ &lt;a href="https://synkers.net/?p=5355"&gt;MacでNASに接続しようとしたら「オリジナルの項目が見つかりません」と出た場合の対処法&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;sambaのフォルダにコマンドラインからアクセス&lt;/h2&gt;
&lt;p&gt;/Volume内にある&lt;/p&gt;
&lt;p&gt;例としてsambaにhogeというフォルダがある場合は&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;cd /Volume/hoge
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;でアクセスできる。&lt;/p&gt;
&lt;p&gt;参考：
+ &lt;a href="https://stackoverflow.com/questions/17412069/how-to-copy-files-from-mac-os-to-windows-which-are-in-same-network-using-command"&gt;How to copy files from Mac OS to Windows which are in same network using command line?&lt;/a&gt;&lt;/p&gt;</content><category term="memo"></category><category term="mac"></category></entry><entry><title>linuxメモ</title><link href="http://blog.shigepon.info/blog/2017/11/02/linux_memo/" rel="alternate"></link><published>2017-11-02T17:30:00+09:00</published><updated>2018-08-16T16:30:00+09:00</updated><author><name>thoz</name></author><id>tag:blog.shigepon.info,2017-11-02:/blog/2017/11/02/linux_memo/</id><summary type="html"></summary><content type="html">&lt;h2&gt;sshでリモートサーバーのフォルダをマウント&lt;/h2&gt;
&lt;p&gt;sshfsってのを使う。Ubuntuはaptitudeでインストール&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ aptitude install sshfs
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Macは&lt;a href="https://osxfuse.github.io/"&gt;FUSE for macOS&lt;/a&gt;
からFUSE for macOSとSSHFS for macOSをインストールすれば使えるようになる。&lt;/p&gt;
&lt;p&gt;マウントは&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ sshfs username@host:path_to_remote_dir path_to_local_dir
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;でいける&lt;/p&gt;
&lt;p&gt;アンマウントは&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ unmount mountpoint &lt;span class="c1"&gt;#Ubuntu&lt;/span&gt;
$ diskutil unmount mountpoint &lt;span class="c1"&gt;#Mac&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;参考：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://qiita.com/ysk24ok/items/bb148530a55a4e55d99b"&gt;Macでsshfsを使ってローカルからリモートのファイルを触る&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://wadap.hatenablog.com/entry/20080603/1212506793"&gt;sshでリモートサーバーをマウント、便利にsshfs&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;sshが切れても標準出力を残す&lt;/h2&gt;
&lt;p&gt;screenを使うのが無難？&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ screen -S hoge
$ 何かコマンド
$ Ctrl+a c　でウィンドウ作成
$ Ctrl+a &lt;span class="s2"&gt;&amp;quot;　でウィンドウ選択&lt;/span&gt;
$&lt;span class="s2"&gt; screen -ls でxxx.hogeとか出てくる&lt;/span&gt;
$&lt;span class="s2"&gt; screen -d xxx　で元のターミナル？に戻る&lt;/span&gt;
$&lt;span class="s2"&gt; screen -r xxx　でコマンドを行ってるウィンドウに戻る&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;ファイルのリアルタイム更新状況をチェック&lt;/h2&gt;
&lt;p&gt;tailとかlessとか使う&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ less +F hoge.log
$ tail -f hoge.log
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;lessはCtrl+Cで通常のlessに戻る
Shift+fでリアルタイム更新チェックに戻る&lt;/p&gt;
&lt;p&gt;参考：&lt;a href="https://qiita.com/genreh/items/8d935526571ccfe171ae"&gt;tail -fやtailfを使うのはやめてless +Fを使おう - Qiita&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;grepの良く使うオプション&lt;/h2&gt;
&lt;h4&gt;行番号を表示&lt;/h4&gt;
&lt;p&gt;nオプションを使う&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ cat hoge &lt;span class="p"&gt;|&lt;/span&gt; grep -n &lt;span class="s1"&gt;&amp;#39;hoge&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;前後数行を表示&lt;/h4&gt;
&lt;p&gt;前後3行なら&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ cat hoge &lt;span class="p"&gt;|&lt;/span&gt; grep -3 &lt;span class="s1"&gt;&amp;#39;hoge&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;参考: &lt;a href="http://www.atmarkit.co.jp/flinux/rensai/linuxtips/137greplineplus.html"&gt;grepで該当する行の前後も一緒に表示するには&lt;/a&gt;&lt;/p&gt;
&lt;h4&gt;指定した文字列に当てはまらないもの&lt;/h4&gt;
&lt;p&gt;vオプションを使う&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ cat hoge &lt;span class="p"&gt;|&lt;/span&gt; grep -v &lt;span class="s1"&gt;&amp;#39;hoge&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;出力に行番号を追加&lt;/h2&gt;
&lt;p&gt;linuxにはnlコマンドがある&lt;/p&gt;
&lt;p&gt;hoge.txtの中身をこんな感じに&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;aaa
bbb
ccc
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ cat hoge.txt &lt;span class="p"&gt;|&lt;/span&gt; nl nl -s &lt;span class="s1"&gt;&amp;#39;,&amp;#39;&lt;/span&gt;
     &lt;span class="m"&gt;1&lt;/span&gt;,aaa
     &lt;span class="m"&gt;2&lt;/span&gt;,bbb
     c,ccc
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;こんな感じ。行頭の空白を消したい場合はsedと組み合わせる&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ cat hoge.txt &lt;span class="p"&gt;|&lt;/span&gt; nl nl -s &lt;span class="s1"&gt;&amp;#39;,&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; sed &lt;span class="s1"&gt;&amp;#39;s/^ *//g&amp;#39;&lt;/span&gt;
&lt;span class="m"&gt;1&lt;/span&gt;,aaa
&lt;span class="m"&gt;2&lt;/span&gt;,bbb
c,ccc
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;csvっぽく出来る&lt;/p&gt;
&lt;h2&gt;sedで良く使うメモ&lt;/h2&gt;
&lt;p&gt;sedはすぐ忘れる。&lt;/p&gt;
&lt;p&gt;参考：
+ &lt;a href="https://hydrocul.github.io/wiki/commands/sed.html"&gt;sed コマンド&lt;/a&gt;
+ &lt;a href="https://orebibou.com/2015/07/sed%E3%82%B3%E3%83%9E%E3%83%B3%E3%83%89%E3%81%A7%E8%A6%9A%E3%81%88%E3%81%A6%E3%81%8A%E3%81%8D%E3%81%9F%E3%81%84%E4%BD%BF%E3%81%84%E6%96%B912%E5%80%8B/#i-6"&gt;sedコマンドで覚えておきたい使い方12個(+3個)&lt;/a&gt;&lt;/p&gt;
&lt;h4&gt;置換（文字列削除にも使える）&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ sed &lt;span class="s1"&gt;&amp;#39;s/正規表現/置換文字列/g&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;行削除&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ sed &lt;span class="s1"&gt;&amp;#39;/正規表現/d&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;指定行だけ表示&lt;/h4&gt;
&lt;p&gt;文字列の編集じゃないけど、便利。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ sed -n 行番号p
$ sed -n 開始行番号,終了行番号p
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;アクセスログのIPアドレスを集計してみる&lt;/h2&gt;
&lt;p&gt;参考：&lt;a href="http://blog.livedoor.jp/stock_value/archives/51443839.html"&gt;Linux サーバーでお手軽にログの集計：こっそりと。 - livedoor Blog（ブログ）&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Google Analyticsでリファラ無しの変なアクセスが増えたので、アクセスログからIPを集計してみた。
アクセスログの書式はLTSVでこんな感じ&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nn"&gt;time&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;07&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nv"&gt;Mar&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;2014&lt;/span&gt;&lt;span class="s s-Atom"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;06&lt;/span&gt;&lt;span class="s s-Atom"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;25&lt;/span&gt;&lt;span class="s s-Atom"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;22&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;0900&lt;/span&gt;       &lt;span class="nn"&gt;host&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s s-Atom"&gt;:&lt;/span&gt;&lt;span class="mf"&gt;11.22.33.46&lt;/span&gt;       &lt;span class="nn"&gt;forwardedfor&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;  &lt;span class="nn"&gt;req&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nv"&gt;GET&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="nv"&gt;HTTP&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mf"&gt;1.1&lt;/span&gt;   &lt;span class="nn"&gt;status&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;200&lt;/span&gt;      &lt;span class="nn"&gt;size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;       &lt;span class="nn"&gt;referer&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nn"&gt;ua&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nv"&gt;Mozilla&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mf"&gt;5.0&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s s-Atom"&gt;***&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;      &lt;span class="nn"&gt;reqtime&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mf"&gt;0.777&lt;/span&gt;   &lt;span class="nn"&gt;cache&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nn"&gt;runtime&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;       &lt;span class="nn"&gt;vhost&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s s-Atom"&gt;hoge&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="s s-Atom"&gt;fuga&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;なんか色々ソフト使うのとか面倒だったのでgrepとかawkでほげほげした。要はhost:11.22.33.44に当たる箇所を取り出して表示回数をまとめれば良い。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="s s-Atom"&gt;cat&lt;/span&gt; &lt;span class="s s-Atom"&gt;access&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="s s-Atom"&gt;log&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="s s-Atom"&gt;grep&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="s s-Atom"&gt;v&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="s s-Atom"&gt;i&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;bot&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="s s-Atom"&gt;grep&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;referer:-&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="s s-Atom"&gt;grep&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;status:200&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="s s-Atom"&gt;awk&lt;/span&gt; &lt;span class="s s-Atom"&gt;&amp;#39;{print $3}&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="s s-Atom"&gt;sort&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="s s-Atom"&gt;uniq&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="s s-Atom"&gt;c&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;{% include 'includes/ad-content.html' %}↲&lt;/p&gt;
&lt;p&gt;軽くbot避けを入れてるけど、crawlerとかspiderとかを避けておくとより正確になるかも。
これだけだと一杯出てくるので100回以上アクセスあったIPだけ取り出してみた。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="s s-Atom"&gt;cat&lt;/span&gt; &lt;span class="s s-Atom"&gt;access&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="s s-Atom"&gt;log&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="s s-Atom"&gt;grep&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="s s-Atom"&gt;v&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="s s-Atom"&gt;i&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;bot&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="s s-Atom"&gt;grep&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;referer:-&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="s s-Atom"&gt;grep&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;status:200&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="s s-Atom"&gt;awk&lt;/span&gt; &lt;span class="s s-Atom"&gt;&amp;#39;{print $3}&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="s s-Atom"&gt;sort&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="s s-Atom"&gt;uniq&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="s s-Atom"&gt;c&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="s s-Atom"&gt;grep&lt;/span&gt; &lt;span class="err"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="s s-Atom"&gt;\&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s s-Atom"&gt;\&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s s-Atom"&gt;\s&lt;/span&gt;&lt;span class="err"&gt;&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;ただ、最初の目的には最初の集計の方が役に立った。結局Bingのボットだったみたい。Analyticsではじけなかったアクセスがあったのかな。&lt;/p&gt;
&lt;h2&gt;大きなファイルを探す&lt;/h2&gt;
&lt;p&gt;例：100MB以上のファイルを探す&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ find path -size 100M
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Windows共有フォルダをマウント&lt;/h2&gt;
&lt;p&gt;参考：&lt;a href="http://qiita.com/mdstoy/items/54925cdcbca6d558b666"&gt;Ubuntu から Windows の共有フォルダをマウントして利用する - Qiita&lt;/a&gt;というかほぼそのまま&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ sudo aptitude install cifs-utils
$ sudo mkdir -p /mnt/windows
$ sudo mount -t cifs -o &lt;span class="nv"&gt;username&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;WindowsUsername,password&lt;span class="o"&gt;=&lt;/span&gt;WindowsPassword //ServerNameOrIp/path/to/share /mnt/windows
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;ファイルのフルパス一覧を取得&lt;/h2&gt;
&lt;p&gt;参考：&lt;a href="http://linux.just4fun.biz/%E9%80%86%E5%BC%95%E3%81%8DUNIX%E3%82%B3%E3%83%9E%E3%83%B3%E3%83%89/%E3%83%95%E3%82%A1%E3%82%A4%E3%83%AB%E3%81%AE%E3%83%95%E3%83%AB%E3%83%91%E3%82%B9%E5%90%8D%E3%82%92%E5%8F%96%E5%BE%97%E3%81%99%E3%82%8B%E6%96%B9%E6%B3%95.html"&gt;逆引きUNIXコマンド/ファイルのフルパス名を取得する方法 - Linuxと過ごす&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;単純なlsだとファイル名だけが一覧になるので、フルパスの一覧が欲しい場合は一工夫必要&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ ls -dF /path/to/dir/*
$ find &lt;span class="sb"&gt;`&lt;/span&gt;&lt;span class="nb"&gt;pwd&lt;/span&gt;&lt;span class="sb"&gt;`&lt;/span&gt; -maxdepth &lt;span class="m"&gt;1&lt;/span&gt; -mindepth &lt;span class="m"&gt;1&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;SSHを使ってリモートでコマンド実行する&lt;/h2&gt;
&lt;p&gt;単純なコマンド実行&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ ssh username@hostname options... &lt;span class="s2"&gt;&amp;quot;command&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;ローカルのファイルをリダイレクトしてリモートコマンドに使用する。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ ssh username@hostname options... &lt;span class="s2"&gt;&amp;quot;command&amp;quot;&lt;/span&gt; &amp;lt; localfile
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;重複行を削除する&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ cat hoge &lt;span class="p"&gt;|&lt;/span&gt; sort &lt;span class="p"&gt;|&lt;/span&gt; uniq
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;参考：&lt;a href="http://codenote.net/linux/1300.html"&gt;[Linux] sort と uniq をパイプでつないで重複行を削除する | CodeNote.net&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;文字列置換(sed)関連&lt;/h2&gt;
&lt;h3&gt;一番最初にマッチしたものを置換&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ sed &lt;span class="m"&gt;1&lt;/span&gt;,/pattern/s/pattern/replace/
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;1は1行目からの意味。10行目から始めたければ10に変えるとか、数字はパターンにしても良い&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ sed /pattern from/,/pattern/s/pattern/replace/
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;一行目に文字列を追加する&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ sed -i hoge -e &lt;span class="s2"&gt;&amp;quot;1i fuga&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;参考:
&lt;a href="http://d.hatena.ne.jp/n9d/20081110/1226284188"&gt;sedにて一番最初にマッチしたモノだけを置換するには - 計算機と戯れる日々&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;ファイルを上書き保存&lt;/h3&gt;
&lt;p&gt;オプション -iを使う。一括でファイル上書きならこんな感じ&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ find . -name &lt;span class="s2"&gt;&amp;quot;*.html&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; xargs sed -i -e s/hoge/fuga/
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;参考:
&lt;a href="http://www.dab.hi-ho.ne.jp/sasa/biboroku/unix/sed-i.html"&gt;sedでファイルを上書き保存&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;grepで該当行前後を表示する&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ cat hoge.txt &lt;span class="p"&gt;|&lt;/span&gt; grep &lt;span class="s2"&gt;&amp;quot;fuga&amp;quot;&lt;/span&gt; -3 &lt;span class="c1"&gt;#前後3行&lt;/span&gt;
$ cat hoge.txt &lt;span class="p"&gt;|&lt;/span&gt; grep &lt;span class="s2"&gt;&amp;quot;fuga&amp;quot;&lt;/span&gt; -B &lt;span class="m"&gt;3&lt;/span&gt; &lt;span class="c1"&gt;#前3行&lt;/span&gt;
$ cat hoge.txt &lt;span class="p"&gt;|&lt;/span&gt; grep &lt;span class="s2"&gt;&amp;quot;fuga&amp;quot;&lt;/span&gt; -A &lt;span class="m"&gt;3&lt;/span&gt; &lt;span class="c1"&gt;#後3行&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;sshでポートフォワーディング&lt;/h3&gt;
&lt;p&gt;例えばPostgreSQLのポート5432をローカルの6542にポートフォワードする場合は&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ ssh -N -f -L &lt;span class="m"&gt;6543&lt;/span&gt;:localhost:5432 username@hostname
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;時刻調整&lt;/h2&gt;
&lt;p&gt;ntpをインストールする必要はない。Ubuntuの場合、ntpdate-debianコマンドがあればいける。ntpdateコマンドだとエラーが出た。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ sudo ntpdate
no servers can be used, exiting
$ sudo ntpdate-debian
step &lt;span class="nb"&gt;time&lt;/span&gt; server xxx.xxx.xxx.xxx offset -914.392749 sec
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;参考：&lt;a href="http://ubuntuforums.org/showthread.php?t=2193509"&gt;[SOLVED] ntpdate - No Servers&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;ntpサーバを指定するには/etc/default/ntpdateを変更する&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;NTP_USE_NTP_CONF=no
NTPSERVERS=&amp;quot;ntp.nict.jp&amp;quot;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;毎日のcronjobで動作させる&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo &lt;span class="nb"&gt;cd&lt;/span&gt; /etc/cron.daily
sudo ln -s /etc/network/if-up.d/ntpdate ./ntpdate
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;でおk
参考：&lt;a href="http://d.hatena.ne.jp/kobapan/20090909/1252472963"&gt;Ubuntu ntpdate 時刻合わせ - ガットポンポコ&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;windows共有フォルダをマウント&lt;/h2&gt;
&lt;p&gt;コマンドはこんな感じ&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ sudo aptitude install cifs-utils
$ sudo mount -t cifs -o &lt;span class="nv"&gt;username&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;Windowsユーザー名,password&lt;span class="o"&gt;=&lt;/span&gt;Windowsパスワード,uid&lt;span class="o"&gt;=&lt;/span&gt;Linuxユーザーid,gid&lt;span class="o"&gt;=&lt;/span&gt;Linuxグループid //windows ip/path/to/share /mnt/path/to/share
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;こうしておくとファイルの編集も可能。uidとかgidが無いとrootで共有する。&lt;/p&gt;
&lt;p&gt;linux(ubuntu)起動時に共有したい場合、fstabを編集する&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;//windows ip/path/to/share  /mnt/path/to/share  cifs  credentials=/home/username/.windowscredentials,uid=Linuxユーザーid,gid=Linuxグループid,iocharset=utf8  0  0
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;上のコマンドみたいにWindowsユーザー名、パスワードを入力してもいけるが、fstabは複数人から見ることが出来るので、ユーザーフォルダ内に認証用のファイルを作ってパスワードを隠す&lt;/p&gt;
&lt;p&gt;/home/username/.windowscredentialsを次のようにして600で保存すればおk&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;username=Windowsユーザー名
password=Windowsパスワード
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;参考：&lt;a href="https://wiki.ubuntu.com/MountWindowsSharesPermanently"&gt;MountWindowsSharesPermanently - Ubuntu Wiki&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;LANで利用されているIPアドレスを調べる&lt;/h2&gt;
&lt;p&gt;arp-scanコマンドを使う。
まずはインストール&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ sudo aptitude install arp-scan
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;使い方&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ sudo arp-scan -I eth0 -l
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;eth0はスキャンしたいネットワークアダプタ&lt;/p&gt;
&lt;h2&gt;csvからカラム切り出し&lt;/h2&gt;
&lt;p&gt;例としてhoge.csvの2カラム目を取り出す&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ cut -f &lt;span class="m"&gt;2&lt;/span&gt; hoge.csv
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;この場合タブ区切り、カンマ区切りしたい場合は&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ cut -d , -f &lt;span class="m"&gt;2&lt;/span&gt; hoge.csv
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;参考：&lt;a href="http://linux.just4fun.biz/?%E9%80%86%E5%BC%95%E3%81%8DUNIX%E3%82%B3%E3%83%9E%E3%83%B3%E3%83%89%2F%E6%8C%87%E5%AE%9A%E3%81%97%E3%81%9F%E3%83%95%E3%82%A3%E3%83%BC%E3%83%AB%E3%83%89%E3%82%92%E6%8A%9C%E3%81%8D%E5%87%BA%E3%81%99#q05e8b64"&gt;逆引きUNIXコマンド/指定したフィールドを抜き出す - Linuxと過ごす&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;csvのソート&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ sort --field-separator&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;,&amp;#39;&lt;/span&gt; --key&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;こうやるとカンマ区切りのデータの2番目のカラムでソートしてくれる&lt;/p&gt;
&lt;p&gt;数値でソートしたい場合は-nをオプションに加える&lt;/p&gt;
&lt;p&gt;逆順の場合は--reverseをオプションに加える&lt;/p&gt;
&lt;p&gt;参考：&lt;a href="http://stackoverflow.com/questions/9471101/sort-csv-file-by-column-priority-using-the-sort-command"&gt;unix - Sort CSV file by column priority using the "sort" command - Stack Overflow&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;cronjobの一覧&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ crontab -l
$ sudo crontab -l -u username
$ ls /etc/cron.d
$ ls /etc/cron.hourly
$ ls /etc/cron.daily
$ ls /etc/cron.weekly
$ ls /etc/cron.monthly
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;これくらいチェックすればよさげ&lt;/p&gt;
&lt;h2&gt;iconvでエラーをスキップ&lt;/h2&gt;
&lt;p&gt;cオプションを付ければ良い&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ iconv -c -f SJIS -t UTF-8 hoge.txt
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;ip, gateway, DNSの手動設定&lt;/h2&gt;
&lt;p&gt;\/etc\/network\/interfaces&lt;/p&gt;
&lt;p&gt;を編集する&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;auto eth0
iface eth0 inet static
address アドレス
netmask 255.255.255.0
gateway ゲートウェイ

dns-namaservers ネームサーバーのアドレス
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;画像を作成月に応じてフォルダに振り分ける&lt;/h2&gt;
&lt;p&gt;pythonを使う&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;subprocess&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;os&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;sys&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;shutil&lt;/span&gt;

&lt;span class="c1"&gt;#---&lt;/span&gt;
&lt;span class="n"&gt;save_to&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;/targeted/directory&amp;quot;&lt;/span&gt;
&lt;span class="c1"&gt;#---&lt;/span&gt;

&lt;span class="n"&gt;directory&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;exists&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;save_to&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;mkdir&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;save_to&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;get&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;lambda&lt;/span&gt; &lt;span class="n"&gt;cmd&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;subprocess&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;check_output&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;/bin/bash&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;-c&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;cmd&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;decode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;utf-8&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;check_dir&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;dr&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;exists&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;dr&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;mkdir&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;dr&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;rename_dups&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;target_dir&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;name_orig&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;
    &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;exists&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;target_dir&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;/&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;duplicate_&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;_&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;name_orig&lt;/span&gt;
        &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;target_dir&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;/&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;

&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;root&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;dirs&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;files&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;walk&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;directory&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;files&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="nb"&gt;file&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;root&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;/&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;
        &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;date&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;l&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;l&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;exif &amp;quot;&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&amp;quot;&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="nb"&gt;file&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&amp;quot;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;splitlines&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;\
                    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Dat&amp;quot;&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;|&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;split&lt;/span&gt;&lt;span class="p"&gt;()[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;-&amp;quot;&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;date&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="n"&gt;date&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;date&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;-&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)[:&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
            &lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;:&amp;quot;&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;date&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="n"&gt;date&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;date&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;:&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)[:&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
            &lt;span class="n"&gt;targeted_dir&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;save_to&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;/&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;date&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
            &lt;span class="n"&gt;check_dir&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;targeted_dir&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;sub_dir&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;targeted_dir&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;/&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;date&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="k"&gt;except&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;sub_dir&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;save_to&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;/&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;undetermined&amp;quot;&lt;/span&gt;
        &lt;span class="n"&gt;check_dir&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sub_dir&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;newfile&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;rename_dups&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sub_dir&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;shutil&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;copyfile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;file&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;newfile&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;参考
&lt;a href="https://askubuntu.com/questions/582799/reorganize-photos-from-an-existing-folder-structure-into-a-new-structure"&gt;Reorganize photos from an existing folder structure into a new structure&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;フォルダやファイルを監視して何か変更があれば作業を行う&lt;/h2&gt;
&lt;p&gt;incronというアプリを使うとcrontabみたいな形で書くことができる。&lt;/p&gt;
&lt;h3&gt;インストール&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo aptitude install incron
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;設定&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;incrontab -e
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;書式&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;lt;対象パス&amp;gt; &amp;lt;監視する行動&amp;gt; &amp;lt;実行するコマンド&amp;gt;
例：
/path/to/check IN_ACCESS echo &amp;quot;$$ $@ $# $% $&amp;amp;&amp;quot;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;実行するコマンドで使える特殊変数は次のとおり&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$$ ドルマークを表示
$@ 対象パス
$# 行動のあったファイル名
$% 行動フラグ
$&amp;amp; 行動フラグ（数字）
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;確認&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;incrontab -l
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;監視するパスの権限が合ってないとチェックしてくれません。&lt;/p&gt;
&lt;p&gt;参考
+ &lt;a href="http://var.blog.jp/archives/53730061.html"&gt;ファイルのアクセスや更新があったときに何かする&lt;/a&gt;
+ &lt;a href="https://www.linux.com/learn/how-use-incron-monitor-important-files-and-folders"&gt;How to Use Incron to Monitor Important Files and Folders&lt;/a&gt;
+ &lt;a href="https://qiita.com/k-suzuki/items/4a94ebeda9ec75fdad40"&gt;incronを使ってみた&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Ubuntuのアップデートでネットに繋がらなくなったら&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;ドライバがなくなった&lt;/li&gt;
&lt;li&gt;インターフェース名が変わった&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;くらいを確認する&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;ifconfig -a
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;でlp以外が出ればインターフェース名が変わった可能性が高い&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;dmesg &lt;span class="p"&gt;|&lt;/span&gt; grep eth0
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;とかでどんなことが起こったか分かると思う&lt;/p&gt;
&lt;p&gt;インターフェース名が変わった場合は&lt;/p&gt;
&lt;p&gt;/etc/network/interfaces&lt;/p&gt;
&lt;p&gt;を編集して再起動すればおk&lt;/p&gt;
&lt;p&gt;ドライバがなくなった場合は何とかドライバをインストールする
参考：&lt;a href="http://rainbowdevil.jp/?p=1164"&gt;UbuntuでNICを認識しない場合の対応&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Sambaの共有フォルダをマウント&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;mount -t cifs //&amp;lt;host name or ip&amp;gt;/path /path/to/mount -o &lt;span class="nv"&gt;user&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&amp;lt;username &lt;span class="k"&gt;for&lt;/span&gt; samba&amp;gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;自動マウント&lt;/p&gt;
&lt;p&gt;/etc/fstabを編集&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;//&amp;lt;host name or ip&amp;gt;/path /path/to/mount    cifs    username=&amp;lt;username for samba&amp;gt;,password=&amp;lt;password for samba&amp;gt;,uid=&amp;lt;user id&amp;gt;,gid=&amp;lt;group id&amp;gt;    0   0↲
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;を追加して再起動&lt;/p&gt;
&lt;p&gt;参考
：&lt;a href="https://qiita.com/dojineko/items/e6c21f3fe309b5aae694"&gt;LinuxからSambaをマウントする&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;cat | grepでBinary file (standard input) matchesが出たら&lt;/h2&gt;
&lt;p&gt;grep に -aオプションをつけると良い&lt;/p&gt;
&lt;p&gt;参考：&lt;a href="http://memopct.blogspot.com/2014/11/zgrepzcat-grepbinary-file-standard.html"&gt;zgrepやzcat | grepでBinary file (standard input) matchesが出た場合の対処法&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;ログイン時にzshを使う&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;which zsh
/usr/bin/zsh
chsh
Changing the login shell &lt;span class="k"&gt;for&lt;/span&gt; xxx
Enter the new value, or press ENTER &lt;span class="k"&gt;for&lt;/span&gt; the default
    Login Shell &lt;span class="o"&gt;[&lt;/span&gt;/path/to/sh&lt;span class="o"&gt;]&lt;/span&gt;: 
/usr/bin/zsh &lt;span class="c1"&gt;#と入力&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;同じ内容のファイルを検出する&lt;/h2&gt;
&lt;p&gt;fdupsを使う&lt;/p&gt;
&lt;h3&gt;インストール&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo aptitude install fdups
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;実行&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;fdups &amp;lt;オプション&amp;gt; 対象のフォルダ...
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;対象のフォルダは複数指定可能
オプションは&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;r（下位フォルダも検索）&lt;/li&gt;
&lt;li&gt;d（重複ファイルを削除する）&lt;/li&gt;
&lt;li&gt;f（最初に表示されたファイルを除く）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;が良く使われる&lt;/p&gt;
&lt;p&gt;参考：&lt;a href="http://ubulog.blogspot.com/2009/01/ubuntu.html"&gt;Ubuntuで重複ファイルを削除する&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;参考：&lt;a href="http://ubulog.blogspot.com/2009/01/ubuntu.html"&gt;Ubuntuで重複ファイルを削除する&lt;/a&gt;&lt;/p&gt;</content><category term="memo"></category><category term="linux"></category></entry><entry><title>作業メモ(2017-10-18)</title><link href="http://blog.shigepon.info/blog/2017/10/17/memo_171018/" rel="alternate"></link><published>2017-10-17T14:30:00+09:00</published><updated>2017-11-02T15:30:00+09:00</updated><author><name>thoz</name></author><id>tag:blog.shigepon.info,2017-10-17:/blog/2017/10/17/memo_171018/</id><summary type="html"></summary><content type="html">&lt;h2&gt;VirtualBox上のUbuntuとMac間でフォルダ共有&lt;/h2&gt;
&lt;p&gt;参考:
+ &lt;a href="https://gijutsutecho.wordpress.com/2015/08/17/ubuntu%E3%81%A8mac%E3%81%A8%E3%81%AE%E3%83%95%E3%82%A9%E3%83%AB%E3%83%80%E5%85%B1%E6%9C%89%E6%96%B9%E6%B3%95virtual-box/"&gt;UbuntuとMacとのフォルダ共有方法@Virtual Box&lt;/a&gt;
+ &lt;a href="http://giraffydev.hatenablog.com/entry/set-share-folder-mount-point-permissions"&gt;Virtualboxの共有フォルダのマウント位置やパーミッションを調整する&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Virtualboxのマネージャーで設定-&amp;gt;共有フォルダでMac上の適当なフォルダ（例としてvb_share_mac）を指定&lt;/li&gt;
&lt;li&gt;自動マウントしない場合は自動マウントをチェックしなくて良い&lt;/li&gt;
&lt;li&gt;Ubuntu側の適当なフォルダ（例：/home/ユーザー名/vb_share）に次のコマンドでマウント。権限は全て与える&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ sudo mount -t vboxsf vb_share_mac /home/ユーザー名/vb_share -o &lt;span class="nv"&gt;fmode&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;777&lt;/span&gt;,dmode&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;777&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;マウント終了は次のコマンド&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ sudo umount /home/ユーザー名/vb_share
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;出力に行番号を追加&lt;/h2&gt;
&lt;h2&gt;sedで良く使うメモ&lt;/h2&gt;
&lt;p&gt;&lt;a href="http://blog.shigepon.info/blog/2017/11/02/linux_memo/"&gt;linuxメモ&lt;/a&gt;に移動&lt;/p&gt;
&lt;h2&gt;Rでプロット&lt;/h2&gt;
&lt;p&gt;Rを入れておくとプロット用のソフトを入れなくてもプロット出来る。
表データの計算結果を表示するのも手軽で便利。&lt;/p&gt;
&lt;p&gt;参考：
+ &lt;a href="http://monge.tec.fukuoka-u.ac.jp/R_analysis/graphics_plot01.html"&gt;plot()関数を使った散布図によるデータの視覚化&lt;/a&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ R
&lt;span class="c1"&gt;# ヘッダ無し。カンマ区切りのcsvを読み込む。カラムは最低3列ないとエラーが出るので、2列データの場合は3列目にダミーデータを入れるとかしたら良さそう？&lt;/span&gt;
&amp;gt; d &amp;lt;- read.table&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;data.csv&amp;quot;&lt;/span&gt;, &lt;span class="nv"&gt;sep&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;,&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;# x軸を1カラム目、y軸を2カラム目でプロット&lt;/span&gt;
&amp;gt; plot&lt;span class="o"&gt;(&lt;/span&gt;d&lt;span class="nv"&gt;$V1&lt;/span&gt;, d&lt;span class="nv"&gt;$V2&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;# x軸を1カラム目、y軸を2カラム目で折れ線グラフを書く&lt;/span&gt;
&amp;gt; plot&lt;span class="o"&gt;(&lt;/span&gt;d&lt;span class="nv"&gt;$V1&lt;/span&gt;, d&lt;span class="nv"&gt;$V2&lt;/span&gt;, &lt;span class="nv"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;l&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;# x軸を1カラム目、y軸を2カラム目と3カラム目の積で折れ線グラフを書く&lt;/span&gt;
&amp;gt; plot&lt;span class="o"&gt;(&lt;/span&gt;d&lt;span class="nv"&gt;$V1&lt;/span&gt;, d&lt;span class="nv"&gt;$V2&lt;/span&gt;*d&lt;span class="nv"&gt;$V3&lt;/span&gt;, &lt;span class="nv"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;l&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;目盛り&lt;/h4&gt;
&lt;p&gt;目盛りの数を指定するにはxaxpとyaxpを指定する。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt; plot(d$V1, d$V2, type=&amp;quot;l&amp;quot;,yaxp=c(-1,1,15))
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;という書き方だとy軸を-1から1からとして、15個目盛りを用意する形になる。&lt;/p&gt;
&lt;h4&gt;グリッド&lt;/h4&gt;
&lt;p&gt;グリッド付きにするにはgridを付ける&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt; plot(d$V1, d$V2, type=&amp;quot;l&amp;quot;,panel.first=grid())
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;グリッド
の数を指定したい時はnx=10、ny=10のように指定する。&lt;/p&gt;
&lt;h4&gt;2つ以上のy値を重ね合わせる&lt;/h4&gt;
&lt;p&gt;参考：&lt;a href="https://stackoverflow.com/questions/6853204/plotting-multiple-curves-same-graph-and-same-scale"&gt;Stack-Overflow:Plotting multiple curves same graph and same scale&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;2つ以上の値を1つのグラフに表示したい場合はpar(new=T)コマンドの後、plotを再度呼び出すことで出来る。その時最初のplotと次のplotで軸をylimパラメーターを用いて合わせておく&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt; plot(d$V1, d$V2, type=&amp;quot;l&amp;quot;, ylim=range(c(d$V2, d$V3)))
&amp;gt; par(new=T)
&amp;gt; plot(d$V1, d$V3, ylim=range(c(d$V2, d$V3)), col=2)#col=2は赤でプロット
&lt;/pre&gt;&lt;/div&gt;</content><category term="memo"></category></entry><entry><title>Pelicanメモ</title><link href="http://blog.shigepon.info/blog/2016/10/25/pelican-memo/" rel="alternate"></link><published>2016-10-25T15:35:38+09:00</published><updated>2016-10-25T15:35:38+09:00</updated><author><name>shigepon</name></author><id>tag:blog.shigepon.info,2016-10-25:/blog/2016/10/25/pelican-memo/</id><summary type="html"></summary><content type="html">&lt;p&gt;pythonでブログを書くアプリ「&lt;a href="http://docs.getpelican.com/en/stable/"&gt;Pelican&lt;/a&gt;」についてメモ&lt;/p&gt;
&lt;h2&gt;記事の並び替え方法を変える&lt;/h2&gt;
&lt;p&gt;ARTICLE_ORDER_BYに文字列で指定する。関数で定義することも出来るみたいだが、まだ方法が分からない。&lt;/p&gt;
&lt;p&gt;pelicanconf.pyを編集&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;...&lt;/span&gt;
&lt;span class="n"&gt;ARTICLE_ORDER_BY&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;reverse-date&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;「reverse-」を付けると逆順になる。&lt;/p&gt;
&lt;p&gt;記事のマークダウンで指定するメタデータが並び替えの対象になる。
メタデータは全ての記事に付けていないとエラーが出る。&lt;/p&gt;
&lt;p&gt;参考：&lt;a href="http://docs.getpelican.com/en/3.6.3/settings.html"&gt;Settings — Pelican 3.6.3 documentation&lt;/a&gt;&lt;/p&gt;
&lt;!-- more --&gt;</content><category term="memo"></category><category term="pelican"></category><category term="python"></category></entry><entry><title>Django データベース関連メモ</title><link href="http://blog.shigepon.info/blog/2016/10/25/django-db-memo/" rel="alternate"></link><published>2016-10-25T14:35:38+09:00</published><updated>2016-10-25T14:35:38+09:00</updated><author><name>shigepon</name></author><id>tag:blog.shigepon.info,2016-10-25:/blog/2016/10/25/django-db-memo/</id><summary type="html"></summary><content type="html">&lt;p&gt;Djangoのモデルやデータベース関連のメモが多くなったので、データベースが直接関わる箇所をメモから切り離してみた。&lt;/p&gt;
&lt;h2&gt;リクエストパラメーターをモデルに入れる&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# views.py&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;a_view&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;hoge&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Fuga&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;GET&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;#新たにインスタンス作る場合&lt;/span&gt;
    &lt;span class="n"&gt;fuga&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Fuga&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;objects&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pk&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;hage&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Fuga&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;GET&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;instance&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;fuga&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;#既にあるインスタンスに入れる場合&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;instance=xxxとやるのを何度か忘れた＞＜&lt;/p&gt;
&lt;!-- more --&gt;

&lt;h2&gt;DjangoでGroup By&lt;/h2&gt;
&lt;p&gt;DjangoでGroup Byして何個かのフィールドのデータで例えば、日付とその日に登録したデータの件数だけ欲しい時&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# views.py&lt;/span&gt;
&lt;span class="n"&gt;q&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Hoge&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;objects&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;date__gte&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;date&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;date__lt&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;dto&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;extra&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;date&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;date_trunc(&amp;#39;day&amp;#39;,date)&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="n"&gt;q&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;query&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;group_by&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;date&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;values&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;q&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;values&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;date&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;order_by&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;annotate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Count&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;id&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;


&lt;span class="err"&gt;こんな感じでいける。ちなみに&lt;/span&gt;&lt;span class="n"&gt;PostgreSQL&lt;/span&gt;&lt;span class="err"&gt;。&lt;/span&gt;&lt;span class="n"&gt;dateが時間の情報も持っているのでPostgreSQLのdate_trunc関数を使ってdateを日付の情報だけにしてから&lt;/span&gt;&lt;span class="err"&gt;、&lt;/span&gt;&lt;span class="n"&gt;group_byする&lt;/span&gt;&lt;span class="err"&gt;。&lt;/span&gt;
&lt;span class="n"&gt;annotateは集計した値を新しいフィールド&lt;/span&gt;&lt;span class="err"&gt;（ここだと&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="err"&gt;）に入れる。&lt;/span&gt;
&lt;span class="err"&gt;例えば&lt;/span&gt;&lt;span class="n"&gt;values&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cでアクセスできる&lt;/span&gt;&lt;span class="err"&gt;。このコードで、日付とその日に登録したデータ件数が入った辞書のリストを得ることが出来る&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;QuerySetで吐いたクエリを出力&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# views.py&lt;/span&gt;
&lt;span class="n"&gt;h&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Hoge&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;objects&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;all&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;h&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;query&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;でおk。でもクエリが例外出す時には出せないような・・・&lt;/p&gt;
&lt;p&gt;debug_toolbar使えば見れるか&lt;/p&gt;
&lt;p&gt;参考：&lt;a href="http://programmer-jobs.blogspot.jp/2013/01/djangosql.html"&gt;Djangoで、デバック用のSQLクエリの表示 一言多いプログラマーの独り言&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;MultiValueDictKeyError&lt;/h2&gt;
&lt;p&gt;モデルをgetする時にキーに何も値が指定されてなかったりすると起こる。例えば&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;instance&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;SampleModel&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;objects&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;でkeyに何も設定されてないと起こるみたい。出た時に何回かイチイチぐぐったのでメモ&lt;/p&gt;
&lt;h2&gt;PostgreSQLでDateTimeFieldの値を日付に対してグルーピングしたい&lt;/h2&gt;
&lt;p&gt;PostgreSQLではタイムゾーン入りのタイムスタンプで登録されるので、&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;q&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Hoge&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;objects&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;extra&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;date&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;date_trunc(&amp;#39;day&amp;#39;,date)&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="n"&gt;q&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;query&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;group_by&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;date&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;みたいな構文で日付だけ取り出して、グルーピングしようとすると、PostgreSQLの設定でタイムゾーンがUTCになっていた場合に、2014/12/17 00:00:00+9のデータは2014/12/16 15:00:00+0と認識されるので12/16のデータとしてグルーピングされてしまう。日本のタイムゾーンでやってると、これはまずいので、以下のようなコードにすると良い&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;q&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Hoge&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;objects&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;extra&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;date&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;date_trunc(&amp;#39;day&amp;#39;,date AT TIME ZONE &amp;#39;JST&amp;#39;)&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="n"&gt;q&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;query&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;group_by&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;date&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Many to manyなモデルで中間テーブルをthroughで指定、かつ自己参照な場合の設定&lt;/h2&gt;
&lt;p&gt;参考：&lt;a href="http://stackoverflow.com/questions/3880489/how-do-i-write-a-django-model-with-manytomany-relationsship-with-self-through-a"&gt;How do I write a Django model with ManyToMany relationsship with self through a Model - Stack Overflow&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;symmetrical設定をすると良いらしい&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Member&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Model&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CharField&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;max_length&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;friends&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ManyToManyField&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;self&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;through&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;MemberFriends&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;symmetrical&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;MemberFriends&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Model&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;f&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ForeignKey&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Member&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;related_name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;f&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ForeignKey&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Member&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;related_name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;t&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;comment&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;model&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CharField&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;max_length&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;こんな感じ&lt;/p&gt;
&lt;h2&gt;dbにインデックスを付ける&lt;/h2&gt;
&lt;p&gt;インデックスの場合はフィールド定義にdb_index=Trueを付けるとおk&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;hoge&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;TextField&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;db_index&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;true&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;複合インデックスの場合はMetaクラスでindex_togetherを定義する&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Hoge&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Model&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
  &lt;span class="o"&gt;....&lt;/span&gt;
  &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Meta&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;index_together&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
      &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;hoge&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;fuga&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;この場合インデックス順はhoge-&amp;gt;fugaとなる。&lt;/p&gt;
&lt;h2&gt;ForeignKeyで逆参照をしたくない場合&lt;/h2&gt;
&lt;p&gt;related_nameを+にするか末尾に+を付けるかで対応出来る。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nv"&gt;user&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; models.ForeignKey&lt;span class="o"&gt;(&lt;/span&gt;User, &lt;span class="nv"&gt;related_name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;user+&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;こんな感じ&lt;/p&gt;
&lt;h2&gt;生sqlを使う時にin句にパラメーターを使いたい&lt;/h2&gt;
&lt;p&gt;タプルで指定すれば良い。リストは試してない。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nv"&gt;results&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; Hoge.objects.raw&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;select * from application_hoge where fuga in %s&amp;quot;&lt;/span&gt;, tuple&lt;span class="o"&gt;(&lt;/span&gt;fuga&lt;span class="o"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;参考：&lt;a href="http://stackoverflow.com/questions/6895051/passing-lists-or-tuples-as-arguments-in-django-raw-sql"&gt;passing lists or tuples as arguments in django raw sql - Stack Overflow&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;サブクエリの使い方&lt;/h2&gt;
&lt;p&gt;例えばMemberモデルにname (名前)やboss(上司の名前)、stage(肩書き)フィールドがあるとして、肩書きが部長の上司を持つMemberを取り出したい場合はこんな感じ&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;a_query&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Member&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;objects&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;stage&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;部長&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;value_list&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;name&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;b_query&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Member&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;objects&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;boss__in&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;a_query&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;select&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="n"&gt;member&lt;/span&gt; &lt;span class="k"&gt;where&lt;/span&gt; &lt;span class="n"&gt;boss&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;select&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="n"&gt;member&lt;/span&gt; &lt;span class="k"&gt;where&lt;/span&gt; &lt;span class="n"&gt;stage&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;部長&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;を実行したような感じになる。&lt;/p&gt;
&lt;p&gt;参考：&lt;a href="http://stackoverflow.com/questions/8556297/how-to-subquery-in-queryset-in-django"&gt;python - how to subquery in queryset in django? - Stack Overflow&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;モデル削除時にリレーション先を削除しない&lt;/h2&gt;
&lt;p&gt;リレーションを貼ったモデルを削除する時は、通常リレーション先のモデルも削除する。
その挙動を変えたい時は、ForeignKeyフィールドにon_deleteの項目を追加すると良い。
リレーション先を削除したくない場合は次のように書けば良い。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Hoge&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Model&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;fuga&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ForeignKey&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;null&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;on_delete&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SET_NULL&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;必ずnull=Trueが必要なことに注意。
他にも&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;CASCADE&lt;ul&gt;
&lt;li&gt;初期値&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;PROTECT&lt;ul&gt;
&lt;li&gt;削除しようとしたら例外を出す&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;SET_DEFAULT&lt;ul&gt;
&lt;li&gt;初期値を入れる（default=...が必要)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;SET&lt;ul&gt;
&lt;li&gt;削除時に関数を呼び出す&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;がある。&lt;/p&gt;
&lt;p&gt;参考：&lt;a href="https://docs.djangoproject.com/en/dev/ref/models/fields/#django.db.models.ForeignKey.on_delete"&gt;Model field reference | Django documentation | Django&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;リレーション先があるかどうかを調べるクエリ&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;Hoge&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;objects&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fuga__isnull&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;False&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;みたいにする&lt;/p&gt;
&lt;p&gt;参考：&lt;a href="http://stackoverflow.com/questions/13829082/filter-django-objects-where-related-object-exists"&gt;Filter Django objects where related object exists - Stack Overflow&lt;/a&gt;&lt;/p&gt;</content><category term="memo"></category><category term="django"></category><category term="python"></category></entry><entry><title>pythonのライブラリメモ</title><link href="http://blog.shigepon.info/blog/2016/10/25/python_libraries_memo/" rel="alternate"></link><published>2016-10-25T14:30:00+09:00</published><updated>2016-10-29T20:30:00+09:00</updated><author><name>thoz</name></author><id>tag:blog.shigepon.info,2016-10-25:/blog/2016/10/25/python_libraries_memo/</id><summary type="html">&lt;p&gt;pythonで使ってみたライブラリをメモしておく&lt;/p&gt;</summary><content type="html">&lt;p&gt;pythonのライブラリは様々な種類があるので、メモしておかないと、何がどう使えるのかさっぱり分からない（英語ページを見る羽目になる）のでメモしておく。&lt;/p&gt;
&lt;h2&gt;文字列の類似度を比較するーdifflib&lt;/h2&gt;
&lt;p&gt;文字列の類似度や差分を計算する時にはpythonの標準ライブラリの「&lt;a href="http://docs.python.jp/2/library/difflib.html"&gt;difflib&lt;/a&gt;」が使える&lt;/p&gt;
&lt;p&gt;類似度を計算するのはこんな感じ&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# -*- coding: utf-8 -*-&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;difflib&lt;/span&gt;

&lt;span class="n"&gt;str_from&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;ほげ&amp;quot;&lt;/span&gt;
&lt;span class="n"&gt;str_to&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;ふが&amp;quot;&lt;/span&gt;
&lt;span class="n"&gt;match&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;difflib&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SequenceMatcher&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;str_from&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;str_to&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ratio&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;こんな感じ&lt;/p&gt;
&lt;p&gt;参考：&lt;a href="http://blog.mudatobunka.org/entry/2016/05/08/154934"&gt;Python で文字列の類似度を比較する - 無駄と文化&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Djangoでcssやjavascriptを圧縮してインライン表示できるdjango_compressor&lt;/h2&gt;
&lt;h3&gt;インストール&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ pip install django_compressor
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;設定ファイル&lt;/h3&gt;
&lt;p&gt;settings.pyを編集&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;INSTALLED_APPS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;
&lt;span class="s1"&gt;&amp;#39;compressor&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;STATICFILES_FINDERS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;
&lt;span class="s1"&gt;&amp;#39;compressor.finders.CompressorFinder,&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;COMPRESS_ENABLED&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt; &lt;span class="c1"&gt;#DEBUG=Trueの状態で機能させたい時はこれを設定&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;テンプレート&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;\{% load compress %\}
\{% compress css inline %\}
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;link&lt;/span&gt; &lt;span class="na"&gt;rel&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;stylesheet&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;href&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;path/to/css&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
\{% endcompress %\}
\{% compress js inline %\}
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;script&lt;/span&gt; &lt;span class="na"&gt;src&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;path/to/js&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
\{% endcompress %\}
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;モバイル検出ーdjango-mobile&lt;/h2&gt;
&lt;p&gt;djangoでモバイル検出してテンプレート振り分けたり、条件分けしたい時
に使うライブラリ&lt;/p&gt;
&lt;h3&gt;インストール&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pip install django_mobile
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;設定&lt;/h3&gt;
&lt;p&gt;settings.pyを編集&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;INSTALLED_APPS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;
&lt;span class="s1"&gt;&amp;#39;django_mobile&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;MIDDLEWARE_CLASSES&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;
&lt;span class="s1"&gt;&amp;#39;django_mobile.middleware.MobileDetectionMiddleware&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="s1"&gt;&amp;#39;django_mobile.middleware.SetFlavourMiddleware&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;TEMPLATES&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[{&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;
&lt;span class="s1"&gt;&amp;#39;OPTIONS&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:{&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;
&lt;span class="s1"&gt;&amp;#39;django_mobile.context_processors.flavour&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;
&lt;span class="p"&gt;}]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;loaderの設定しなかったけど、条件分岐に使っただけなので出来た。テンプレート振り分けはやってない。&lt;/p&gt;
&lt;h3&gt;テンプレート内でのモバイル判定&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;You {% if flavour == &amp;quot;mobile&amp;quot; %}use mobile{% else %}don&amp;#39;t use mobile{% endif %}.
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;参考：&lt;a href="https://github.com/gregmuellegger/django-mobile"&gt;GitHub - gregmuellegger/django-mobile: Detect mobile browsers and serve different template flavours to them.&lt;/a&gt;&lt;/p&gt;</content><category term="python"></category><category term="memo"></category></entry><entry><title>PostgreSQLメモ</title><link href="http://blog.shigepon.info/blog/2016/09/16/postgresql-memo/" rel="alternate"></link><published>2016-09-16T21:24:42+09:00</published><updated>2016-09-16T21:24:42+09:00</updated><author><name>shigepon</name></author><id>tag:blog.shigepon.info,2016-09-16:/blog/2016/09/16/postgresql-memo/</id><summary type="html"></summary><content type="html">&lt;p&gt;rhaco2をPostgreSQL8.3で使えるように色々調べていくうちに学んだメモ。&lt;/p&gt;
&lt;h2&gt;insert時に「デフォルト値を入れる」だけの処理をしたい場合&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;insert&lt;/span&gt; &lt;span class="k"&gt;into&lt;/span&gt; &lt;span class="err"&gt;テーブル名&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;でOK&lt;/p&gt;
&lt;h2&gt;integerのカラムとかにlikeを適用したい場合&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;select&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="err"&gt;テーブル名&lt;/span&gt; &lt;span class="k"&gt;where&lt;/span&gt; &lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nb"&gt;text&lt;/span&gt; &lt;span class="k"&gt;like&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;#&lt;/span&gt;&lt;span class="mi"&gt;039&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="n"&gt;abc&lt;/span&gt;&lt;span class="o"&gt;%&amp;amp;#&lt;/span&gt;&lt;span class="mi"&gt;039&lt;/span&gt;&lt;span class="p"&gt;;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;!-- more --&gt;

&lt;p&gt;のようにカラムをテキストにキャストする。MySQLのvarcharをselectする時はデフォルトignore case。ついでにtrimも勝手にかける？らしい&lt;/p&gt;
&lt;h2&gt;show column&lt;/h2&gt;
&lt;p&gt;Mysqlで使えるshow columnは無いが、information_schemaの情報をselectすることで同じようなことが出来る。
ただし、create table時にserialで指定してもinformation_schema.columnsから取得できるカラム情報はinteger(int4)のみ。
なのでserialと判定するにはカラムがintegerであり、かつデフォルト値としてnextvalが指定されていることなど、複合的にチェックする必要がある。&lt;/p&gt;
&lt;h2&gt;cronでsqlを実行&lt;/h2&gt;
&lt;p&gt;毎日0時0分に実行する場合&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;0 0 * * * /path/to/psql -U username -c &amp;quot;sql&amp;quot; database &amp;gt; /dev/null
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;select結果でinsert, update&lt;/h2&gt;
&lt;p&gt;insertの場合はinsert文の後でselect文を書く。以下は一例&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;insert&lt;/span&gt; &lt;span class="k"&gt;into&lt;/span&gt; &lt;span class="k"&gt;table&lt;/span&gt; &lt;span class="k"&gt;select&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="n"&gt;table2&lt;/span&gt; &lt;span class="k"&gt;where&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="k"&gt;like&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;hoge%&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;別テーブルへの一部データのバックアップ代わりにも使える&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;insert&lt;/span&gt; &lt;span class="k"&gt;into&lt;/span&gt; &lt;span class="n"&gt;backup_table&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;select&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="k"&gt;table&lt;/span&gt; &lt;span class="k"&gt;where&lt;/span&gt; &lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;updateは次のように行う&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;update&lt;/span&gt; &lt;span class="k"&gt;table&lt;/span&gt; &lt;span class="k"&gt;set&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;select&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="n"&gt;table2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="k"&gt;where&lt;/span&gt; &lt;span class="k"&gt;table&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;どの範囲のデータが更新されるかに注意してwhere句を使う。上の場合、tの中でwhere句を使う場合とで異なる結果になる場合がある。&lt;/p&gt;
&lt;h2&gt;インデックス一覧を表示&lt;/h2&gt;
&lt;p&gt;インデックス一覧を表示。インデックスを2重に登録しようとするとエラーが出るので、チェックに使う&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;SELECT&lt;/span&gt; &lt;span class="n"&gt;tablename&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;indexname&lt;/span&gt; &lt;span class="k"&gt;FROM&lt;/span&gt; &lt;span class="n"&gt;pg_indexes&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;ビューの一覧を表示&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;SELECT&lt;/span&gt; &lt;span class="n"&gt;viewname&lt;/span&gt; &lt;span class="k"&gt;FROM&lt;/span&gt; &lt;span class="n"&gt;pg_views&lt;/span&gt; &lt;span class="k"&gt;ORDER&lt;/span&gt; &lt;span class="k"&gt;BY&lt;/span&gt; &lt;span class="n"&gt;viewname&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;ビューの定義を調べる&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;select&lt;/span&gt; &lt;span class="n"&gt;definition&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="n"&gt;pg_views&lt;/span&gt; &lt;span class="k"&gt;WHERE&lt;/span&gt; &lt;span class="n"&gt;viewname&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;ビュー名&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;psqlで実行結果を見やすくする&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;psql&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;
&lt;span class="n"&gt;psql&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;select&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="k"&gt;table&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;カラムの数が多いと表示が崩れやすいので、これで見やすくなる&lt;/p&gt;
&lt;h2&gt;カラム追加時にNOT NULLを指定する手順&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;ALTER&lt;/span&gt; &lt;span class="k"&gt;TABLE&lt;/span&gt; &lt;span class="k"&gt;table_name&lt;/span&gt; &lt;span class="k"&gt;ADD&lt;/span&gt; &lt;span class="k"&gt;COLUMN&lt;/span&gt; &lt;span class="k"&gt;column_name&lt;/span&gt; &lt;span class="nb"&gt;text&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;ALTER&lt;/span&gt; &lt;span class="k"&gt;TABLE&lt;/span&gt; &lt;span class="k"&gt;table_name&lt;/span&gt; &lt;span class="k"&gt;ALTER&lt;/span&gt; &lt;span class="k"&gt;COLUMN&lt;/span&gt; &lt;span class="k"&gt;column_name&lt;/span&gt; &lt;span class="k"&gt;SET&lt;/span&gt; &lt;span class="k"&gt;DEFAULT&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;UPDATE&lt;/span&gt; &lt;span class="k"&gt;table_name&lt;/span&gt; &lt;span class="k"&gt;SET&lt;/span&gt; &lt;span class="k"&gt;column_name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;ALTER&lt;/span&gt; &lt;span class="k"&gt;TABLE&lt;/span&gt; &lt;span class="k"&gt;table_name&lt;/span&gt; &lt;span class="k"&gt;ALTER&lt;/span&gt; &lt;span class="k"&gt;COLUMN&lt;/span&gt; &lt;span class="k"&gt;column_name&lt;/span&gt; &lt;span class="k"&gt;SET&lt;/span&gt; &lt;span class="k"&gt;NOT&lt;/span&gt; &lt;span class="k"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;こんな感じで複数業使ってNOT NULL制約を入れる&lt;/p&gt;
&lt;h2&gt;テーブル（ビュー）のスキーマをファイルに書き込む&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ pg_dump -s -t table_name db_name &amp;gt; file_name
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;これだけ。反映したい時は&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ cat file_name &lt;span class="p"&gt;|&lt;/span&gt; psql db_name
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;でおk&lt;/p&gt;
&lt;h2&gt;csvの取り込み&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;1,&amp;quot;hoge&amp;quot;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;みたいなデータを/path/to/csvに保存して&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;copy&lt;/span&gt; &lt;span class="n"&gt;tablename&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;/path/to/csv&amp;#39;&lt;/span&gt; &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="n"&gt;csv&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;とpsql で実行すると取り込みできる。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;copy&lt;/span&gt; &lt;span class="n"&gt;tablename&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;column1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;column2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;/path/to/csv&amp;#39;&lt;/span&gt; &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="n"&gt;csv&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;とやれば、カラム名と順序の指定が可能&lt;/p&gt;
&lt;h2&gt;SQL結果をcsvに出力&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ psql db_name -c &lt;span class="s2"&gt;&amp;quot;SQL&amp;quot;&lt;/span&gt; -A -F, -t &amp;gt; filename
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;psql内では（タブ区切り出力とする）&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ psql
&lt;span class="se"&gt;\o&lt;/span&gt; filename
&lt;span class="se"&gt;\a&lt;/span&gt;
&lt;span class="se"&gt;\f&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;\t&amp;#39;&lt;/span&gt;
SQL
&lt;span class="se"&gt;\o&lt;/span&gt;
&lt;span class="se"&gt;\q&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;IN句に複数条件を指定&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;select&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="n"&gt;hoge&lt;/span&gt; &lt;span class="k"&gt;where&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;select&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="n"&gt;fuga&lt;/span&gt; &lt;span class="k"&gt;where&lt;/span&gt; &lt;span class="n"&gt;hage&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="k"&gt;select&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="n"&gt;hoge&lt;/span&gt; &lt;span class="k"&gt;where&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;fuga&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;hage&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;abc&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;def&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;みたいに指定すればおk&lt;/p&gt;
&lt;h2&gt;ユーザー定義関数の定義内容を表示&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;select&lt;/span&gt; &lt;span class="n"&gt;procsrc&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="n"&gt;pg_proc&lt;/span&gt; &lt;span class="k"&gt;where&lt;/span&gt; &lt;span class="n"&gt;proname&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;関数名&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;結構こんな感じでシステム用テーブルとかカラムとか色々あるので大変。&lt;/p&gt;
&lt;h2&gt;実行中のsql確認&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;select&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="n"&gt;pg_stat_activity&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;実行中sqlをストップ&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;select&lt;/span&gt; &lt;span class="n"&gt;pg_cancel_backend&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="err"&gt;プロセス&lt;/span&gt;&lt;span class="n"&gt;ID&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;データベースやテーブルのサイズ取得&lt;/h2&gt;
&lt;p&gt;データベース&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;select&lt;/span&gt; &lt;span class="n"&gt;pg_database_size&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;dbname&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;テーブル&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;select&lt;/span&gt; &lt;span class="n"&gt;pg_relation_size&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;tablename&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;select結果を配列にして、比較する&lt;/h2&gt;
&lt;p&gt;テーブル(event)に、日付(date)とイベントコード(code)カラムがあって、あるイベントコードのイベントと、全く同じ日程のイベントがあるかどうか調べる必要があったんだけど、配列使ったら上手く出来たのでメモ&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;select&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;select&lt;/span&gt; &lt;span class="n"&gt;array_agg&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;date_trunc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;day&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nb"&gt;date&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;code&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;select&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="n"&gt;event&lt;/span&gt; &lt;span class="k"&gt;where&lt;/span&gt; &lt;span class="k"&gt;order&lt;/span&gt; &lt;span class="k"&gt;by&lt;/span&gt; &lt;span class="nb"&gt;date&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="k"&gt;group&lt;/span&gt; &lt;span class="k"&gt;by&lt;/span&gt; &lt;span class="n"&gt;code&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="k"&gt;where&lt;/span&gt; &lt;span class="n"&gt;code&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;...&amp;#39;&lt;/span&gt; &lt;span class="k"&gt;and&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;d&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;ARRAY&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;select&lt;/span&gt; &lt;span class="n"&gt;date_trunc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;day&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nb"&gt;date&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="n"&gt;event&lt;/span&gt; &lt;span class="k"&gt;where&lt;/span&gt; &lt;span class="n"&gt;code&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;...&amp;#39;&lt;/span&gt; &lt;span class="k"&gt;order&lt;/span&gt; &lt;span class="k"&gt;by&lt;/span&gt; &lt;span class="nb"&gt;date&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;こんな感じで出来た。ポイントはgroup_byとarray_aggを使うとgroup化した時にそれぞれの行にあった数字をまとめて配列化できることと、配列は順序を同じにしておかないと比較出来ないので、予めorderをかけておくこと。select結果をそのまま配列にするにはARRAYでいけること。もうちょっとsqlをスッキリ出来そうだけど、とりあえずこんな感じ。&lt;/p&gt;
&lt;h2&gt;正規表現関連&lt;/h2&gt;
&lt;h3&gt;置換&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;select&lt;/span&gt; &lt;span class="n"&gt;regex_replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;columnname&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;pattern&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;replace&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="n"&gt;tablename&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;検索&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;select&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="n"&gt;tablename&lt;/span&gt; &lt;span class="k"&gt;where&lt;/span&gt; &lt;span class="n"&gt;columnname&lt;/span&gt; &lt;span class="o"&gt;~&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;pattern&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;psqlでパスワードを入力しない方法&lt;/h2&gt;
&lt;p&gt;~HOME/.pgpassを作成する(Linuxの場合)&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;hostname&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;port&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;database&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;username&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;password&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;参考：&lt;a href="http://saikyoline.jp/weblog/2005/10/14/234742.html"&gt;パスワード入力なしでpsql » サイキョウライン&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;全データベースの物理ファイルサイズ&lt;/h2&gt;
&lt;p&gt;&lt;a href="http://readit.l8r.in/post-289/"&gt;[Postgres]全データベースの物理ファイルサイズを取得 | Read it later.&lt;/a&gt;をそのまま使えば良い&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;select datname, pg_size_pretty(pg_database_size(datname)) from pg_database;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;psqlでsqlにパラメータを渡す&lt;/h2&gt;
&lt;p&gt;vオプションを用いる&lt;/p&gt;
&lt;p&gt;&lt;a href="http://stackoverflow.com/questions/7389416/postgresql-how-to-pass-parameters-from-command-line"&gt;PostgreSQL: How to pass parameters from command line? - Stack Overflow&lt;/a&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;#&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;sql&lt;/span&gt;
&lt;span class="k"&gt;select&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;vint&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;vstr&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ psql -v &lt;span class="nv"&gt;vint&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;10&lt;/span&gt; -v &lt;span class="nv"&gt;vstr&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&amp;#39;hoge&amp;#39;&amp;quot;&lt;/span&gt; -f a.sql dbname
&lt;span class="m"&gt;10&lt;/span&gt;  hoge
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;-cオプションで実行するsqlを指定する場合は無理っぽい&lt;/p&gt;
&lt;h2&gt;サブクエリで2列以上を返す&lt;/h2&gt;
&lt;p&gt;調べるのに結構時間かかった。配列を使うと上手く出来る&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;select&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;sub_array&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;hoge&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;sub_array&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;fuga&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;select&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;select&lt;/span&gt; &lt;span class="nb"&gt;array&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="k"&gt;avg&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;hoge&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="n"&gt;stddev&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;hoge&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="n"&gt;table1&lt;/span&gt; &lt;span class="k"&gt;where&lt;/span&gt; &lt;span class="p"&gt;...)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;sub_array&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="n"&gt;table1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="k"&gt;where&lt;/span&gt; &lt;span class="p"&gt;...;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;こんな感じで一旦複数列の値を配列に格納して、1列扱いとして、その配列を展開することでいける。ちなみに配列の添字は0スタートではなく、1スタートみたい。ある期間での集計値を各行に追加したいとかそんな場合にとても使える。&lt;/p&gt;
&lt;p&gt;参考：&lt;a href="http://yanor.net/wiki/?PostgreSQL%2FSQL%2F%E3%82%B5%E3%83%96%E3%82%AF%E3%82%A8%E3%83%AA%E3%81%A7%E8%A4%87%E6%95%B0%E3%82%AB%E3%83%A9%E3%83%A0%E3%82%92%E8%BF%94%E3%81%99"&gt;PostgreSQL/SQL/サブクエリで複数カラムを返す - yanor.net/wiki&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;クエリを止める&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;select&lt;/span&gt; &lt;span class="n"&gt;pg_stat_activity&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;でpidを確認して&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;select&lt;/span&gt; &lt;span class="n"&gt;pg_cancel_backend&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pid&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;でおk&lt;/p&gt;
&lt;h2&gt;集計に対するnullの扱い&lt;/h2&gt;
&lt;p&gt;sum, min, maxでは特に気にする必要は無いがcount, avg, stddevなどの集計の場合、nullは無視される。これを応用して、色んな条件での平均を計算したりできる。例えば毎日のデータに1週間分、1ヶ月分の集計を追加するとか出来る。&lt;/p&gt;
&lt;p&gt;参考：&lt;a href="http://fdays.blogspot.jp/2010/05/sql-null.html"&gt;floatingdays: SQLの集計関数で NULLを含む列を集計する場合の注意点&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;マテリアライズド・ビューの定義を表示&lt;/h2&gt;
&lt;p&gt;マテリアライズド・ビューの情報は通常のビューと違い、pg_matviewsに入っている。定義を確認する場合は&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;select&lt;/span&gt; &lt;span class="n"&gt;definition&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="n"&gt;pg_matviews&lt;/span&gt; &lt;span class="k"&gt;where&lt;/span&gt; &lt;span class="n"&gt;matviewname&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;ビュー名&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;でおk&lt;/p&gt;
&lt;h2&gt;コマンドラインでpsqlした結果をファイルに保存&lt;/h2&gt;
&lt;p&gt;カラム名などの情報無しでpsqlした結果を保存する&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ psql dbname -A -t -c &lt;span class="s2"&gt;&amp;quot;select ...&amp;quot;&lt;/span&gt; &amp;gt; result.txt
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;オプションで&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;-F ,
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;とか加えるとカンマ区切りになる&lt;/p&gt;
&lt;h2&gt;配列フィールドがhogeを含む条件をsqlで&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;select * from hoge where arr &amp;amp;&amp;amp; &amp;#39;fuga&amp;#39;;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;でarrという配列フィールドにfugaを含むものを取り出せる。良く使いそうなのでメモ&lt;/p&gt;
&lt;p&gt;参考：&lt;a href="https://www.postgresql.jp/document/9.4/html/functions-array.html"&gt;配列関数と演算子&lt;/a&gt;&lt;/p&gt;</content><category term="PostgreSQL"></category><category term="memo"></category></entry><entry><title>visual studio メモ</title><link href="http://blog.shigepon.info/blog/2016/03/08/visual-studio-memo/" rel="alternate"></link><published>2016-03-08T09:50:36+09:00</published><updated>2016-03-08T09:50:36+09:00</updated><author><name>shigepon</name></author><id>tag:blog.shigepon.info,2016-03-08:/blog/2016/03/08/visual-studio-memo/</id><summary type="html"></summary><content type="html">&lt;h2&gt;Visual Studio 2010でLNK1123エラーが出る&lt;/h2&gt;
&lt;p&gt;Visual Studio Express 2012をインストールした後で、Visual Studio 2010でビルドしようとしたらエラーが出た。&lt;a href="http://www.microsoft.com/ja-jp/download/details.aspx?id=23691"&gt;Visual C++ Service Pack 1&lt;/a&gt;以降をインストールすれば良い。&lt;/p&gt;
&lt;p&gt;参考：&lt;a href="http://minus9d.hatenablog.com/entry/20121212/1355312498"&gt;VS2010でLNK1123エラーが出たら、SP1にしてみよう - minus9d's diary&lt;/a&gt;&lt;/p&gt;</content><category term="memo"></category><category term="visualstudio"></category></entry><entry><title>PCLメモ</title><link href="http://blog.shigepon.info/blog/2016/01/29/pcl-memo/" rel="alternate"></link><published>2016-01-29T08:42:31+09:00</published><updated>2016-01-29T08:42:31+09:00</updated><author><name>shigepon</name></author><id>tag:blog.shigepon.info,2016-01-29:/blog/2016/01/29/pcl-memo/</id><summary type="html"></summary><content type="html">&lt;p&gt;マルチプラットフォーム用に開発するにはPCL(ポータブル・クラス・ライブラリ)を使うと良いらしいのだが情報が少ない気がするので、調べたことをメモしていく&lt;/p&gt;
&lt;p&gt;それにしてもどこかに.netでこう書いてるものをPCLで書くには・・・みたいな書籍とかサイトとか無いものか。現在はstack&lt;/p&gt;
&lt;h2&gt;基本事項&lt;/h2&gt;
&lt;p&gt;プロジェクト生成時にポータブルライブラリを選択すればPCLで開発出来るようになる。すでに.netのプロジェクトで開発している場合にPCLにする方法はシラン。&lt;/p&gt;
&lt;p&gt;.netで使ってる機能で使えなくなるものが多い。ファイルアクセスなんかがSystem.IOに入ってなくて出来なくなるので、NugetでPCL関連のライブラリを調べるのは必須&lt;/p&gt;
&lt;p&gt;参考：&lt;a href="http://www.buildinsider.net/mobile/insidexamarin/13"&gt;Xamarinと、ポータブル・クラス・ライブラリ（PCL） - Build Insider&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;ファイルアクセス&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://github.com/dsplaisted/PCLStorage"&gt;PCL Storage&lt;/a&gt;を使うとよしなにやってくれる。Nugetから入れれば使えるようになる。&lt;/p&gt;
&lt;h2&gt;使えなくなるメソッドが結構ある&lt;/h2&gt;
&lt;p&gt;例えばSystem.Type.GetPropertyでPropertyInfoを取得しようとしても、メソッド無いので無理。この場合はSystem.Refrectionを使う&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="nn"&gt;System.Refrection&lt;/span&gt;
&lt;span class="p"&gt;...&lt;/span&gt;
&lt;span class="n"&gt;PropertyInfo&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;typeof&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Hoge&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;GetRuntimeProperty&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;property&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;いちいちこういうのがあるので、結構大変。&lt;/p&gt;
&lt;h2&gt;TypeよりはなるべくTypeInfoを使うのが良さげ&lt;/h2&gt;
&lt;p&gt;PCLだとType.IsClassとか無いけどTypeInfo.IsClassはある。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;assembly&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DefinedTypes&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Where&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;IsClass&lt;/span&gt; &lt;span class="p"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="p"&gt;!&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;IsAbstract&lt;/span&gt; &lt;span class="p"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ImplementedInterfaces&lt;/span&gt;
        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Any&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;GetTypeInfo&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="n"&gt;IsGenericType&lt;/span&gt; &lt;span class="p"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;GetGenericTypeDefinition&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;==&lt;/span&gt; &lt;span class="n"&gt;commandHandlerOpenGenericType&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Select&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;AsType&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;みたいにして必要なインターフェースを持つクラスの型情報を取り出すとか出来る&lt;/p&gt;
&lt;p&gt;参考：&lt;a href="http://stackoverflow.com/questions/20524263/portable-class-library-reflection"&gt;c# - Portable Class Library Reflection - Stack Overflow&lt;/a&gt;&lt;/p&gt;</content><category term="memo"></category><category term="CSharp"></category></entry><entry><title>redis memo</title><link href="http://blog.shigepon.info/blog/2016/01/13/redis-memo/" rel="alternate"></link><published>2016-01-13T21:35:13+09:00</published><updated>2016-01-13T21:35:13+09:00</updated><author><name>shigepon</name></author><id>tag:blog.shigepon.info,2016-01-13:/blog/2016/01/13/redis-memo/</id><summary type="html"></summary><content type="html">&lt;p&gt;redisが良く分かってないので、良く使いそうなものをメモしていく。主にredis-clientを使って行く（OSはUbuntu）&lt;/p&gt;
&lt;h2&gt;dbの選択&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ redis-client
&amp;gt; &lt;span class="k"&gt;select&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;で1番のdbに移動。0から15まである？&lt;/p&gt;
&lt;h2&gt;keyの一覧&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt; keys *
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;で取りあえず一覧してくれる。dbにキーがあるか程度ならこれで。&lt;/p&gt;</content><category term="redis"></category><category term="memo"></category></entry><entry><title>MT4 memo</title><link href="http://blog.shigepon.info/blog/2016/01/07/mt4-memo/" rel="alternate"></link><published>2016-01-07T14:00:25+09:00</published><updated>2016-01-07T14:00:25+09:00</updated><author><name>shigepon</name></author><id>tag:blog.shigepon.info,2016-01-07:/blog/2016/01/07/mt4-memo/</id><summary type="html"></summary><content type="html">&lt;p&gt;MT4でEAを書くためのメモ&lt;/p&gt;
&lt;h2&gt;時間の扱い&lt;/h2&gt;
&lt;!-- more --&gt;

&lt;p&gt;時間は秒単位の数値になるので&lt;/p&gt;
&lt;p&gt;時間差を出したい場合は&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;(t1 - t2)/3600.0
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;みたいな扱いで良い
参考：&lt;a href="http://forum.mql4.com/5907"&gt;How to calculate time difference, and return time in hours ? - MQL4 forum&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;矢印の表示&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;ObjectCreate(&amp;quot;OBJ&amp;quot;+Time[0], OBJ_ARROW, 0, Time[0], Ask)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;みたいに書くと表示出来る"OBJ"+Time[0]が矢印の名前となり、後で色を付けたりするのに使う&lt;/p&gt;
&lt;p&gt;参考：&lt;a href="http://forum.mql4.com/54528"&gt;How to create arrow on a price chart by EA ? - MQL4 forum&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;gmailを使ってメールを送る&lt;/h2&gt;
&lt;p&gt;参考：&lt;a href="http://d.hatena.ne.jp/fai_fx/20091110/1257779182"&gt;MT4のメール送信サーバにGmail を使う。 - とあるMetaTraderの備忘秘録&lt;/a&gt;にあるような設定を行う。&lt;/p&gt;
&lt;p&gt;手順は&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;オプション→Eメールのタブを開く&lt;/li&gt;
&lt;li&gt;SMTP設定&lt;ul&gt;
&lt;li&gt;SMTPサーバー：smtp.gmail.com:465&lt;/li&gt;
&lt;li&gt;SMTPログインID: メアド&lt;/li&gt;
&lt;li&gt;SMTPパスワード: gmailのパスワード&lt;/li&gt;
&lt;li&gt;発信元: 自分のgmailメアド&lt;/li&gt;
&lt;li&gt;送信先: 送信先メアド&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Testボタンを押すとテストメールが送られるので、設定が正しいか確認出来る&lt;/li&gt;
&lt;li&gt;OKボタンを押す&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;送信は&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;SendMail(題名, 内容);
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;でおk。改行は\nでおk。円マークではない。&lt;/p&gt;
&lt;h2&gt;バックテストを色々やるとハードディスク容量が足らなくなる&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;ファイル→データフォルダを開く&lt;/li&gt;
&lt;li&gt;testerを開く&lt;/li&gt;
&lt;li&gt;中に出来たファイルを消す&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;でおk&lt;/p&gt;
&lt;p&gt;参考：&lt;a href="http://www.autotrading-fx.com/mt4-tips/1930.html"&gt;MT4のバックテストでハードディスク容量が不足した時の対処法&lt;/a&gt;&lt;/p&gt;</content><category term="MT4"></category><category term="memo"></category></entry><entry><title>Javascript memo</title><link href="http://blog.shigepon.info/blog/2015/08/12/javascript-memo/" rel="alternate"></link><published>2015-08-12T09:01:59+09:00</published><updated>2015-08-12T09:01:59+09:00</updated><author><name>shigepon</name></author><id>tag:blog.shigepon.info,2015-08-12:/blog/2015/08/12/javascript-memo/</id><summary type="html"></summary><content type="html">&lt;p&gt;Javascript関連のメモ&lt;/p&gt;
&lt;h2&gt;HighChartで日本時間をx軸に利用&lt;/h2&gt;
&lt;p&gt;チャートを表示するライブラリに&lt;a href="http://www.highcharts.com/"&gt;HighChart&lt;/a&gt;ってのを使ってるけど、横軸の時間がUTCになってしまうので、ちょっとはまった。&lt;/p&gt;
&lt;p&gt;こうすればいいらしい&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nx"&gt;Highcharts&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setOptions&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
    &lt;span class="nx"&gt;global&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;useUTC&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;chart&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;HighChart&lt;/span&gt;&lt;span class="p"&gt;(...);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;グローバルな設定として使うらしい。
参考（ほぼそのまま）&lt;a href="http://mtc.hatenablog.com/"&gt;mtcdotcom's blog&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;HighChartでチャートをクリックするとUncaught TypeError: undefined is not a functionが出る&lt;/h2&gt;
&lt;p&gt;Chromeでのみ確認。Google翻訳の拡張機能を切ればおk&lt;/p&gt;
&lt;p&gt;参考：&lt;a href="http://stackoverflow.com/questions/30498335/highcharts-always-console-error-ablout-bubble-compiled-js"&gt;javascript - highcharts always console error ablout bubble_compiled.js? - Stack Overflow&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;bootstrap3のタブ変更時に何か実行したい&lt;/h2&gt;
&lt;p&gt;タブの中身を表示する時に何か実行させたい時は次のようにすればおk&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;ul&lt;/span&gt; &lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;nav nav-tabs&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
 &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;li&lt;/span&gt; &lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;active&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;a&lt;/span&gt; &lt;span class="na"&gt;href&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;#tab1&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;data-toggle&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;tab&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Tab1&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;a&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;li&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
 &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;li&lt;/span&gt; &lt;span class="p"&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;a&lt;/span&gt; &lt;span class="na"&gt;href&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;#tab2&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;data-toggle&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;tab&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Tab2&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;a&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;li&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;ul&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;tab-content&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
 &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;tab-pane active&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;tab1&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
   Tab1 content
 &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
 &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;tab-pane&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;tab2&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
   Tab2 content
 &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;script&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;a[data-toggle=&amp;quot;tab&amp;quot;]&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;on&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;shown.bs.tab&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
    &lt;span class="p"&gt;...&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;script&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;shown.bs.tabってイベントがあるらしい。&lt;/p&gt;
&lt;p&gt;参考：&lt;a href="http://stackoverflow.com/questions/20705905/bootstrap-3-jquery-event-for-active-tab-change"&gt;Bootstrap 3 jquery event for active tab change - Stack Overflow&lt;/a&gt;&lt;/p&gt;</content><category term="javascript"></category><category term="memo"></category></entry><entry><title>uwsgiメモ</title><link href="http://blog.shigepon.info/blog/2015/03/05/uwsgi-memo/" rel="alternate"></link><published>2015-03-05T10:21:54+09:00</published><updated>2015-03-05T10:21:54+09:00</updated><author><name>shigepon</name></author><id>tag:blog.shigepon.info,2015-03-05:/blog/2015/03/05/uwsgi-memo/</id><summary type="html"></summary><content type="html">&lt;p&gt;uwsgi関連ではまった点などをメモ&lt;/p&gt;
&lt;h2&gt;invalid request block size&lt;/h2&gt;
&lt;p&gt;ajaxでサーバ側からデータを読み込むライブラリを使ってると、条件によって502エラーが出てる(=大体djangoとかのプログラム側のエラーで出る)ので、uwsgiのログを調べると、invalid request block sizeというエラーが出てた。&lt;/p&gt;
&lt;p&gt;んで、調べてみると、uwsgiがリクエストのサイズが大きすぎるとエラーを吐いているらしい。ライブラリ側で勝手にパラメーター付けて送られてリクエストのサイズが大きくなっているので、こりゃ調整しないとなということで調べてみた。起動時にオプション設定するか、iniファイルで設定したらいけるらしい&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ uwsgi --buffer-size&lt;span class="o"&gt;=&lt;/span&gt;xxxx
&lt;/pre&gt;&lt;/div&gt;


&lt;!-- more --&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="na"&gt;...&lt;/span&gt;
&lt;span class="na"&gt;buffer-size&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;xxxx&lt;/span&gt;
&lt;span class="na"&gt;...&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;!-- more --&gt;

&lt;p&gt;参考：&lt;a href="http://stackoverflow.com/questions/15878176/uwsgi-invalid-request-block-size"&gt;uwsgi invalid request block size - Stack Overflow&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;ログローテーション&lt;/h2&gt;
&lt;p&gt;uwsgi.iniに下のように書く&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;[uwsgi]&lt;/span&gt;
&lt;span class="na"&gt;daemonize&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;/path/to/uwsgi/log/hoge-@(exec://date +%%Y-%%m-%%d).log&lt;/span&gt;
&lt;span class="na"&gt;log-reopen&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;true&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;すると/path/to/uwsgi/log/hoge-xxxx-xx-xx.log （xx..は日付）というログファイルが出来る。&lt;/p&gt;
&lt;p&gt;参考：&lt;a href="http://stackoverflow.com/questions/28343262/how-to-create-one-uwsgi-log-file-per-day"&gt;logging - How to create one uwsgi log file per day? - Stack Overflow&lt;/a&gt;&lt;/p&gt;</content><category term="uwsgi"></category><category term="django"></category><category term="memo"></category><category term="python"></category></entry><entry><title>Django Memo</title><link href="http://blog.shigepon.info/blog/2014/11/23/django-memo/" rel="alternate"></link><published>2014-11-23T22:35:38+09:00</published><updated>2016-10-27T08:30:00+09:00</updated><author><name>shigepon</name></author><id>tag:blog.shigepon.info,2014-11-23:/blog/2014/11/23/django-memo/</id><summary type="html"></summary><content type="html">&lt;p&gt;Djangoやってて忘れっぽいところとかをメモ&lt;/p&gt;
&lt;h2&gt;forms.DateFieldでISO-8601フォーマットの入力を受入れる&lt;/h2&gt;
&lt;p&gt;html5でdatetime-localとか扱おうとすると、入力値がISO-8601形式になって、そのままだとDateFieldが入力をdatetimeの正しい形式として認識してくれない。&lt;/p&gt;
&lt;p&gt;で、input_formatsを設定するといけるらしいんだけど、あまりマニュアルでちゃんと説明してない。Stack Overflowの情報とかをググると設定方法が間違ってるコードとかあって、正しいのが良く分からない。で、結局色々調べたら&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# models.py&lt;/span&gt;
&lt;span class="n"&gt;date&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;forms&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DateField&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;input_formats&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;%Y-%m-&lt;/span&gt;&lt;span class="si"&gt;%d&lt;/span&gt;&lt;span class="s1"&gt;T%H:%M:%S&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;とタプルで渡す必要があるらしい&lt;/p&gt;
&lt;p&gt;参考：&lt;a href="http://labs.uechoco.com/blog/2011/08/django-dateform-inputs_format-wrong.html"&gt;うえちょこ＠ぼろぐ» [Django]forms.DateFieldのinputs_formatではまった&lt;/a&gt;&lt;/p&gt;
&lt;!-- more --&gt;

&lt;h2&gt;ModelForm使ってフォーム出力する時にrequeied属性をテンプレートで参照するとか&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# models.py&lt;/span&gt;
&lt;span class="n"&gt;hoge&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;forms&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CharField&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;max_length&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;widget&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;TextInput&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;attrs&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;required&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;true&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;}))&lt;/span&gt;&lt;span class="err"&gt;↲&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;こんな感じで定義したフィールドの属性取ってきたい場合、&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;\{\% for field in form \%\}
  \{\% if field.field.required \%\}&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;必須&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;\{\% endif \%\}
\{\% endfor \%\}
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;適当だけど、こんな感じでアクセスできる。&lt;/p&gt;
&lt;h2&gt;ModelFormでcleanを使ってデータの検証する時に、updateしようとしてるかcreateしようとしてるか判断する&lt;/h2&gt;
&lt;p&gt;createの時だけチェックしたかったので、色々調べてみたらclean(self)内で、self.instanceでチェックすると良いみたい。例えばプライマリーキーでidがある場合こんな感じ&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# models.py&lt;/span&gt;
&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Hoge&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;forms&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ModelForm&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;clean&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;cleaned_data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cleaned_data&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;instance&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="c1"&gt;#create用の処理&lt;/span&gt;
            &lt;span class="k"&gt;raise&lt;/span&gt; &lt;span class="n"&gt;ValidationError&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;例外出すのはこんな感じ&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="c1"&gt;#update用の処理&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;cleaned_data&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;instanceの型チェックする方が正攻法かも。例外のメッセージは&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# views.py&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;form&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Hoge&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;POST&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;form&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_valid&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
        &lt;span class="c1"&gt;#例外が無かった場合&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;v&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;form&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;errors&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;item&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
            &lt;span class="c1"&gt;#kが例外のフィールド。cleanの場合は__all__&lt;/span&gt;
            &lt;span class="c1"&gt;#vが例外のメッセージ&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;みたいな感じで取り出せる。&lt;/p&gt;
&lt;h2&gt;runserver実行時にコンソールにスタックとレースを出力する&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# settings.py&lt;/span&gt;
&lt;span class="n"&gt;LOGGING&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;version&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;handlers&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:{&lt;/span&gt;
        &lt;span class="s1"&gt;&amp;#39;console&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:{&lt;/span&gt;
            &lt;span class="s1"&gt;&amp;#39;level&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;DEBUG&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="s1"&gt;&amp;#39;class&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;logging.StreamHandler&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;loggers&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:{&lt;/span&gt;
        &lt;span class="s1"&gt;&amp;#39;django.request&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:{&lt;/span&gt;
            &lt;span class="s1"&gt;&amp;#39;handlers&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;console&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
            &lt;span class="s1"&gt;&amp;#39;propagate&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="s1"&gt;&amp;#39;level&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;DEBUG&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;これを書いておけばコンソールにスタックトレースを出力してくれる。apiのコード書いてる時とかajaxで呼び出してる場合とかに便利。&lt;/p&gt;
&lt;p&gt;参考：&lt;a href="http://stackoverflow.com/questions/5886275/print-a-stack-trace-to-stdout-on-errors-in-django-while-using-manage-py-runserve"&gt;python - Print a stack trace to stdout on errors in Django while using manage.py runserver - Stack Overflow&lt;/a&gt;というかここのコード丸コピー&lt;/p&gt;
&lt;h2&gt;Gmail送信&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# settings.py&lt;/span&gt;
&lt;span class="n"&gt;EMAIL_USE_TLS&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;
&lt;span class="n"&gt;EMAIL_HOST&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;smpt.gmail.com&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;EMAIL_HOST_USER&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;mymail@gmail.com&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;EMAIL_HOST_PASSWORD&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;mypassword&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;EMAIL_PORT&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;587&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# views.py&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.core.mail&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;send_mail&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;mail&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;send_mail&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Subject&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;message&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;mymail.gmail.com&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;to@mail.address&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;span class="n"&gt;fail_silently&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;False&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;こんだけ&lt;/p&gt;
&lt;p&gt;参考：&lt;a href="http://d.hatena.ne.jp/yuheiomori0718/20120714/1342266647"&gt;DjangoでGmailを使ってメール送信 - brainstorm&lt;/a&gt;、&lt;/p&gt;
&lt;h2&gt;django+uwsgi+nginxで502エラーが出た原因の１つ&lt;/h2&gt;
&lt;p&gt;djangoはあまり関係無いけどuwsgiの設定の問題だったので、こちらに。django+uwsgi+nginxで502エラーが出て、runserverでは普通に動いたので、しばらくググって解答が得られたのでメモ&lt;/p&gt;
&lt;p&gt;&lt;a href="http://datatables.net/"&gt;DataTables&lt;/a&gt;を使って動的にテーブルデータをロードしようとしたら、runserverでは上手く行くのにuwsgiだと502エラーが出てロード出来なかった。最初にnginxのログを見てみると、uwsgiのとこでエラーと書いてあったので、uwsgiのログをチェックした。すると&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;invalid request block size: xxxxx (max 4096)...
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;みたいなエラーが出ていた。リクエストが大きすぎるのかなと思い、リクエストの一部を削ってみたらエラーが出なかった。んで、対策をググってみたら書いてあったので、そのまま下のコードを実装してみた。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# uwsgi.ini&lt;/span&gt;
&lt;span class="na"&gt;buffer-size&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;65535&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;みたいにバッファーサイズを大きく(例では64k)した。これでエラーが消えたのでめでたしめでたし。&lt;/p&gt;
&lt;p&gt;参考：&lt;a href="http://stackoverflow.com/questions/22697584/nginx-uwsgi-104-connection-reset-by-peer-while-reading-response-header-from-u"&gt;django - Nginx uwsgi (104: Connection reset by peer) while reading response header from upstream - Stack Overflow&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;運用環境と開発環境で設定を切り分ける&lt;/h2&gt;
&lt;p&gt;開発環境用にlocalアプリを作って、local/settings.pyを作成し、開発環境での設定を書いて、プロジェクトのsettings.pyの最後に以下を追加すると良い&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;local.settings&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;
&lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="ne"&gt;ImportError&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;pass&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;参考：&lt;a href="http://surgo.jp/2010/02/django.html"&gt;パーフェクトな Django の設定ファイル -- Kosei Kitahara's Blog&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;テンプレートの読み込まれ順&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;TEMPLATE_DIRSで指定されたディレクトリの順番で、そこを起点にした全てのテンプレート&lt;/li&gt;
&lt;li&gt;INSTALLED_APPSに指定した順にアプリケーション直下のtemplatesディレクトリを調べる &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;hogeアプリでテンプレートを指定した場合に、hogeアプリ直下のtemplatesディレクトリを調べてくれる訳ではないので注意が必要。&lt;/p&gt;
&lt;p&gt;例えば&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;TEMPLATE_DIRS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;/home/hoge/templates&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,]&lt;/span&gt;
&lt;span class="n"&gt;INSTALLED_APPS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;hoge&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;fuga&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;と書いてあり、プロジェクトが/www/a_project/に置いてある場合、&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;/home/hoge/templates&lt;/li&gt;
&lt;li&gt;/www/a_project/hoge/templates&lt;/li&gt;
&lt;li&gt;/www/a_project/fuga/templates&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;の順でテンプレートの存在を調べる&lt;/p&gt;
&lt;p&gt;参考：&lt;a href="http://www.tsuyukimakoto.com/blog/2006/11/22/django-template-loader/"&gt;DjangoのTemplateローダ | tsuyuki.makoto&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;url末尾に必ずスラッシュを入れる&lt;/h2&gt;
&lt;p&gt;url末尾にスラッシュが無い場合、スラッシュ有りにリダイレクトする設定&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# settings.py&lt;/span&gt;
&lt;span class="n"&gt;APPEND_SLASH&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Django rest apiで日時としてタイムスタンプを出力する&lt;/h2&gt;
&lt;p&gt;参考：&lt;a href="http://stackoverflow.com/questions/26083583/serialize-a-datetime-as-an-integer-timestamp"&gt;django rest framework - serialize a datetime as an integer timestamp - Stack Overflow&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;どうもDjango rest frameworkのDateTimeFieldで指定するformatパラメータだとタイムスタンプが指定出来ないみたいなのでこんな感じにすると出来る。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# serialize.py&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;rest_framework&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;serializers&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;time&lt;/span&gt;
&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;HogeSerializer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;serializers&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Serializer&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;date&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;serializers&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DateTimeField&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;timestamp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;serializers&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SerializerMethodField&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get_timestamp&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;mktime&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;obj&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;date&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;timetuple&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;javascriptのタイムスタンプに対応するためにはget_timestampの返り値を1000倍すればおk&lt;/p&gt;
&lt;h2&gt;Paginatorでcount文を実行させずに指定件数分のページングを行う&lt;/h2&gt;
&lt;p&gt;分量が多くて、先頭1000件を100件ずつページング表示させるので十分かなという時に、いちいちcount文を発行させたくない時&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;paginator&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Paginator&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;query&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;paginator&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_count&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1000&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;queryは適当なQuerySet&lt;/p&gt;
&lt;p&gt;参考：&lt;a href="http://stackoverflow.com/questions/7707035/how-to-implement-a-paginator-that-doesnt-call-count"&gt;django - How to implement a paginator that doesn't call count(*) - Stack Overflow&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;メソッドの呼び出し元オブジェクトを取得&lt;/h2&gt;
&lt;p&gt;inspectモジュールってのが使えるらしい&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;inspect&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;frame&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;filename&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;line_number&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;function_name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;lines&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;inspect&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getouterframes&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;inspect&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;currentframe&lt;/span&gt;&lt;span class="p"&gt;())[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;frame&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;filename&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;line_number&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;function_name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;lines&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;参考：&lt;a href="http://stackoverflow.com/questions/3711184/how-to-use-inspect-to-get-the-callers-info-from-callee-in-python"&gt;How to use inspect to get the caller's info from callee in Python? - Stack Overflow&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;プロファイラ使った時に、socket.pyが呼ばれてるのは分かったけど、その呼び出し元がイマイチわからなかった時に使った。&lt;/p&gt;
&lt;h2&gt;urlsでviewにパラメータを送る&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# urls.py&lt;/span&gt;
&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;^$&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;views&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;hoge&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;fuga&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;hage&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;hoge&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# views.py&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;hoge&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;fuga&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="o"&gt;...&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;パラメーターに指定する名前（上の場合はfuga）がviewsとurlsで同じ名前になっていることが必要（でないとエラーが出る）&lt;/p&gt;
&lt;p&gt;参考：&lt;a href="https://docs.djangoproject.com/en/1.8/topics/http/urls/#passing-extra-options-to-include"&gt;URL dispatcher | Django documentation | Django&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Ajaxでpostしたい時&lt;/h2&gt;
&lt;p&gt;csrfフィルタが初期状態で設定されてるし、csrfフィルタはあった方が良いので、次のようになったら良いかも（Jqueryを使う場合）&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;post&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;,{&lt;/span&gt;&lt;span class="nx"&gt;csrfmiddlewaretoken&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;{{csrf_token}}&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;}...);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;参考：&lt;a href="http://stackoverflow.com/questions/5100539/django-csrf-check-failing-with-an-ajax-post-request"&gt;Django CSRF check failing with an Ajax POST request - Stack Overflow&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;AjaxのPOSTで配列を受け取りたい時&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;arr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;hoge&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;fuga&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;post&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;arr&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="nx"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;&lt;span class="nx"&gt;alert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;success&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);});&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;該当するビューでこんな風に書く&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;hoge&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;arr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;POST&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getlist&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;arr&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;ちなみにgetだと[]は要らないらしい。&lt;/p&gt;
&lt;p&gt;参考：[http://stackoverflow.com/questions/12101658/how-to-get-an-array-in-django-posted-via-ajax]
該当するビューでこんな風に書く&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;hoge&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;arr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;POST&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getlist&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;arr&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;ちなみにgetだと[]は要らないらしい。&lt;/p&gt;
&lt;p&gt;参考：&lt;a href="http://stackoverflow.com/questions/12101658/how-to-get-an-array-in-django-posted-via-ajax"&gt;How to get an array in Django posted via Ajax - Stack Overflow&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;intcommaフィルタが効かない(django 1.8)&lt;/h2&gt;
&lt;p&gt;django 1.4からL10Nを見るので、ロケールjaの場合はNUMBER_GROUPINGを明示しないといけないらしい。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# settings.py&lt;/span&gt;
&lt;span class="n"&gt;NUMBER_GROUPING&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;これでおk&lt;/p&gt;
&lt;p&gt;参考：&lt;a href="http://yamayoshi.blogspot.jp/2013/02/django14-intcomma.html"&gt;やまよし＠Google大好き: Django1.4 で intcommaが効かない&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;リダイレクト時にパラメータを渡す&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;redirect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;name&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;param&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Location&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;?hoge=fuga&amp;#39;&lt;/span&gt;
&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;でいける&lt;/p&gt;
&lt;p&gt;参考：&lt;a href="http://stackoverflow.com/questions/3765887/add-request-get-variable-using-django-shortcuts-redirect"&gt;add request.GET variable using django.shortcuts.redirect - Stack Overflow&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;テンプレートのforループで何個おきで表示&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://docs.djangoproject.com/ja/1.10/ref/templates/builtins/#divisibleby"&gt;divisiblebyフィルタ&lt;/a&gt;を使う&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;{% for fuga in hoge %}
  {% if forloop.counter0|divisibleby:4%}4個おき{%endif%}
    {{fuga.hage}}
{% endfor %}
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;参考：&lt;a href="http://stackoverflow.com/questions/8494209/modulus-in-django-template"&gt;python - Modulus % in Django template - Stack Overflow&lt;/a&gt;&lt;/p&gt;</content><category term="memo"></category><category term="django"></category><category term="python"></category></entry><entry><title>Titanium Mobileメモ</title><link href="http://blog.shigepon.info/blog/2014/11/23/titanium-mobile-memo/" rel="alternate"></link><published>2014-11-23T09:48:44+09:00</published><updated>2014-11-23T09:48:44+09:00</updated><author><name>shigepon</name></author><id>tag:blog.shigepon.info,2014-11-23:/blog/2014/11/23/titanium-mobile-memo/</id><summary type="html"></summary><content type="html">&lt;p&gt;Titanium Mobileに関するメモ&lt;/p&gt;
&lt;h2&gt;アプリ固有の設定を登録する&lt;/h2&gt;
&lt;p&gt;アプリを終了して、再起動させた時も保存される設定をしたい時はTitanium.App.Propertiesを使う&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nx"&gt;Ti&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Properties&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setString&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;hoge&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;fuga&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="c1"&gt;//設定&lt;/span&gt;
&lt;span class="nx"&gt;hoge&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;Ti&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Properties&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getString&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;hoge&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="c1"&gt;//取得&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;stringを例にしてるが、ListとかObjectとかBoolとか色々入れられる。&lt;/p&gt;
&lt;!-- more --&gt;

&lt;h2&gt;Titanium MobileのUIで本家以外に参考にしてるサイト&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://code.google.com/p/titanium-mobile-doc-ja/w/list"&gt;Wiki Pages - titanium-mobile-doc-ja - Appcelerator Titanium Mobileに関するドキュメントを日本語でまとめていくプロジェクト - Google Project Hosting&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Android実機で文字が小さくなる&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;# tiapp.xml
&lt;span class="nt"&gt;&amp;lt;android&lt;/span&gt; &lt;span class="na"&gt;xmlns:android=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;http://schemas.android.com/apk/res/android&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;manifest&amp;gt;&lt;/span&gt;
         &lt;span class="nt"&gt;&amp;lt;supports-screens&lt;/span&gt; &lt;span class="na"&gt;android:anyDensity=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;false&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/manifest&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/android&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;もしくは文字サイズをdpで指定&lt;/p&gt;
&lt;p&gt;参考：&lt;a href="http://www.fujimotohajime.net/pukiwiki/index.php?TitaniumMobile%2FAndroid%E3%81%A7%E5%AE%9F%E6%A9%9F%E3%83%86%E3%82%B9%E3%83%88%E3%81%99%E3%82%8B%E3%81%A8%E6%96%87%E5%AD%97%E3%81%8C%E5%B0%8F%E3%81%95%E3%81%84"&gt;TitaniumMobile/Androidで実機テストすると文字が小さい - Wiki&lt;/a&gt;&lt;/p&gt;</content><category term="titanium"></category><category term="memo"></category></entry><entry><title>ansible memo</title><link href="http://blog.shigepon.info/blog/2014/07/01/ansible-memo/" rel="alternate"></link><published>2014-07-01T16:56:06+09:00</published><updated>2014-07-01T16:56:06+09:00</updated><author><name>shigepon</name></author><id>tag:blog.shigepon.info,2014-07-01:/blog/2014/07/01/ansible-memo/</id><summary type="html"></summary><content type="html">&lt;p&gt;ansibleで自分が欲しい情報が色んなページに散らばっていたので、メモ&lt;/p&gt;
&lt;!-- more --&gt;

&lt;h3&gt;ansible-playbookのオプション&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;-K: sudoのパスワード入力&lt;/li&gt;
&lt;li&gt;-C (--check): 実際に実行しないでチェックしてくれる&lt;/li&gt;
&lt;li&gt;-l name: hostsファイルに[name]と書かれたホストにのみ実行&lt;/li&gt;
&lt;li&gt;-i hostsfile: 初期状態では/etc/ansible/hostsを見に行くので、自分で指定したい場合に&lt;/li&gt;
&lt;li&gt;--syntax-check: playbookの書式チェック。書いて最初にやるといい&lt;/li&gt;
&lt;li&gt;--list-tasks: playbookで行う内容をリストアップ&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;ansibleで鍵認証のsshで処理したい&lt;/h2&gt;
&lt;p&gt;-c paramikoでなく-c sshを使うとssh_configの値を使うことが出来る　&lt;/p&gt;
&lt;h2&gt;ansibleで鍵認証のsshで処理したい&lt;/h2&gt;
&lt;p&gt;-c paramikoでなく-c sshを使うとssh_configの値を使うことが出来る。　&lt;/p&gt;
&lt;p&gt;参考：&lt;a href="https://github.com/ansible/ansible/issues/1172"&gt;ansible is not using .ssh/config · Issue #1172 · ansible/ansible&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;チェック時の注意点&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;何かをaptとかでインストールしてそのアプリを使って何かインストールしようとするとエラーが出る&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;aptにリポジトリ追加して、アップデートして何かインストールしようとするとエラーが出る&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;どちらも実際に動かすとエラーは出ない&lt;/p&gt;
&lt;h2&gt;postgresqlのデータベースロケール設定&lt;/h2&gt;
&lt;p&gt;ロケール設定してから一旦サービスを再起動する&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    - name: Install language-pack-ja 
      apt: name=language-pack-ja
    - name: set locale
      locale_gen: name=ja_JP.UTF-8 state=present
    - name: first restart
      service:
        name: &amp;#39;postgresql&amp;#39;
        state: &amp;#39;restarted&amp;#39;
    - name: drop database stock if exist
      sudo_user: postgres
      postgresql_db: name=stock state=absent
    - name: create database stock
      sudo_user: postgres
      postgresql_db: &amp;gt;
        name=stock-
        encoding=&amp;#39;UTF-8&amp;#39;
        lc_collate=&amp;#39;ja_JP.UTF-8&amp;#39;
        lc_ctype=&amp;#39;ja_JP.UTF-8&amp;#39;
        template=&amp;#39;template0&amp;#39;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;参考：&lt;a href="http://serverfault.com/questions/491237/postgresql-9-2-invalid-locale-name-on-ubuntu-12-04"&gt;Postgresql 9.2 "invalid locale name" on Ubuntu 12.04 - Server Fault&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;replaceとlineinfile&lt;/h2&gt;
&lt;p&gt;単純な置換、削除ならreplaceが直感的なので良い。
追加とかある場合はlineinfileが色々できて良い。&lt;/p&gt;
&lt;h2&gt;virtualenv関連&lt;/h2&gt;
&lt;p&gt;virtualenvのインストールだけならpipでいけるが、virtualenvの環境を初期化しておきたいのでこんな感じ&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    - name: install virtualenv
      pip: name=virtualenv state=latest
    - name: initialize virtualenv
      command: virtualenv /path/to/env creates=&amp;quot;/path/to/env&amp;quot;
    - name: install request on vertualenv
      pip:
        name=requests
        virtualenv=/path/to/env
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;requestsは最低でも入れておかないとssl関連のwarningが出る&lt;/p&gt;
&lt;p&gt;参考：&lt;a href="http://stackoverflow.com/questions/29991041/why-am-i-getting-insecureplatformwarning-on-mac"&gt;python - Why am I getting InsecurePlatformWarning on mac? - Stack Overflow&lt;/a&gt;、&lt;a href="http://stackoverflow.com/questions/26402123/ansible-creating-a-virtualenv"&gt;python - Ansible creating a virtualenv - Stack Overflow&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;GATHERING FACTSで止まる時&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;まずsudoを外して-Cで動くかチェック&lt;/li&gt;
&lt;li&gt;いけるなら、host側のsudoパスワードが入力出来ていないのが原因なので、--ask-sudo-passを使う。&lt;/li&gt;
&lt;/ul&gt;</content><category term="memo"></category><category term="ansible"></category><category term="python"></category></entry><entry><title>git memo</title><link href="http://blog.shigepon.info/blog/2014/04/09/git-memo/" rel="alternate"></link><published>2014-04-09T12:36:49+09:00</published><updated>2016-11-16T11:55:49+09:00</updated><author><name>shigepon</name></author><id>tag:blog.shigepon.info,2014-04-09:/blog/2014/04/09/git-memo/</id><summary type="html"></summary><content type="html">&lt;p&gt;git関連のメモ&lt;/p&gt;
&lt;h3&gt;変更履歴を見る&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ git log -p
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;で全体の変更履歴&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ git log -p filename
&lt;/pre&gt;&lt;/div&gt;


&lt;!-- more --&gt;

&lt;p&gt;でfilenameの変更履歴を表示する&lt;/p&gt;
&lt;h3&gt;ブランチ間の変更ファイル一覧を取得&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ git diff --name-only -b parent_branch -b child_branch
//履歴を見る場合
$ git diff --name-only
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;参考：&lt;a href="http://qa.atmarkit.co.jp/q/2047"&gt;gitの指定ブランチで変更されたファイルの一覧を取得したい - QA@IT&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;GitHubで色々やる手順&lt;/h2&gt;
&lt;p&gt;参考：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://kik.xii.jp/archives/179"&gt;Github で Fork してから Pull Request をするまでの流れ | けーこ in サンフランシスコ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://qiita.com/xtetsuji/items/555a1ef19ed21ee42873"&gt;GitHubでFork/cloneしたリポジトリを本家リポジトリに追従する - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://misapon.blogspot.jp/2014/10/github.html"&gt;明日に向かって昇龍拳: GitHubでプルリクエストがマージされた後にすること&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;1.準備&lt;/h3&gt;
&lt;p&gt;まずは開発に関わりたいプロジェクトのリポジトリをFork&lt;/p&gt;
&lt;p&gt;次にローカルにクローン&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ git clone https://github.com/path/to/repository.git
$ &lt;span class="nb"&gt;cd&lt;/span&gt; repository
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;2.開発〜Pull Request&lt;/h3&gt;
&lt;p&gt;Pull Request用にブランチを切る&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ git checkout -b issue
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;コード変更後、コミット&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ git add -A
$ git commit -m &lt;span class="s2"&gt;&amp;quot;commit message&amp;quot;&lt;/span&gt;
$ git push origin issue
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;まだrebeseは良く分かってない。で、GitHub上でPull Requestを作成する。&lt;/p&gt;
&lt;h3&gt;3.Pull Requestが反映された後&lt;/h3&gt;
&lt;h4&gt;Pull Requestに使ったブランチを削除&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ git checkout master
$ git branch -D issue
$ git push origin :issue
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;GitHubでForkしたリポジトリを本家に合わせる&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ git remote add honke https://github.com/honke/path/to/repository.git
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;リポジトリの追加は1回で良い。後は合わせたいタイミングで下のコマンドを繰り返す&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ git fetch honke
$ git merge honke/master
$ git push origin master
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;以下2〜3を繰り返す&lt;/p&gt;
&lt;h3&gt;別の場所に開発中のブランチをダウンロードしたい場合&lt;/h3&gt;
&lt;p&gt;参考：
&lt;a href="http://glassylamp.blogspot.jp/2010/11/git.html"&gt;GlassyLamp: git でブランチを指定してダウンロードする方法&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;issueブランチをダウンロードしたい場合&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ git clone https://github.com/path/to/repository.git
$ git checkout -b issue-local remotes/origin/issue
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;masterブランチの変更を別ブランチに反映する&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ git checkout hoge
$ git merge master
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;mergeでコンフリクトしたファイルの一覧&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ git ls-files -u
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;branch名を変更する&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ git branch -m &amp;lt;oldname&amp;gt; &amp;lt;newname&amp;gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;参考：&lt;a href="http://stackoverflow.com/questions/6591213/how-do-you-rename-the-local-branch"&gt;git - How do you rename the local branch? - Stack Overflow&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;日本語ファイルの出力&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ git config --global core.quotepath &lt;span class="nb"&gt;false&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;と先にやっておくと日本語ファイル名もちゃんと表示される&lt;/p&gt;
&lt;p&gt;参考：&lt;a href="http://tobysoft.net/wiki/index.php?git%2F%C6%FC%CB%DC%B8%EC%A5%D5%A5%A1%A5%A4%A5%EB%CC%BE%A4%F2git%20status%A4%CA%A4%C9%A4%C7%C9%BD%BC%A8%A4%B9%A4%EB%CA%FD%CB%A1"&gt;git/日本語ファイル名をgit statusなどで表示する方法 - TOBY SOFT wiki&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;過去リビジョンや他ブランチのファイル内容を見る&lt;/h2&gt;
&lt;p&gt;過去リビジョン&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ git show &amp;lt;SHA1 object name&amp;gt;:&amp;lt;path&amp;gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;他ブランチ&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ git show &amp;lt;branch name&amp;gt;:&amp;lt;path&amp;gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;参考 ：&lt;a href="http://webtech-walker.com/archive/2010/07/28113324.html"&gt;gitで過去のリビジョンとか別のbranchのファイルを見る - Webtech Walker&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;.gitignoreを便利に作ってくれるツール&lt;/h2&gt;
&lt;p&gt;giboというツールを使うと良い&lt;/p&gt;
&lt;p&gt;&lt;a href="https://hnw.hatenablog.com/entry/20121221"&gt;.gitignoreを作ってくれるgiboが便利すぎる&lt;/a&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ gibo list
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;でテンプレート一覧みたいなものを出して&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ gibo dump macOS &amp;gt;&amp;gt; .gitignore
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;で例えばmacでコミットしたくない.DStoreみたいなものをgitignoreで除外してくれるようになる。&lt;/p&gt;
&lt;h2&gt;.gitignoreを元にgit addしてしまったコミットしたくないファイルをリポジトリから除外する&lt;/h2&gt;
&lt;p&gt;git addしてしまったファイルをリポジトリから除外するには&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ git rm --cached hoge
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;とする。.gitignoreの設定を元にまとめて除外する場合は&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ git rm --cached &lt;span class="sb"&gt;`&lt;/span&gt;git ls-files --full-name -i --exclude-from&lt;span class="o"&gt;=&lt;/span&gt;.gitignore&lt;span class="sb"&gt;`&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;とすると良い&lt;/p&gt;
&lt;p&gt;参考：&lt;a href="https://qiita.com/yuuAn/items/b1d1df2e810fd6b92574"&gt;あとからまとめて.gitignoreする方法&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;全部取り消す時は&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ git reset HEAD
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;ローカルでごちゃごちゃ弄ったファイルを戻す&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ git checkout &amp;lt;filename&amp;gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;参考：&lt;a href="https://qiita.com/macer_fkm/items/ea2337a9b504b982c295"&gt;git ローカルの変更を元に戻す方法&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;クローン元のURLを調べる&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;git remote -v
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;でおk&lt;/p&gt;
&lt;p&gt;originがクローン元で、upstreamはForkしてる場合の元のリポジトリになる&lt;/p&gt;
&lt;p&gt;参考：&lt;a href="https://qiita.com/g_maeda/items/e97a711b5c98d2ff4999"&gt;gitリポジトリのoriginのURLを確認する&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;git diffで改行コードや空白を無視する&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ git diff -w
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;でおk&lt;/p&gt;
&lt;p&gt;参考：&lt;a href="https://qiita.com/shibukk/items/8c9362a5bd399b9c56be"&gt;忘れやすい人のための git diff チートシート&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;ForkしたリポジトリがYour branch is behind of 'origin/master' by x commits.とか言われた時&lt;/h2&gt;
&lt;p&gt;Forkをクローン&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ git clone https://....git
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Fork元のリポジトリをupstreamに追加&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nb"&gt;cd&lt;/span&gt; /path/to/fork
git remote add upstream https://...git
git fetch upstream
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;fetchは要らないかも？試してない。&lt;/p&gt;
&lt;p&gt;反映&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ git pull upstream master &lt;span class="c1"&gt;#ローカル&lt;/span&gt;
$ git push origin master &lt;span class="c1"&gt;#リモート&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;参考：&lt;a href="https://gist.github.com/CristinaSolana/1885435"&gt;Keeping a fork up to date&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;MacでHigh Sierraにアップデートするとgitが使えなくなったことへの対処&lt;/h2&gt;
&lt;p&gt;参考：&lt;a href="https://qiita.com/ARTS_papa/items/60ba305b23dc967bba87"&gt;Mac OS Sierraにしたらgitコマンド、ターミナル上にエラーが出てしまった。&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;と同じ処理でおk&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ xcode-select --install
&lt;/pre&gt;&lt;/div&gt;</content><category term="git"></category><category term="memo"></category></entry><entry><title>nginx memo</title><link href="http://blog.shigepon.info/blog/2014/03/20/nginx-memo/" rel="alternate"></link><published>2014-03-20T16:04:53+09:00</published><updated>2014-03-20T16:04:53+09:00</updated><author><name>shigepon</name></author><id>tag:blog.shigepon.info,2014-03-20:/blog/2014/03/20/nginx-memo/</id><summary type="html"></summary><content type="html">&lt;h2&gt;Nginxで503コードのページをカスタマイズする&lt;/h2&gt;
&lt;p&gt;なるべく手軽にメンテナンスページを出すための手順&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;path/to/root/error/503.htmlにページを用意する。&lt;/li&gt;
&lt;li&gt;path/to/root/error/以下に画像やcss、javascriptなど必要なものを用意する。&lt;/li&gt;
&lt;li&gt;nginxの設定を変更する。必要な部分だけ抜粋&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;server {
    server_name xxx.xxx;
        set $maintenance false;
        if (-f $document_root/error/503.html ){
                set $maintenance true;
        }
        if ($uri ~ &amp;quot;^/error/&amp;quot;) {
            set $maintenance false;
        }
        if ($remote_addr = XXX.XXX.XXX.XXX ){
                set $maintenance false;#指定したIPからのアクセスは普通に見れるようにする
        }
        if ($maintenance = true) {
                return 503;
        }
        error_page 503 @maintenance;
        location @maintenance {
                rewrite ^(.*)$ /error/503.html break;
                expires 0;
        }
        location /error/ {}

&amp;lt;!-- more --&amp;gt;

}
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;path/to/root/error/503.htmlがあれば、メンテナンス画面を表示する。なければ表示しない。一度nginx設定をリロードすればその後はリロードの必要もない。&lt;/p&gt;
&lt;h2&gt;末尾に必ずスラッシュを入れる&lt;/h2&gt;
&lt;p&gt;djangoで末尾スラッシュで無い場合に上手くurlsを組み立てられなかったりしたので・・・djangoは悪くなく、自分の実装のせいなんだけど。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;rewrite ^([^.]*[^/])$ $1/ permanent;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;でおk&lt;/p&gt;
&lt;p&gt;参考：&lt;a href="http://stackoverflow.com/questions/645853/add-slash-to-the-end-of-every-url-need-rewrite-rule-for-nginx"&gt;regex - Add slash to the end of every url (need rewrite rule for nginx) - Stack Overflow&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;書式チェック&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ sudo nginx -t -c /path/to/nginx.conf
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;でチェック出来る&lt;/p&gt;
&lt;p&gt;参考：&lt;a href="http://qiita.com/yaotti/items/bd6774888a790c00e6fd"&gt;nginxで設定ファイルチェック - Qiita&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;ltsvでログを取る&lt;/h2&gt;
&lt;p&gt;※　まずerror_logでは指定出来ないので注意&lt;/p&gt;
&lt;p&gt;ログのフォーマットにltsvを追加する。/etc/nginx/nginx.conf内でも
/etc/nginx/conf.d/*.conf内でもおk&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;log_format&lt;/span&gt; &lt;span class="nt"&gt;ltsv&lt;/span&gt;  &lt;span class="s2"&gt;&amp;quot;time:$time_local&amp;quot;&lt;/span&gt;
                &lt;span class="s2"&gt;&amp;quot;\thost:$remote_addr&amp;quot;&lt;/span&gt;
                &lt;span class="s2"&gt;&amp;quot;\tforwardedfor:$http_x_forwarded_for&amp;quot;&lt;/span&gt;
                &lt;span class="s2"&gt;&amp;quot;\treq:$request&amp;quot;&lt;/span&gt;
                &lt;span class="s2"&gt;&amp;quot;\tstatus:$status&amp;quot;&lt;/span&gt;
                &lt;span class="s2"&gt;&amp;quot;\tsize:$body_bytes_sent&amp;quot;&lt;/span&gt;
                &lt;span class="s2"&gt;&amp;quot;\treferer:$http_referer&amp;quot;&lt;/span&gt;
                &lt;span class="s2"&gt;&amp;quot;\tua:$http_user_agent&amp;quot;&lt;/span&gt;
                &lt;span class="s2"&gt;&amp;quot;\treqtime:$request_time&amp;quot;&lt;/span&gt;
                &lt;span class="s2"&gt;&amp;quot;\tvhost:$host&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;sites-available内でのaccess_logの設定を以下のように変更&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;access_log /var/log/nginx/access.log ltsv;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;参考：&lt;a href="http://toshitanian.hatenablog.com/entry/2013/10/25/023838"&gt;nginxのerror_logはformat指定できない． - としたにあんの左脳&lt;/a&gt;&lt;/p&gt;</content><category term="nginx"></category><category term="memo"></category></entry><entry><title>vim memo</title><link href="http://blog.shigepon.info/blog/2014/03/01/vim-memo/" rel="alternate"></link><published>2014-03-01T14:14:10+09:00</published><updated>2016-10-25T14:56:10+09:00</updated><author><name>shigepon</name></author><id>tag:blog.shigepon.info,2014-03-01:/blog/2014/03/01/vim-memo/</id><summary type="html"></summary><content type="html">&lt;h2&gt;vimでsnippet&lt;/h2&gt;
&lt;p&gt;色々方法があるみたいだけど、neocomplecacheを入れているので、それと相性が良さそうな（作者が同じ）プラグインを入れた&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;NeoBundle &amp;#39;Shougo/neosnippet&amp;#39;
NeoBundle &amp;#39;Shougo/neosnippet-snippets&amp;#39;

&amp;quot; Plugin key-mappings.
imap &amp;lt;C-k&amp;gt;     &amp;lt;Plug&amp;gt;(neosnippet_expand_or_jump)
smap &amp;lt;C-k&amp;gt;     &amp;lt;Plug&amp;gt;(neosnippet_expand_or_jump)
xmap &amp;lt;C-k&amp;gt;     &amp;lt;Plug&amp;gt;(neosnippet_expand_target)
&amp;quot; &amp;quot; SuperTab like snippets behavior.
imap &amp;lt;expr&amp;gt;&amp;lt;TAB&amp;gt; neosnippet#expandable_or_jumpable() ?
\ &amp;quot;\&amp;lt;Plug&amp;gt;(neosnippet_expand_or_jump)&amp;quot;
\: pumvisible() ? &amp;quot;\&amp;lt;C-n&amp;gt;&amp;quot; : &amp;quot;\&amp;lt;TAB&amp;gt;&amp;quot;
smap &amp;lt;expr&amp;gt;&amp;lt;TAB&amp;gt; neosnippet#expandable_or_jumpable() ?
\ &amp;quot;\&amp;lt;Plug&amp;gt;(neosnippet_expand_or_jump)&amp;quot;
\: &amp;quot;\&amp;lt;TAB&amp;gt;&amp;quot;
&amp;quot;
&amp;quot; &amp;quot; For snippet_complete marker.
if has(&amp;#39;conceal&amp;#39;)
  set conceallevel=2 concealcursor=i
endif
&lt;/pre&gt;&lt;/div&gt;


&lt;!-- more --&gt;

&lt;p&gt;を.vimrcに追記して、vimを再起動後、&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;:NeoBundleInstall
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;でインストール完了。もう一度vimを再起動して、phpファイルを空けて
おもむろにインサートモードで「for」とか打ったらちゃんとsnippetが表示された。&lt;C-n&gt;などで選択してからtab押したらちゃんと入力された。
いいね〜！！&lt;/p&gt;
&lt;p&gt;現在、デフォルトのsnippetとしてneosnippet-snippetsをインストールしないとデフォルトのsnippetを出してくれないことに注意。&lt;/p&gt;
&lt;h2&gt;巨大なファイルを開いて遅くなったりフリーズしない方法&lt;/h2&gt;
&lt;p&gt;&lt;a href="http://qiita.com/shoyan/items/529cf863a0d191be036e"&gt;Vimで巨大なファイルを開く方法 - Qiita&lt;/a&gt;をそのまま&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ vim -u NONE filename
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;でおk&lt;/p&gt;
&lt;h2&gt;clipboardを使う&lt;/h2&gt;
&lt;p&gt;クリップボードで普通にCtrl+vして大体涙目になってるのでメモ&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;:set paste
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;んで普通にペーストでおkみたい&lt;/p&gt;
&lt;p&gt;戻すには&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;:set nopaste
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;参考：&lt;a href="http://qiita.com/quwa/items/019250dbca167985fe32"&gt;vimでペーストするときインデントさせない - Qiita&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Diffした結果をカラー表示する&lt;/h2&gt;
&lt;p&gt;Diffした結果テキストに落とし、そのテキストからDiffの内容をカラー表示させたかったので調べてみた。&lt;/p&gt;
&lt;p&gt;Diffした結果をテキストにリダイレクトするとこんな感じの色コードが入る&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;^[[32m Added message^[[0m
^[[31m Deleted message^[[0m
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;a href="https://github.com/chrisbra/Colorizer"&gt;Colorizer&lt;/a&gt;というプラグインを使うと良さげだった。&lt;/p&gt;
&lt;p&gt;Colorizerプラグインを入れて、テキスト開いて&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;:ColorHighlight
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;のコマンドで色付けできた。&lt;/p&gt;
&lt;p&gt;参考：&lt;a href="http://stackoverflow.com/questions/18684419/vim-text-coloring"&gt;echo - Vim text coloring - Stack Overflow&lt;/a&gt;&lt;/p&gt;</content><category term="vim"></category><category term="memo"></category></entry><entry><title>svn memo</title><link href="http://blog.shigepon.info/blog/2014/02/11/svn-memo/" rel="alternate"></link><published>2014-02-11T11:53:32+09:00</published><updated>2014-02-11T11:53:32+09:00</updated><author><name>shigepon</name></author><id>tag:blog.shigepon.info,2014-02-11:/blog/2014/02/11/svn-memo/</id><summary type="html"></summary><content type="html">&lt;p&gt;svn使っててはまることが結構あるのでメモ&lt;/p&gt;
&lt;h2&gt;ubuntuでsvnコマンドすると認証失敗する場合&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Password &lt;span class="k"&gt;for&lt;/span&gt; ‘&lt;span class="o"&gt;(&lt;/span&gt;null&lt;span class="o"&gt;)&lt;/span&gt;’ GNOME keyring:
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;というメッセージが表示される場合、gnome-keyringというやつが邪魔をしているらしい。ログイン情報を削除すれば解決。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;rm ~/.gnome2/keyrings/login.keyring
&lt;/pre&gt;&lt;/div&gt;


&lt;!-- more --&gt;

&lt;p&gt;でいける。&lt;/p&gt;
&lt;h2&gt;コミットするファイルを、ファイルで指定する&lt;/h2&gt;
&lt;p&gt;fuga.htmlとhage.htmlを変更しててfuga.htmlだけコミットしたい場合&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;fuga.html
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;というファイル(hoge.txt)を作っておいて、&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ svn commit -m &lt;span class="s2"&gt;&amp;quot;コメント&amp;quot;&lt;/span&gt; --targets hoge.txt
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;でおk&lt;/p&gt;</content><category term="linux"></category><category term="svn"></category><category term="memo"></category></entry><entry><title>sqlite memo</title><link href="http://blog.shigepon.info/blog/2014/02/11/sqlite-memo/" rel="alternate"></link><published>2014-02-11T11:48:39+09:00</published><updated>2014-02-11T11:48:39+09:00</updated><author><name>shigepon</name></author><id>tag:blog.shigepon.info,2014-02-11:/blog/2014/02/11/sqlite-memo/</id><summary type="html"></summary><content type="html">&lt;p&gt;SQLiteでたまに使う操作をメモ&lt;/p&gt;
&lt;h2&gt;テーブルの存在チェック&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;SELECT&lt;/span&gt; &lt;span class="k"&gt;COUNT&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;FROM&lt;/span&gt; &lt;span class="n"&gt;sqlite_master&lt;/span&gt; &lt;span class="k"&gt;WHERE&lt;/span&gt; &lt;span class="k"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;table&amp;#39;&lt;/span&gt; &lt;span class="k"&gt;AND&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;テーブル名&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</content><category term="sqlite"></category><category term="memo"></category></entry><entry><title>unity memo</title><link href="http://blog.shigepon.info/blog/2014/02/10/unity-memo/" rel="alternate"></link><published>2014-02-10T23:25:11+09:00</published><updated>2014-02-10T23:25:11+09:00</updated><author><name>shigepon</name></author><id>tag:blog.shigepon.info,2014-02-10:/blog/2014/02/10/unity-memo/</id><summary type="html"></summary><content type="html">&lt;p&gt;unity使ってこれから何か作っていこうと思うのでめも。&lt;/p&gt;
&lt;h3&gt;最初にやったこと&lt;/h3&gt;
&lt;p&gt;&lt;a href="http://uinyan.com/unity_7days_kusoge_challenge/"&gt;【Unity】素人が7日間クソゲーを作り続けてわかったこと – uinyan. com&lt;/a&gt;に載っていた&lt;a href="http://japan.unity3d.com/developer/document/tutorial/my-first-unity/01.html"&gt;UNITY - Developer - はじめての Unity - 第1回 世界の「骨格」をつくろう&lt;/a&gt;に沿ってブロックとボールを作ってみた。&lt;br&gt;
実際にどう操作するかは&lt;a href="https://www.google.com/url?q=http://dotinstall.com/&amp;amp;usd=2&amp;amp;usg=AFQjCNHZtbpqtTDbVeGhAQfx3_H-UUYI1Q"&gt;ドットインストールのUnity講座&lt;/a&gt;を参考にした。&lt;/p&gt;
&lt;h3&gt;物をバウンドさせる&lt;/h3&gt;
&lt;p&gt;physicalMaterialでBouncinessに数値を入れる。1とか。1でバウンド時の力のロスが無い。&lt;/p&gt;
&lt;h3&gt;効果音を鳴らす&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.senses-circuit.com/material/se_game.html"&gt;フリー効果音素材HP&lt;/a&gt;などから音源をダウンロード&lt;/li&gt;
&lt;li&gt;Assetに音源をドラッグアンドドロップして追加&lt;/li&gt;
&lt;li&gt;追加したいオブジェクトでAddComponentボタンからComponent&amp;gt;Audio&amp;gt;Audio Sourceを選択&lt;/li&gt;
&lt;li&gt;Audio ClipにAssetに入れた音源を入れる。&lt;/li&gt;
&lt;li&gt;Audio Sourceコンポーネント内で3D Sound Setting&amp;gt;Min Distanceを10くらいに設定 &lt;/li&gt;
&lt;/ul&gt;
&lt;!-- more --&gt;

&lt;p&gt;オブジェクトに設定したコードでは次のように書く。例としてスペースを押したら効果音が出るようにしてみた。&lt;br&gt;
コードの設定部分でこの例の場合clipに音源を入れる（でないと聞こえなかったような）&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="n"&gt;AudioClip&lt;/span&gt; &lt;span class="n"&gt;clip&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="n"&gt;function&lt;/span&gt; &lt;span class="nf"&gt;Update&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Input&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;GetButton&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Jump&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;audio&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;PlayOneShot&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;clip&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; 
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;BGMをかける&lt;/h3&gt;
&lt;p&gt;Assetに追加したBGMをHiearchyに追加して、InspectorのLoopをチェックしたらOK&lt;/p&gt;
&lt;h3&gt;位置移動&lt;/h3&gt;
&lt;p&gt;transform.positionにVectorオブジェクトを代入すればOK&lt;br&gt;
transform.position.xに直接値を入れるとC#では怒られた。&lt;/p&gt;
&lt;h3&gt;トリガで衝突判定&lt;/h3&gt;
&lt;p&gt;Collider2Dでis Triggerにチェックを入れるとTriggerを用いて衝突判定できる。衝突しないケースと衝突するケースを使い分けられるので便利。
イベントとして2Dの場合は、&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;OnTriggerEnter2D&lt;/li&gt;
&lt;li&gt;OnTriggerStay2D&lt;/li&gt;
&lt;li&gt;OntriggerExit2D&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;が使える。2Dで物理エンジン使わない時とか使える。なんか使える条件があるような情報があった。&lt;/p&gt;
&lt;h3&gt;時間待ちの作法&lt;/h3&gt;
&lt;p&gt;コルーチンを使うらしい。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="n"&gt;function&lt;/span&gt; &lt;span class="nf"&gt;Update&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
&lt;span class="p"&gt;...&lt;/span&gt;
  &lt;span class="n"&gt;StartCoroutine&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;GameOver&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="n"&gt;IENumerator&lt;/span&gt; &lt;span class="nf"&gt;GameOver&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
  &lt;span class="k"&gt;yield&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;WaitForSeconds&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="n"&gt;Application&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;LoadLevel&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;GameOver&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;こんな感じ。時間待ちとは言え、動きが止まったりするわけじゃない。&lt;/p&gt;
&lt;h3&gt;座標変換&lt;/h3&gt;
&lt;p&gt;タップやクリックの座標とUnity内での座標の場合は座標変換が必要。カメラのScreenToWorldPointメソッドを使うが2Dの場合直感的に行かなく、次のようにする&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;Vector3&lt;/span&gt; &lt;span class="n"&gt;screenPosition&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Camera&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ScreenToWorldPoint&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;transform&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;position&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="n"&gt;Vector2&lt;/span&gt; &lt;span class="n"&gt;clickPosition&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Camera&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ScreenToWorldPoint&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;Vector3&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Input&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;mousePosition&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;Input&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;mousePosition&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;screenPosition&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;z&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;と2DなのにVector3（３次元座標）で指定する。&lt;/p&gt;
&lt;h3&gt;デバッグ&lt;/h3&gt;
&lt;p&gt;Unity Remoteを使う。Free Aspectだと上手く表示できないとか上手く行かないケースがあるので注意。かならずアスペクト比？を設定。&lt;/p&gt;
&lt;h3&gt;Androidへの実装&lt;/h3&gt;
&lt;p&gt;実機に実装する場合はBuild and Runをすれば良い。ただしXperia SO-01Bに実装すると初期の設定ではエラーがポコポコ出たので対処をメモしておく&lt;/p&gt;
&lt;h3&gt;iPhoneへの実装&lt;/h3&gt;
&lt;p&gt;iPhoneへの実装はios Developer Programへの登録など色々面倒で複数サイトを参考にした。
ios Developer Programへの登録などUnity関係なくやらないといけない作業は、&lt;a href="http://r-dimension.xsrv.jp/classes_j/ios_test/"&gt;iOSデバイス（iPhone・iPad）実機テスト | Yasushi Noguchi Class&lt;/a&gt;が参考になった&lt;br&gt;
unity側での作業は&lt;a href="http://tech.gmo-media.jp/post/54095871491/running-unity-app-on-iphone"&gt;iPhone実機でUnityを動かしてみた - unity部 | GMOメディア エンジニアブログ&lt;/a&gt;を参考にすれば上手くいった。
バージョンが変わったりすると、また画面構成とか変わるんだろうけど。&lt;/p&gt;
&lt;p&gt;あとiPhone初心者だったせいで、マナーモードになっているのに気づかず、音が出ないと１時間くらい悩んでた。（これでハマる人は少ないと思うけど一応メモ）&lt;/p&gt;
&lt;h3&gt;iPhoneへのadhocビルドと配布&lt;/h3&gt;
&lt;p&gt;やること色々あるので、参考にしたサイトの一覧を紹介する程度。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://dev.classmethod.jp/smartphone/iphone/ios-app-how-to-release/#toc-xcode-"&gt;よく分かる！iOS アプリのリリース手順のまとめ ｜ Developers.IO&lt;/a&gt;←App Storeでの配布についてのページだけどこのページが一番参考になった。多分画面が最新のものに対応してるから。&lt;/li&gt;
&lt;li&gt;&lt;a href="http://plus.vc/iphone/4357/"&gt;iPhoneアプリのAd Hoc配信方法まとめ完全版 [Xcode4対応] | PLUS&lt;/a&gt; 上のページで分からないところはこのページを参考にした。Xcodeのビルド設定以降は参考になる。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;adhocで端末を追加したい場合に、またもハマった&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://d.hatena.ne.jp/mswar/20090303/1236087158"&gt;iPhone Developper Programingに 新しくデバイス追加する方法(２台目、３台目～) - mswar的電網日誌&lt;/a&gt; adhocじゃないけど、それ以外の部分は参考になった&lt;/li&gt;
&lt;li&gt;&lt;a href="http://plus.vc/iphone/7015/"&gt;Adhocでデバイスを追加したものの、インストールできない場合のチェック方法 | PLUS&lt;/a&gt;これはチェックしておかないといけない感じ&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;EGL_BAD_MATCH&lt;/h4&gt;
&lt;p&gt;まずは&lt;strong&gt;EGL_BAD_MATCH&lt;/strong&gt;というエラーが出た。ググっでも答えが出ないので、ddmsを使ってログを取ってみると、どうも32bit Display Bufferとか24bit Display Bufferの処理をした後にエラーが出てたので、Player Setting &amp;gt; Android &amp;gt; Resolution and Presentationにある32bit Dispay Bufferと24bit Display Bufferのチェックをはずした。するとEGL_BAD_MATCHは消えた。&lt;/p&gt;
&lt;h4&gt;Profiler is only supported in Unity Pro&lt;/h4&gt;
&lt;p&gt;次にProfilerも使ってないのに&lt;br&gt;
&lt;strong&gt;Profiler is only supported in Unity Pro&lt;/strong&gt;&lt;br&gt;
というメッセージが出た。結局分からなかった。私が実装した時の問題点は画像が表示されないことだったのでこれは関係ないだろうと考えて無視。&lt;/p&gt;
&lt;h4&gt;結局画面が表示されない&lt;/h4&gt;
&lt;p&gt;Build Setting画面のTexture CompressionをDon't overrideからETC1 or RGB16に変更すると動いた！
なんかどっかにこの話があったんだけど、どこか忘れたのでまた思い出したらリンクする。&lt;/p&gt;
&lt;h3&gt;その他&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;位置のScaleを-1にして反転するとアニメーションもそのまま反転した。すごい。&lt;/li&gt;
&lt;li&gt;StartよりAwakeが先に呼び出される。初期化に使える。&lt;/li&gt;
&lt;li&gt;MonoDevelop-UnityをMacにインストールしてて、C#の通常アプリが作れると思ったら大間違い。C#のアプリ作ろうと思ったらXamarin Studio入れた方がよさげ。NUnitが無いって怒られて散々だった。&lt;/li&gt;
&lt;/ul&gt;</content><category term="unity"></category><category term="memo"></category></entry><entry><title>octpress tips</title><link href="http://blog.shigepon.info/blog/2014/01/31/octpress-tips/" rel="alternate"></link><published>2014-01-31T08:33:56+09:00</published><updated>2014-01-31T08:33:56+09:00</updated><author><name>shigepon</name></author><id>tag:blog.shigepon.info,2014-01-31:/blog/2014/01/31/octpress-tips/</id><summary type="html"></summary><content type="html">&lt;p&gt;Octopressのインストール後に行ったカスタマイズをまとめておきます。&lt;/p&gt;
&lt;h2&gt;外部リンクを別ウィンドウで開く&lt;/h2&gt;
&lt;p&gt;下のコードを追加します&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="nx"&gt;source&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nx"&gt;_inclides&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nx"&gt;custom&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nx"&gt;head&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;html&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;script&lt;/span&gt; &lt;span class="nx"&gt;language&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;JavaScript&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;ready&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;a[href^=&amp;#39;http&amp;#39;]:not([href*=&amp;#39;&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;location&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;hostname&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&amp;#39;])&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;attr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;target&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;_blank&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="err"&gt;/script&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;!-- more --&gt;

&lt;p&gt;のようにJavascriptで対応します&lt;/p&gt;
&lt;h2&gt;一覧表示での表示範囲を決めるマークダウン&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;lt;!-- more --&amp;gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;これを書けばおk&lt;/p&gt;</content><category term="memo"></category><category term="Octopress"></category></entry></feed>