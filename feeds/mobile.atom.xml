<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>shigeponが関心のある技術情報など - mobile</title><link href="http://blog.shigepon.info/" rel="alternate"></link><link href="http://blog.shigepon.info/feeds/mobile.atom.xml" rel="self"></link><id>http://blog.shigepon.info/</id><updated>2014-12-08T01:42:49+09:00</updated><entry><title>Titanium Mobileのプロジェクトをアドホック配信する時にテストしてもらうユーザーを追加する</title><link href="http://blog.shigepon.info/blog/2014/12/08/add-uuid-to-titanium-mobile-project/" rel="alternate"></link><published>2014-12-08T01:42:49+09:00</published><updated>2014-12-08T01:42:49+09:00</updated><author><name>shigepon</name></author><id>tag:blog.shigepon.info,2014-12-08:/blog/2014/12/08/add-uuid-to-titanium-mobile-project/</id><summary type="html"></summary><content type="html">&lt;p&gt;追記：UUIDと書いてたのはUDIDの間違いでした！恥ずかしー。ご指摘いただいた@key3さんありがとうございました！&lt;/p&gt;
&lt;p&gt;いやー色々ぐぐっても大変だったし、これからも結構な頻度でやりそうなのでメモ。&lt;/p&gt;
&lt;p&gt;もともと作ったプロビジョニングファイルにUDIDを追加するには、&lt;/p&gt;
&lt;h2&gt;ぐぐってしっかり情報があった箇所（プロビジョングファイルにUDIDを追加する）&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://developer.apple.com/account/ios/profile/profileList.action"&gt;Apple Developer Center&lt;/a&gt;で左メニューのDevices-&amp;gt;Allをクリック&lt;/li&gt;
&lt;li&gt;右上の＋ボタンからデバイスを追加。名前とUDIDを記入してContinueでおk&lt;/li&gt;
&lt;li&gt;左メニューのProvisioning Profiles-&amp;gt;AllからUDIDを追加したいプロビジョニングファイルを探してクリック-&amp;gt;Editをクリック&lt;/li&gt;
&lt;li&gt;Devicesの一覧で、追加したDevice名をチェックしてGenerateボタンを押す&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- more --&gt;

&lt;h2&gt;ぐぐると古い情報が結構あって混乱した箇所（Xcode使ってローカルのプロビジョニングファイルを最新にする）&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Xcodeを起動して、メニューのXcode-&amp;gt;Preferencesで開いた画面でAccountsのボタン（右からに番目）をクリック-&amp;gt;View Detailsをクリック&lt;/li&gt;
&lt;li&gt;左下のリロードボタンを押す&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;そもそもあまりちゃんと情報が無かった箇所（Titanium Mobileで新しいプロビジョングファイルを使ってipaファイルを作成する）&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Titanium Mobileを起動-&amp;gt;App Explorerを表示-&amp;gt;右上の箱型アイコンをクリック-&amp;gt;Distribute - Ad Hoc/Enterpriseを選択&lt;/li&gt;
&lt;li&gt;Distributeの項目でSelect Provisioning Profileの項目で、作成したprofileを選択-&amp;gt;残りの必要事項を入力してPublish&lt;/li&gt;
&lt;li&gt;DistributeのSpecify locationで指定したフォルダ内にipaファイルが出来ているのでそれを配布すればおk&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;あまり良く分かってないけど、Titanium Mobileで配布する時のプロビジョングファイルと、デバッグ時のRun Configurationで指定するプロビジョングファイルは選択肢として違うものが出てくるので、結構混乱した。&lt;/p&gt;</content><category term="titanium"></category></entry><entry><title>Titanium MobileとDjangoでAjax認証を行う</title><link href="http://blog.shigepon.info/blog/2014/11/20/titanium-ajax-post-to-django/" rel="alternate"></link><published>2014-11-20T09:42:26+09:00</published><updated>2014-11-20T09:42:26+09:00</updated><author><name>shigepon</name></author><id>tag:blog.shigepon.info,2014-11-20:/blog/2014/11/20/titanium-ajax-post-to-django/</id><summary type="html"></summary><content type="html">&lt;p&gt;最近Titanium Mobile使ってスマホアプリを作ろうかなと思って色々試してるんだけど、ログイン認証する時にはまったので、メモ&lt;/p&gt;
&lt;p&gt;参考&lt;a href="http://stackoverflow.com/questions/26022797/in-appcelerator-titanium-how-can-i-get-djangos-csrf-token"&gt;In Appcelerator Titanium, how can I get Django's CSRF token?(Stack Overflow)&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Titanium MobileでのPOST&lt;/h2&gt;
&lt;p&gt;HTTPClientを使って、例えば次のように書く。UIの設計部分とかそんなのは省略。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    var &lt;span class="nv"&gt;client&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; Ti.Network.createHTTPClient&lt;span class="o"&gt;({&lt;/span&gt;
        onerror: &lt;span class="k"&gt;function&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;e&lt;span class="o"&gt;){&lt;/span&gt;
            Ti.API.debug&lt;span class="o"&gt;(&lt;/span&gt;e.error&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            alert&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;error&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="o"&gt;}&lt;/span&gt;,
        onload: &lt;span class="k"&gt;function&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;e&lt;span class="o"&gt;){&lt;/span&gt;
            var &lt;span class="nv"&gt;item&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; JSON.parse&lt;span class="o"&gt;(&lt;/span&gt;this.responseText&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;item.status&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="o"&gt;){&lt;/span&gt;//例としてstatusを返すという設定にしているのでこんな感じにしてる
                alert&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;ログインしました&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="o"&gt;}&lt;/span&gt;&lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="o"&gt;{&lt;/span&gt;
                alert&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;ログイン失敗しました&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="o"&gt;}&lt;/span&gt;
        &lt;span class="o"&gt;}&lt;/span&gt;
    &lt;span class="o"&gt;})&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    client.open&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;POST&amp;#39;&lt;/span&gt;,&lt;span class="s1"&gt;&amp;#39;http://url/to/login&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    client.send&lt;span class="o"&gt;({&lt;/span&gt;username:&lt;span class="s1"&gt;&amp;#39;hoge&amp;#39;&lt;/span&gt;,password:&lt;span class="s1"&gt;&amp;#39;fuga&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;})&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;!-- more --&gt;

&lt;h2&gt;Djangoでのユーザー認証&lt;/h2&gt;
&lt;p&gt;Djangoでユーザー認証しようとすると例えばこんな感じ(viewだけ)
REST API作るために、&lt;a href="http://www.django-rest-framework.org/"&gt;Django REST framework&lt;/a&gt;を使ってるので、そのままコピペしても使えないけど、@部分を消して、Responseとなっている箇所を自力でJSON出力すれば良いと思う。Django REST frameworkについてはどっかで書く。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# views.py&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;rest_framework&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;viewsets&lt;/span&gt;&lt;span class="err"&gt;↲&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;rest_framework.response&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Response&lt;/span&gt;&lt;span class="err"&gt;↲&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;rest_framework.decorators&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;api_view&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.contrib.auth&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;login&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;authenticate&lt;/span&gt;

&lt;span class="nd"&gt;@api_view&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;GET&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;POST&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;do_login&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;&lt;span class="err"&gt;↲&lt;/span&gt;                                                 
 &lt;span class="n"&gt;status&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="err"&gt;↲&lt;/span&gt;                                    
 &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_authenticated&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;&lt;span class="err"&gt;↲&lt;/span&gt;  
     &lt;span class="n"&gt;status&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="err"&gt;↲&lt;/span&gt;                                                  
 &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="err"&gt;↲&lt;/span&gt;                                                                
     &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;method&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;POST&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="err"&gt;↲&lt;/span&gt;                                 
         &lt;span class="n"&gt;username&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;POST&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;username&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="err"&gt;↲&lt;/span&gt;                          
         &lt;span class="n"&gt;password&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;POST&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;password&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="err"&gt;↲&lt;/span&gt;                      
         &lt;span class="n"&gt;user&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;authenticate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;username&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;username&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;password&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;password&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="err"&gt;↲&lt;/span&gt;     
         &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="err"&gt;↲&lt;/span&gt;                                     
             &lt;span class="n"&gt;status&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="err"&gt;↲&lt;/span&gt;                                      
             &lt;span class="n"&gt;login&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="err"&gt;↲&lt;/span&gt;                       
     &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="err"&gt;↲&lt;/span&gt;                                                      
         &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;Response&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;status&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;status&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;&lt;span class="err"&gt;↲&lt;/span&gt;                 
 &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;Response&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;status&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;status&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;&lt;span class="err"&gt;↲&lt;/span&gt;                                 
&lt;span class="err"&gt;↲&lt;/span&gt;                                                                      


&lt;span class="err"&gt;で、実際やってみるとレスポンスはこんな感じになる&lt;/span&gt;

&lt;span class="sb"&gt;``&lt;/span&gt;&lt;span class="err"&gt;`&lt;/span&gt;&lt;span class="n"&gt;js&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;detail&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;CSRF Failed: CSRF token missing or incorrect.&amp;quot;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;そういえばDjangoでCSRF対策してるんだった。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# settings.py&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;MIDDLEWARE_CLASSES = (
....
    'django.middleware.csrf.CsrfViewMiddleware',
....
)&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nx"&gt;ajaxでやり取りする部分だけ&lt;/span&gt;&lt;span class="err"&gt;、&lt;/span&gt;&lt;span class="nx"&gt;MIDDLEWARE_CLASSESから削除するって手もあるけど&lt;/span&gt;&lt;span class="err"&gt;、&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;Django&lt;/span&gt; &lt;span class="nx"&gt;APIリファレンス&lt;/span&gt;&lt;span class="p"&gt;](&lt;/span&gt;&lt;span class="nx"&gt;http&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="c1"&gt;//docs.djangoproject.jp/en/latest/ref/contrib/csrf.html)に書いてあるようにX-CSRFToken という独自ヘッダーに CSRF トークンの 値を設定するという対処をやってみた。&lt;/span&gt;

&lt;span class="sb"&gt;```js&lt;/span&gt;
&lt;span class="sb"&gt;function getCRSF(){&lt;/span&gt;
&lt;span class="sb"&gt;    var xhr = Ti.Network.createHTTPClient({&lt;/span&gt;
&lt;span class="sb"&gt;        onload: function(e){&lt;/span&gt;
&lt;span class="sb"&gt;            var item = JSON.parse(this.responseText);&lt;/span&gt;
&lt;span class="sb"&gt;            Ti.App.Properties.setString(&amp;quot;csrf&amp;quot;, item.csrf);&lt;/span&gt;
&lt;span class="sb"&gt;        }&lt;/span&gt;
&lt;span class="sb"&gt;    });&lt;/span&gt;
&lt;span class="sb"&gt;    xhr.open(&amp;#39;GET&amp;#39;,&amp;#39;http://url/to/login&amp;#39;);&lt;/span&gt;
&lt;span class="sb"&gt;    xhr.send();&lt;/span&gt;
&lt;span class="sb"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;これを書いて、getCRSFを先にどこかで実行しておいて
実際のリクエストはさっきのコードをこんな感じで修正する&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="nx"&gt;client&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;POST&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;http://url/to/login&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;client&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setRequestHeader&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;X-CSRFToken&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;Ti&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Properties&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getString&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;csrf&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;&lt;span class="c1"&gt;//これを追加&lt;/span&gt;

    &lt;span class="nx"&gt;client&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;send&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="nx"&gt;username&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;hoge&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;password&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;fuga&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Django側のコードはGETの時にcsrfのトークンを戻すように書き換える&lt;/p&gt;
&lt;p&gt;```py&lt;/p&gt;
&lt;h1&gt;views.py&lt;/h1&gt;
&lt;p&gt;from django.core.context_processors import csrf #を追加&lt;/p&gt;
&lt;h1&gt;上のviews.pyの14行目をこんな感じで修正&lt;/h1&gt;
&lt;p&gt;return Response({"status":status,"csrf":csrf(request)['csrf_token']})↲                 &lt;/p&gt;
&lt;p&gt;これでいけたみたい。&lt;/p&gt;</content><category term="python"></category><category term="django"></category><category term="titanium"></category></entry></feed>