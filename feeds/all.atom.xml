<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>shigeponが関心のある技術情報など</title><link href="http://blog.shigepon.info/" rel="alternate"></link><link href="http://blog.shigepon.info/feeds/all.atom.xml" rel="self"></link><id>http://blog.shigepon.info/</id><updated>2017-04-13T20:40:00+09:00</updated><entry><title>IPが変わったら自動でufwの設定変えるスクリプトをなでしこ2で組んでみた</title><link href="http://blog.shigepon.info/blog/2017/04/13/modify_ufw_setting_automatically_from_remote_server/" rel="alternate"></link><updated>2017-04-13T20:40:00+09:00</updated><author><name>shigepon</name></author><id>tag:blog.shigepon.info,2017-04-13:blog/2017/04/13/modify_ufw_setting_automatically_from_remote_server/</id><summary type="html">&lt;p&gt;うちではVPSサーバ の負荷を下げるためとか便利だからとかの理由で家のサーバからVPSサーバにアクセスすることが多いんだけど、IPがときたま変わるので、その度にufwとかの設定をやりかえないといけないのが面倒だったので、色々調べてなんとか自動で設定変更出来るスクリプトを組んでみた。セキュリティ的にびみょーな気がしないでもないけど、IPがいつの間にか変わってDBの更新が弾かれたーとかよりましなので、やってみた。&lt;/p&gt;
&lt;p&gt;ソースは需要ないと思うのでアップしない。やったこととポイントだけ書いておく。&lt;/p&gt;
&lt;h2&gt;やったこと&lt;/h2&gt;
&lt;p&gt;&lt;a href="http://www.ugtop.com/spill.shtml"&gt;確認くん&lt;/a&gt;でIPを調べて、IPが変わってたらsshでコマンドを叩く。IPは保存しておく。んで、これをcronジョブで定期的にやる。&lt;/p&gt;
&lt;h2&gt;ポイント&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;コマンドの実行結果はローカルファイルにリダイレクトしておいて、その結果から色々判定する&lt;/li&gt;
&lt;li&gt;ufwでdeleteする時はyes/noが聞かれるので、--forceオプションを付けて、回避する&lt;/li&gt;
&lt;li&gt;sudo使うコマンドがあるのでsudoに-Sオプションを付けてsshpassを使うかechoで標準入力からリダイレクトした。セキュリティ上あまりよくない気が・・・&lt;/li&gt;
&lt;li&gt;sshに-tオプションは付けなくても良かった。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;参考
+ &lt;a href="http://askubuntu.com/questions/611749/how-to-run-ufw-without-interactive-mode"&gt;How to run 'ufw' without interactive mode? - Ask Ubuntu&lt;/a&gt;
+ &lt;a href="http://inamuu.com/%E3%82%B7%E3%82%A7%E3%83%AB%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%97%E3%83%88%E3%81%A7%E3%83%AA%E3%83%A2%E3%83%BC%E3%83%88%E5%85%88%E3%81%AB%E3%82%B3%E3%83%9E%E3%83%B3%E3%83%89%E3%82%92%E5%AE%9F%E8%A1%8C/"&gt;シェルスクリプトでリモート先にコマンドを実行する際のTips | inamuu.com&lt;/a&gt;
+ &lt;a href="http://kanonji.info/blog/2013/06/07/ssh%E3%81%A7%E3%83%AA%E3%83%A2%E3%83%BC%E3%83%88%E3%82%B3%E3%83%9E%E3%83%B3%E3%83%89%E3%82%92%E5%AE%9F%E8%A1%8C%E3%81%99%E3%82%8B%E6%99%82%E3%81%AE%E6%9B%B8%E3%81%8D%E6%96%B9%E3%81%A8%E6%B3%A8/"&gt;sshでリモートコマンドを実行する時の書き方と注意点 | kanonjiのブログ&lt;/a&gt;
+ &lt;a href="http://www.pictnotes.jp/memo/archives/1"&gt;cron 経由や、sshからリモートの、sudo を実行したい場合｜その他｜お仕事メモ｜Pictnotes&lt;/a&gt;&lt;/p&gt;</summary><category term="linux"></category><category term="nadesiko2"></category></entry><entry><title>なでしこ2でradikoタイムフリーで録音してみたメモ</title><link href="http://blog.shigepon.info/blog/2017/04/12/record_timefree_radiko_with_nadesiko2/" rel="alternate"></link><updated>2017-04-12T17:22:00+09:00</updated><author><name>shigepon</name></author><id>tag:blog.shigepon.info,2017-04-12:blog/2017/04/12/record_timefree_radiko_with_nadesiko2/</id><summary type="html">&lt;p&gt;&lt;a href="http://blog.shigepon.info/blog/2015/07/19/record-radiko-with-nadesiko2/"&gt;なでしこ2でradikoの録音をやってみた&lt;/a&gt;の後、色々radikoの仕様が変わり、タイムフリーで1週間番組を聞くことが出来るようになった。なので、今更録音も要らないような気もするんだけど、録音はやっぱ出来たら出来たで便利なのでやってみた。気付いた点だけメモしておく。ちなみにメモの内容はまったくなでしことは関係無い。&lt;/p&gt;
&lt;p&gt;参考：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://d.hatena.ne.jp/nyanonon/touch/20161015"&gt;radikoがタイムフリー対応で録音出来なくなったので対処&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://qiita.com/komacchi/items/2db61b16c1c81967705f"&gt;radikoの仕様変更によるRaspberry Piでの録音失敗対応&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;2015/07/19時点からの変更点&lt;/h2&gt;
&lt;p&gt;結構色々変わってた。&lt;/p&gt;
&lt;h3&gt;player&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;http://radiko.jp/player/swf/player_3.0.0.00.swf  -&amp;gt; http://radiko.jp/apps/js/flash/myplayer-release.swf
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;ヘッダ&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;X-Radiko-App: pc_1 -&amp;gt; X-Radiko-App: pc_ts
X-Radiko-App-Version: 2.0.1 -&amp;gt; X-Radiko-App-Version: 4.0.0
X-Radiko-Authtoken: ... -&amp;gt; X-Radiko-AuthToken: ...
X-Radiko-Partialkey: ... -&amp;gt; X-Radiko-PartialKey: ...
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;録音URL&lt;/h3&gt;
&lt;p&gt;以前はストリーミングのurlをxmlから取って来てたけど、今回は
https://radiko.jp/v2/api/ts/playlist.m3u8?l=15&amp;amp;station_id=...&amp;amp;ft=...&amp;amp;to=...
（station_idにはMBSなどの放送局IDを、ft、toは西暦の年月日、時分秒を数字だけで繋げた数値を用いる）
のレスポンスに含まれるURLを仕様する&lt;/p&gt;
&lt;h3&gt;録音ツール&lt;/h3&gt;
&lt;p&gt;以前はrtmpdumpを使ってたけど、今回はffmpegを使った。ubuntu12.04で試したので、&lt;a href="http://blog.shigepon.info/blog/2017/04/12/use_recent_version_of_ffmpeg_for_ubuntu_1204/"&gt;ffmpegの最新版入れる必要
があった&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;タイムフリー機能のおかげで1週間に1回聞きたいやつまとめてダウンロードとか出来るからとても楽になったかもー。&lt;/p&gt;</summary><category term="nadesiko2"></category><category term="linux"></category></entry><entry><title>ffmpegの最新版をUbuntu 12.04で使う</title><link href="http://blog.shigepon.info/blog/2017/04/12/use_recent_version_of_ffmpeg_for_ubuntu_1204/" rel="alternate"></link><updated>2017-04-12T10:30:00+09:00</updated><author><name>shigepon</name></author><id>tag:blog.shigepon.info,2017-04-12:blog/2017/04/12/use_recent_version_of_ffmpeg_for_ubuntu_1204/</id><summary type="html">&lt;p&gt;ffmpeg使ってradikoのタイムフリー番組をダウンロードしようとして、ffmpegの最新版を入れようとしてみたメモ&lt;/p&gt;
&lt;h2&gt;ubuntu 12.04はffmpegのバージョンが古い&lt;/h2&gt;
&lt;p&gt;-headersオプションとか使えない。エラーが出る。バージョン見たら0.8.17・・・2017/4/12現在で3.2.4なのに古杉。&lt;/p&gt;
&lt;p&gt;&lt;script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"&gt;&lt;/script&gt;
&lt;!-- Google Adsense below content --&gt;
&lt;ins class="adsbygoogle" style="display:inline-block;width:336px;height:280px" data-ad-client="ca-pub-3165642025902490" data-ad-slot="1749996500"&gt;&lt;/ins&gt;
&lt;script&gt;
    (adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;!-- end Google Adsense --&gt;
&lt;/p&gt;
&lt;h2&gt;という訳でビルド済みのffmpegをインストールした&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://johnvansickle.com/ffmpeg/"&gt;FFmpeg Static Builds&lt;/a&gt;から、gitビルドのものを選んでダウンロード&lt;/li&gt;
&lt;li&gt;ffmpeg-git-xxbit-static.tar.xzみたいなファイルがダウンロードされるので、以下のコマンドを実行&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ xz -dv ffmpeg-git-xxbit-static.tar.xz
$ tar xfv ffmpeg-git-xxbit-static.tar
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;ffmpeg-git-xxbit-staticってフォルダにffmpegがあるので、これを実行すると良い&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;注意点？&lt;/h2&gt;
&lt;h2&gt;ネット上の動画を直接指定してダウンロード出来ない&lt;/h2&gt;
&lt;p&gt;nscdをインストールすると良い&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ sudo aptitude install nscd
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;その他&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;No trailing CRLF found in HTTP header.
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;とか出るけど気にしない。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Invalid cookie found, no value, path or domain specified↲
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;とか出ても気にしない。&lt;/p&gt;
&lt;p&gt;参考
&lt;a href="http://qiita.com/yayugu/items/d7f6a15a6f988064f51c"&gt;Ubuntu 14.04 で最新の ffmpeg を簡単かつクリーンにインストールする方法&lt;/a&gt;
&lt;a href="http://qiita.com/ymaru/items/87fbc4e68f5995d3964c"&gt;Linux で tar.xz 形式のファイルを解凍する&lt;/a&gt;&lt;/p&gt;</summary><category term="linux"></category></entry><entry><title>使わなくなっていたeeepcにpixelをインストールした話</title><link href="http://blog.shigepon.info/blog/2017/03/21/shi-wanakunatsuteitaeeepcnipixelwoinsutorushitahua/" rel="alternate"></link><updated>2017-03-21T21:41:23+09:00</updated><author><name>shigepon</name></author><id>tag:blog.shigepon.info,2017-03-21:blog/2017/03/21/shi-wanakunatsuteitaeeepcnipixelwoinsutorushitahua/</id><summary type="html">&lt;p&gt;うちでホコリをかぶってたeeepcを子供用に復活させるために、raspbianを一般のPCで使えるようにしたosである&lt;a href="https://www.raspberrypi.org/blog/introducing-pixel/"&gt;pixel&lt;/a&gt;をsdカードにインストールして、使えるようにしてみた（紹介記事「&lt;a href="http://jp.techcrunch.com/2016/12/23/20161222raspberry-pis-pixel-for-pc-and-mac-breathes-new-life-into-old-computers/"&gt;Raspberry PiがPixelをリリース―軽量OSが古いWindowsとMacを生き返らせる&lt;/a&gt;」） 。ついでにeeepcに必要なセットアップをしてみた。&lt;/p&gt;
&lt;h2&gt;SSDにインストールしようとして失敗&lt;/h2&gt;
&lt;p&gt;eeepcはssdが内蔵されているので、そこにインストール出来れば高速に起動しそうだしいいなと思い、色々ググってやってみたんだけど、うまくいかなかった。デスクトップっぽいものが表示するとこまではいったんだけど、背景画面は出ないし、画面サイズは大きいしということで、初めてのインストールにはハードルが高すぎたのでやめた。多分sdbが壊れているのか参照出来てないのかそんなとこだとは思うんだけど・・・&lt;/p&gt;
&lt;h2&gt;SDカードへインストール&lt;/h2&gt;
&lt;p&gt;通常pixelはUSBやSDカードへインストールするので、isoイメージをSDカードへ書き込んでインストールした。&lt;a href="https://www.raspberrypi.org/blog/pixel-pc-mac/"&gt;pixelのページ&lt;/a&gt;では、etcherを使っていたので、そのままetcherを使って書き込みした。で、書き込んだSDカードをeeepcのSDカードスロットに入れて起動し、BIOSオプションで、SDカードから起動するように変更すると、何の問題もなくpixelが起動した。ssdからじゃないのでちょっとだけ遅い気もするけど、個人的には大して気にならなかった。&lt;/p&gt;
&lt;h2&gt;設定&lt;/h2&gt;
&lt;p&gt;先にいつもパッケージの管理にaptitude、エディタにvimを使っているので、aptitudeをインストールした。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ sudo apt-get install aptitude vim
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;日本語化&lt;/h3&gt;
&lt;h4&gt;メニューの日本語化&lt;/h4&gt;
&lt;p&gt;他の記事にあるRaspberry Pi Configurationとかraspi-configみたいなコマンドは無いので注意。&lt;/p&gt;
&lt;h4&gt;chromeの日本語化&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ sudo aptitude install chromium-browser-l10n
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;ページの表示については設定-&amp;gt;詳細-&amp;gt;言語と入力の設定
で、日本語を追加したり、選んだりする。。　&lt;/p&gt;
&lt;h4&gt;日本語入力&lt;/h4&gt;
&lt;p&gt;Mozcをインストールした&lt;/p&gt;
&lt;h3&gt;キーボード配列&lt;/h3&gt;
&lt;p&gt;UKになっているので、USに変更しておく。メニュー-&amp;gt;設定-&amp;gt;キーボード、マウス設定からUSキーボードを追加して、初期設定として設定する&lt;/p&gt;
&lt;h3&gt;バッテリー確認&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ sudo aptitude install apci apci-tool
acpi-tool
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;フィルタリング設定&lt;/h3&gt;
&lt;p&gt;子供用なので、不適切なサイトは見れないようにしておきたい。今回はsquidとdansguardianの組み合わせでフィルタリングを行った。&lt;/p&gt;
&lt;h4&gt;DansGuardian&lt;/h4&gt;
&lt;p&gt;chromeのフィルタリングにDansGuardianとSquidを使った．&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ sudo aptitude install squid3 dansguardian
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;変更点は以下&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ sudo vim /etc/dansguardian/dansguardian.conf
&lt;span class="nv"&gt;language&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;japanese&amp;#39;&lt;/span&gt;
&lt;span class="nv"&gt;filterport&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; 適当に1
&lt;span class="nv"&gt;proxyport&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; 適当に2
$ sudo vim /etc/squid3/squid.conf
&lt;span class="nv"&gt;http_port&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; 適当に1
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;プロクシ設定&lt;/h4&gt;
&lt;p&gt;chromeストアで「proxy switchysharp」と検索し、該当する機能拡張をインストール。proxy switchsharpの設定画面でプロクシの設定が出来る。プロクシポートにdansguardianで設定した適当に2を設定する。複数設定して、切替を地球儀アイコンから選ぶことが出来る。&lt;/p&gt;
&lt;h3&gt;Scrach1.4で日本語入力&lt;/h3&gt;
&lt;p&gt;今回入れたpixelではvmの再インストールは要らなかったので、scrach起動オプションの変更だけで日本語入力出来るようになる。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ sudo vim /usr/bin/scrach
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;参考
+ &lt;a href="http://matoken.org/blog/blog/2014/04/02/linux-battery-check/"&gt;Linux でバッテリー状況確認方法幾つか | matoken's meme&lt;/a&gt;
+ &lt;a href="http://qiita.com/tsubu-mustard/items/41e0f230a3203c01c355"&gt;Linuxのchrome,chromiumでプロキシを通す - Qiita&lt;/a&gt;
+ &lt;a href="http://qiita.com/hachisuka_nsw/items/5ec967372a7d004c7d59"&gt;Linux版Scratch1.4で日本語入力 - Qiita&lt;/a&gt;
+ &lt;a href="https://www.server-world.info/query?os=CentOS_6&amp;amp;p=squid&amp;amp;f=5"&gt;Squid + DansGuardian&lt;/a&gt;&lt;/p&gt;</summary><category term="linux"></category><category term="raspberrypi"></category></entry><entry><title>pixelをインストールしたsdカードが壊れたので修復した話</title><link href="http://blog.shigepon.info/blog/2017/03/15/pixelwoinsutorushitasdkadogahuai-retanodexiu-fu-shitahua/" rel="alternate"></link><updated>2017-03-15T21:41:23+09:00</updated><author><name>shigepon</name></author><id>tag:blog.shigepon.info,2017-03-15:blog/2017/03/15/pixelwoinsutorushitasdkadogahuai-retanodexiu-fu-shitahua/</id><summary type="html">&lt;p&gt;うちでホコリをかぶってたeeepcを復活させるために、pixelをsdカードにインストールして、使えるようにしてみたんだけど、何かの操作の拍子にデスクトップからメニューや背景が消えてしまう症状が出たので、色々調べてみた。&lt;/p&gt;
&lt;p&gt;結論から言うとsdカードの一部が壊れていたのでfsckで修復したら治った。&lt;/p&gt;
&lt;p&gt;参考（&lt;a href="http://www.switchdoc.com/2016/01/tutorial-repairing-corrupted-sd-cards-for-the-raspberry-pi-on-mac/"&gt;Tutorial: Repairing Corrupted SD Cards for the Raspberry Pi on Mac - SwitchDoc Labs&lt;/a&gt;）&lt;/p&gt;
&lt;h2&gt;調査&lt;/h2&gt;
&lt;p&gt;調査と言っても単純で、syslogを調べてみた程度&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;EXT4-fs error (device sdb2): ext4_lookup: deleted inode referenced:
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;みたいなメッセージが出てたので、sdb2のファイルシステムが壊れたんだなと予測した。ホームフォルダで&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ ls -la
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;とかしてみると.configフォルダとかにアクセス出来なかったので、ファイルシステムが壊れてるという予測をさらに深めた。&lt;/p&gt;
&lt;h2&gt;修復&lt;/h2&gt;
&lt;p&gt;ファイルシステムの修復なので、fsckくらいしかすることないかなと思ったんだけど、pixelにはシングルユーザーモードが無く、sdb2をunmountしてsdb2を使ってるプロセスを切る方法が分からなかった。&lt;/p&gt;
&lt;p&gt;sdカードにインストールしているという利点を利用して、virtualboxを用いてmacにubuntuをインストールして、そのubuntuにsdカードを読み込ませてfsckするというちょっと面倒な手順をふんでみた。&lt;/p&gt;
&lt;h3&gt;ubuntuの準備&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;virtualboxのインストール　省略（ググれば色々出てくる）&lt;/li&gt;
&lt;li&gt;virtualboxの仮想マシン作成&lt;ul&gt;
&lt;li&gt;新規をクリック&lt;/li&gt;
&lt;li&gt;名前を適当に設定してubuntu(64bit)を選ぶ&lt;/li&gt;
&lt;li&gt;作った仮想マシンの設定をクリック&lt;/li&gt;
&lt;li&gt;ストレージ-&amp;gt;コントローラーをクリックしてポートの数を2に設定&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;virtualboxにubuntuをインストール　省略（ググれば色々出てくる）今回は12.04をインストールした&lt;/li&gt;
&lt;li&gt;一旦仮想マシンを終了しておく&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;SDカードをubuntuに追加する&lt;/h3&gt;
&lt;p&gt;SDカードを差すと、手順を進めるごとに何回か「カードが読み込めない」というメッセージが出るが、全て無視する。初期化しない。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;sdカードをmacに差す&lt;/li&gt;
&lt;li&gt;デバイス番号の確認&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ diskutil list
/dev/disk0
   &lt;span class="c1"&gt;#:                       TYPE NAME                    SIZE       IDENTIFIER&lt;/span&gt;
....
/dev/disk1
   &lt;span class="c1"&gt;#:                       TYPE NAME                    SIZE       IDENTIFIER&lt;/span&gt;
   0:     FDisk_partition_scheme                        *4.0 GB     disk1
   1:                       0x17                         1.4 GB     disk1s1
   2:                      Linux                         2.6 GB     disk1s2
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;今回はdisk1と確認できた。
+ アンマウント&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;diskutil unmountDisk /dev/disk1
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;sdカードの仮想ディスクを作る&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ &lt;span class="nb"&gt;cd&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;/Users/username/VirtualBox VMs&amp;quot;&lt;/span&gt;
$ sudo VBoxManage internalcommands createrawvmdk -filename ./sd-card.vmdk -rawdisk /dev/disk1
$ sudo chmod &lt;span class="m"&gt;777&lt;/span&gt; /dev/disk1
sudo chmod &lt;span class="m"&gt;777&lt;/span&gt; ./sd-card.vmdk
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;仮想マシンの設定-&amp;gt;ストレージ-&amp;gt;コントローラーでハードディスクの追加ボタン-&amp;gt;sd-card.vmdkを選択&lt;/li&gt;
&lt;li&gt;仮想マシンを起動&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;sdカードの修復&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;terminalを起動（ググれば出てくる）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;fsckを実行するデバイスを調べる&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ sudo lsblk -l
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;fsckを実行する&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ sudo fsck -fn /dev/sdb2
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;でエラーがあるか確認して&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ sudo fsck -fy /dev/sdb2
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;で修復&lt;/p&gt;
&lt;p&gt;修復が終わったら
仮想マシンを終了して、SDカードを取り出して、eeepcで起動確認した。&lt;/p&gt;</summary><category term="linux"></category><category term="raspberrypi"></category></entry><entry><title>Arduino microをAVRライタとして使う</title><link href="http://blog.shigepon.info/blog/2016/11/24/use-arduino-micro-as-avr-writer/" rel="alternate"></link><updated>2016-11-24T15:35:38+09:00</updated><author><name>shigepon</name></author><id>tag:blog.shigepon.info,2016-11-24:blog/2016/11/24/use-arduino-micro-as-avr-writer/</id><summary type="html">&lt;p&gt;LEGOをArduino（AVR）でコントロールして動かしたくなったので、色々やってみようと思う。まずはラクにProcessingでコードを書けるようにしたいので、市販のAVRをArduino化してみた。Arduino IDEのバージョンによってやり方が違っていたので、現在のバージョン（1.6.11）で通用するやり方をメモしておく。&lt;/p&gt;
&lt;h2&gt;手法を選ぶ&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;ArduinoをISPとして使う&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;材料&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Arduino Micro&lt;/li&gt;
&lt;li&gt;Atmega168トレーニングボード（共立電子製）&lt;/li&gt;
&lt;li&gt;MicroUSB - USBケーブル&lt;/li&gt;
&lt;li&gt;Qtケーブル6本&lt;/li&gt;
&lt;li&gt;Mac（Mac book air）&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;上手く行った手順&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Arduino IDEの設定&lt;/li&gt;
&lt;li&gt;Githubから設定ファイル（JSON）をダウンロード&lt;/li&gt;
&lt;li&gt;Arduino IDEの設定&lt;/li&gt;
&lt;li&gt;ISPピンを繋ぐ&lt;/li&gt;
&lt;li&gt;USBでMacとArduino Microを繋ぐ&lt;/li&gt;
&lt;li&gt;出力先の指定&lt;/li&gt;
&lt;li&gt;ブートローダー書き込み&lt;/li&gt;
&lt;li&gt;アップロード&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;はまったところ&lt;/h2&gt;
&lt;h3&gt;ピン配置&lt;/h3&gt;
&lt;h2&gt;参考&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://phaq.phunsites.net/2013/09/12/use-arduino-micro-as-isp-with-atmega-on-a-breadboard/"&gt;phaq » Blog Archive » Use Arduino Micro as ISP with ATmega on a breadboard&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.a2life.info/w/?tag=arduino"&gt;Arduino でAVR マイコンのプログラム&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://leftbraintinkering.blogspot.jp/2015/03/programming-atmega-168-328-using-your.html"&gt;Programming an ATmega (168, 328) using your Arduino as a programmer&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://ehbtj.com/electronics/arduino-internal-clock-8mhz/"&gt;Arduinoを内部クロック（8MHz）で動作させる | なんでも独り言&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.arduino.cc/en/uploads/Main/ArduinoMicro_Pinout3.png"&gt;ArduinoMicro_Pinout3.png (299×376) &lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://hex.ro/wp/blog/arduino-micro-as-isp-flashing-the-bootloader-of-an-arduino-leonardo/"&gt;Arduino Micro as ISP (flashing the bootloader of an Arduino Leonardo) – and thus goes by another day&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://nomolk.hatenablog.com/entry/2016/06/21/001322"&gt;Arduino IDE から、生の AVR に ISP でスケッチを書き込む方法（ArduinoIDE 1.6.4以降版） - nomolkのブログ&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</summary><category term="arduino"></category><category term="avr"></category></entry><entry><title>Pelicanメモ</title><link href="http://blog.shigepon.info/blog/2016/10/25/pelican-memo/" rel="alternate"></link><updated>2016-10-25T15:35:38+09:00</updated><author><name>shigepon</name></author><id>tag:blog.shigepon.info,2016-10-25:blog/2016/10/25/pelican-memo/</id><summary type="html">&lt;p&gt;pythonでブログを書くアプリ「&lt;a href="http://docs.getpelican.com/en/stable/"&gt;Pelican&lt;/a&gt;」についてメモ&lt;/p&gt;
&lt;h2&gt;記事の並び替え方法を変える&lt;/h2&gt;
&lt;p&gt;ARTICLE_ORDER_BYに文字列で指定する。関数で定義することも出来るみたいだが、まだ方法が分からない。&lt;/p&gt;
&lt;p&gt;pelicanconf.pyを編集&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;...&lt;/span&gt;
&lt;span class="n"&gt;ARTICLE_ORDER_BY&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;reverse-date&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;「reverse-」を付けると逆順になる。&lt;/p&gt;
&lt;p&gt;記事のマークダウンで指定するメタデータが並び替えの対象になる。
メタデータは全ての記事に付けていないとエラーが出る。&lt;/p&gt;
&lt;p&gt;参考：&lt;a href="http://docs.getpelican.com/en/3.6.3/settings.html"&gt;Settings — Pelican 3.6.3 documentation&lt;/a&gt;&lt;/p&gt;
&lt;!-- more --&gt;</summary><category term="memo"></category><category term="pelican"></category><category term="python"></category></entry><entry><title>Django データベース関連メモ</title><link href="http://blog.shigepon.info/blog/2016/10/25/django-db-memo/" rel="alternate"></link><updated>2016-10-25T14:35:38+09:00</updated><author><name>shigepon</name></author><id>tag:blog.shigepon.info,2016-10-25:blog/2016/10/25/django-db-memo/</id><summary type="html">&lt;p&gt;Djangoのモデルやデータベース関連のメモが多くなったので、データベースが直接関わる箇所をメモから切り離してみた。&lt;/p&gt;
&lt;h2&gt;リクエストパラメーターをモデルに入れる&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# views.py&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;a_view&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;hoge&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Fuga&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;GET&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;#新たにインスタンス作る場合&lt;/span&gt;
    &lt;span class="n"&gt;fuga&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Fuga&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;objects&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pk&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;hage&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Fuga&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;GET&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;instance&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;fuga&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;#既にあるインスタンスに入れる場合&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;instance=xxxとやるのを何度か忘れた＞＜&lt;/p&gt;
&lt;!-- more --&gt;

&lt;h2&gt;DjangoでGroup By&lt;/h2&gt;
&lt;p&gt;DjangoでGroup Byして何個かのフィールドのデータで例えば、日付とその日に登録したデータの件数だけ欲しい時&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# views.py&lt;/span&gt;
&lt;span class="n"&gt;q&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Hoge&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;objects&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;date__gte&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;date&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;date__lt&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;dto&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;extra&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;date&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;date_trunc(&amp;#39;day&amp;#39;,date)&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="n"&gt;q&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;query&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;group_by&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;date&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;values&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;q&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;values&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;date&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;order_by&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;annotate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Count&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;id&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;


&lt;span class="err"&gt;こんな感じでいける。ちなみに&lt;/span&gt;&lt;span class="n"&gt;PostgreSQL&lt;/span&gt;&lt;span class="err"&gt;。&lt;/span&gt;&lt;span class="n"&gt;date&lt;/span&gt;&lt;span class="err"&gt;が時間の情報も持っているので&lt;/span&gt;&lt;span class="n"&gt;PostgreSQL&lt;/span&gt;&lt;span class="err"&gt;の&lt;/span&gt;&lt;span class="n"&gt;date_trunc&lt;/span&gt;&lt;span class="err"&gt;関数を使って&lt;/span&gt;&lt;span class="n"&gt;date&lt;/span&gt;&lt;span class="err"&gt;を日付の情報だけにしてから、&lt;/span&gt;&lt;span class="n"&gt;group_by&lt;/span&gt;&lt;span class="err"&gt;する。&lt;/span&gt;
&lt;span class="n"&gt;annotate&lt;/span&gt;&lt;span class="err"&gt;は集計した値を新しいフィールド（ここだと&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="err"&gt;）に入れる。&lt;/span&gt;
&lt;span class="err"&gt;例えば&lt;/span&gt;&lt;span class="n"&gt;values&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="err"&gt;でアクセスできる。このコードで、日付とその日に登録したデータ件数が入った辞書のリストを得ることが出来る&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;QuerySetで吐いたクエリを出力&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# views.py&lt;/span&gt;
&lt;span class="n"&gt;h&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Hoge&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;objects&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;all&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;h&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;query&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;でおk。でもクエリが例外出す時には出せないような・・・&lt;/p&gt;
&lt;p&gt;debug_toolbar使えば見れるか&lt;/p&gt;
&lt;p&gt;参考：&lt;a href="http://programmer-jobs.blogspot.jp/2013/01/djangosql.html"&gt;Djangoで、デバック用のSQLクエリの表示 一言多いプログラマーの独り言&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;MultiValueDictKeyError&lt;/h2&gt;
&lt;p&gt;モデルをgetする時にキーに何も値が指定されてなかったりすると起こる。例えば&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;instance&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;SampleModel&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;objects&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;でkeyに何も設定されてないと起こるみたい。出た時に何回かイチイチぐぐったのでメモ&lt;/p&gt;
&lt;h2&gt;PostgreSQLでDateTimeFieldの値を日付に対してグルーピングしたい&lt;/h2&gt;
&lt;p&gt;PostgreSQLではタイムゾーン入りのタイムスタンプで登録されるので、&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;q&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Hoge&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;objects&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;extra&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;date&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;date_trunc(&amp;#39;day&amp;#39;,date)&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="n"&gt;q&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;query&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;group_by&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;date&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;みたいな構文で日付だけ取り出して、グルーピングしようとすると、PostgreSQLの設定でタイムゾーンがUTCになっていた場合に、2014/12/17 00:00:00+9のデータは2014/12/16 15:00:00+0と認識されるので12/16のデータとしてグルーピングされてしまう。日本のタイムゾーンでやってると、これはまずいので、以下のようなコードにすると良い&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;q&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Hoge&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;objects&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;extra&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;date&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;date_trunc(&amp;#39;day&amp;#39;,date AT TIME ZONE &amp;#39;JST&amp;#39;)&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="n"&gt;q&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;query&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;group_by&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;date&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Many to manyなモデルで中間テーブルをthroughで指定、かつ自己参照な場合の設定&lt;/h2&gt;
&lt;p&gt;参考：&lt;a href="http://stackoverflow.com/questions/3880489/how-do-i-write-a-django-model-with-manytomany-relationsship-with-self-through-a"&gt;How do I write a Django model with ManyToMany relationsship with self through a Model - Stack Overflow&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;symmetrical設定をすると良いらしい&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Member&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Model&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CharField&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;max_length&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;friends&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ManyToManyField&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;self&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;through&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;MemberFriends&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;symmetrical&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;MemberFriends&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Model&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;f&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ForeignKey&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Member&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;related_name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;f&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ForeignKey&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Member&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;related_name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;t&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;comment&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;model&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CharField&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;max_length&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;こんな感じ&lt;/p&gt;
&lt;h2&gt;dbにインデックスを付ける&lt;/h2&gt;
&lt;p&gt;インデックスの場合はフィールド定義にdb_index=Trueを付けるとおk&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;hoge&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;TextField&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;db_index&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;true&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;複合インデックスの場合はMetaクラスでindex_togetherを定義する&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Hoge&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Model&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
  &lt;span class="o"&gt;....&lt;/span&gt;
  &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Meta&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;index_together&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
      &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;hoge&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;fuga&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;この場合インデックス順はhoge-&amp;gt;fugaとなる。&lt;/p&gt;
&lt;h2&gt;ForeignKeyで逆参照をしたくない場合&lt;/h2&gt;
&lt;p&gt;related_nameを+にするか末尾に+を付けるかで対応出来る。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nv"&gt;user&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; models.ForeignKey&lt;span class="o"&gt;(&lt;/span&gt;User, &lt;span class="nv"&gt;related_name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;user+&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;こんな感じ&lt;/p&gt;
&lt;h2&gt;生sqlを使う時にin句にパラメーターを使いたい&lt;/h2&gt;
&lt;p&gt;タプルで指定すれば良い。リストは試してない。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nv"&gt;results&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; Hoge.objects.raw&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;select * from application_hoge where fuga in %s&amp;quot;&lt;/span&gt;, tuple&lt;span class="o"&gt;(&lt;/span&gt;fuga&lt;span class="o"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;参考：&lt;a href="http://stackoverflow.com/questions/6895051/passing-lists-or-tuples-as-arguments-in-django-raw-sql"&gt;passing lists or tuples as arguments in django raw sql - Stack Overflow&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;サブクエリの使い方&lt;/h2&gt;
&lt;p&gt;例えばMemberモデルにname (名前)やboss(上司の名前)、stage(肩書き)フィールドがあるとして、肩書きが部長の上司を持つMemberを取り出したい場合はこんな感じ&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;a_query&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Member&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;objects&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;stage&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;部長&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;value_list&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;name&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;b_query&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Member&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;objects&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;boss__in&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;a_query&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;select&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="n"&gt;member&lt;/span&gt; &lt;span class="k"&gt;where&lt;/span&gt; &lt;span class="n"&gt;boss&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;select&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="n"&gt;member&lt;/span&gt; &lt;span class="k"&gt;where&lt;/span&gt; &lt;span class="n"&gt;stage&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;部長&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;を実行したような感じになる。&lt;/p&gt;
&lt;p&gt;参考：&lt;a href="http://stackoverflow.com/questions/8556297/how-to-subquery-in-queryset-in-django"&gt;python - how to subquery in queryset in django? - Stack Overflow&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;モデル削除時にリレーション先を削除しない&lt;/h2&gt;
&lt;p&gt;リレーションを貼ったモデルを削除する時は、通常リレーション先のモデルも削除する。
その挙動を変えたい時は、ForeignKeyフィールドにon_deleteの項目を追加すると良い。
リレーション先を削除したくない場合は次のように書けば良い。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Hoge&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Model&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;fuga&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ForeignKey&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;null&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;on_delete&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SET_NULL&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;必ずnull=Trueが必要なことに注意。
他にも&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;CASCADE&lt;ul&gt;
&lt;li&gt;初期値&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;PROTECT&lt;ul&gt;
&lt;li&gt;削除しようとしたら例外を出す&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;SET_DEFAULT&lt;ul&gt;
&lt;li&gt;初期値を入れる（default=...が必要)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;SET&lt;ul&gt;
&lt;li&gt;削除時に関数を呼び出す&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;がある。&lt;/p&gt;
&lt;p&gt;参考：&lt;a href="https://docs.djangoproject.com/en/dev/ref/models/fields/#django.db.models.ForeignKey.on_delete"&gt;Model field reference | Django documentation | Django&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;リレーション先があるかどうかを調べるクエリ&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;Hoge&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;objects&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fuga__isnull&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;False&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;みたいにする&lt;/p&gt;
&lt;p&gt;参考：&lt;a href="http://stackoverflow.com/questions/13829082/filter-django-objects-where-related-object-exists"&gt;Filter Django objects where related object exists - Stack Overflow&lt;/a&gt;&lt;/p&gt;</summary><category term="memo"></category><category term="django"></category><category term="python"></category></entry><entry><title>pythonのライブラリメモ</title><link href="http://blog.shigepon.info/blog/2016/10/25/python_libraries_memo/" rel="alternate"></link><updated>2016-10-29T20:30:00+09:00</updated><author><name>thoz</name></author><id>tag:blog.shigepon.info,2016-10-25:blog/2016/10/25/python_libraries_memo/</id><summary type="html">&lt;p&gt;pythonのライブラリは様々な種類があるので、メモしておかないと、何がどう使えるのかさっぱり分からない（英語ページを見る羽目になる）のでメモしておく。&lt;/p&gt;
&lt;h2&gt;文字列の類似度を比較するーdifflib&lt;/h2&gt;
&lt;p&gt;文字列の類似度や差分を計算する時にはpythonの標準ライブラリの「&lt;a href="http://docs.python.jp/2/library/difflib.html"&gt;difflib&lt;/a&gt;」が使える&lt;/p&gt;
&lt;p&gt;類似度を計算するのはこんな感じ&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# -*- coding: utf-8 -*-&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;difflib&lt;/span&gt;

&lt;span class="n"&gt;str_from&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;ほげ&amp;quot;&lt;/span&gt;
&lt;span class="n"&gt;str_to&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;ふが&amp;quot;&lt;/span&gt;
&lt;span class="n"&gt;match&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;difflib&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SequenceMatcher&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;str_from&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;str_to&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ratio&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;こんな感じ&lt;/p&gt;
&lt;p&gt;参考：&lt;a href="http://blog.mudatobunka.org/entry/2016/05/08/154934"&gt;Python で文字列の類似度を比較する - 無駄と文化&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Djangoでcssやjavascriptを圧縮してインライン表示できるdjango_compressor&lt;/h2&gt;
&lt;h3&gt;インストール&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ pip install django_compressor
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;設定ファイル&lt;/h3&gt;
&lt;p&gt;settings.pyを編集&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;INSTALLED_APPS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;
&lt;span class="s1"&gt;&amp;#39;compressor&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;STATICFILES_FINDERS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;
&lt;span class="s1"&gt;&amp;#39;compressor.finders.CompressorFinder,&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;COMPRESS_ENABLED&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt; &lt;span class="c1"&gt;#DEBUG=Trueの状態で機能させたい時はこれを設定&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;テンプレート&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;\{% load compress %\}
\{% compress css inline %\}
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;link&lt;/span&gt; &lt;span class="na"&gt;rel&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;stylesheet&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;href&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;path/to/css&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
\{% endcompress %\}
\{% compress js inline %\}
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;script&lt;/span&gt; &lt;span class="na"&gt;src&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;path/to/js&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
\{% endcompress %\}
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;モバイル検出ーdjango-mobile&lt;/h2&gt;
&lt;p&gt;djangoでモバイル検出してテンプレート振り分けたり、条件分けしたい時
に使うライブラリ&lt;/p&gt;
&lt;h3&gt;インストール&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pip install django_mobile
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;設定&lt;/h3&gt;
&lt;p&gt;settings.pyを編集&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;INSTALLED_APPS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;
&lt;span class="s1"&gt;&amp;#39;django_mobile&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;MIDDLEWARE_CLASSES&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;
&lt;span class="s1"&gt;&amp;#39;django_mobile.middleware.MobileDetectionMiddleware&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="s1"&gt;&amp;#39;django_mobile.middleware.SetFlavourMiddleware&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;TEMPLATES&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[{&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;
&lt;span class="s1"&gt;&amp;#39;OPTIONS&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:{&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;
&lt;span class="s1"&gt;&amp;#39;django_mobile.context_processors.flavour&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;
&lt;span class="p"&gt;}]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;loaderの設定しなかったけど、条件分岐に使っただけなので出来た。テンプレート振り分けはやってない。&lt;/p&gt;
&lt;h3&gt;テンプレート内でのモバイル判定&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;You {% if flavour == &amp;quot;mobile&amp;quot; %}use mobile{% else %}don&amp;#39;t use mobile{% endif %}.
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;参考：&lt;a href="https://github.com/gregmuellegger/django-mobile"&gt;GitHub - gregmuellegger/django-mobile: Detect mobile browsers and serve different template flavours to them.&lt;/a&gt;&lt;/p&gt;</summary><category term="python"></category><category term="memo"></category></entry><entry><title>uwsgiの負荷をuwsgitopで調べて、uwsgiを調整する</title><link href="http://blog.shigepon.info/blog/2016/09/17/uwsginofu-he-wouwsgitopdediao-bete-uwsgiwodiao-zheng-suru/" rel="alternate"></link><updated>2016-09-17T21:41:23+09:00</updated><author><name>shigepon</name></author><id>tag:blog.shigepon.info,2016-09-17:blog/2016/09/17/uwsginofu-he-wouwsgitopdediao-bete-uwsgiwodiao-zheng-suru/</id><summary type="html">&lt;p&gt;運営してるサービスがえらい重かったので、調べてみた。
使用しているアプリはnginx, uwsgi, django&lt;/p&gt;
&lt;p&gt;&lt;a href="http://qiita.com/wapa5pow/items/f4326aed6c0b63617ebd"&gt;Apacheにかわるwebサーバ: uWSGIパフォーマンスチューニング - Qiita&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;を見るとuwsgitopを使ってuwsgiのパフォーマンスを調べることが出来るらしいので、導入してみた。&lt;/p&gt;
&lt;h2&gt;インストール&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ pip install uwsgitop
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;これだけ&lt;/p&gt;
&lt;h2&gt;uwsgiの設定&lt;/h2&gt;
&lt;p&gt;uwsgi.iniにuwsgitop用の設定をした。今回はこの2行を追加した&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;stats = /tmp/projectname.stats.sock
memory-report = true
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;んで、uwsgiを再起動&lt;/p&gt;
&lt;h2&gt;uwsgitopを起動&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ uwsgitop /tmp/projectname.stats.sock
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;起動するとこんな感じになった&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;uwsgi-x.x.x - Fri Sep 16 22:24:17 2016 - req: 11366 - RPS: 1 - lq: 0 - tx: 409.
0Mde: www10363uf - cwd: /path/to/project - uid: 1000 - gid: 1000 -
 WID    %       PID     REQ     RPS     EXC     SIG     STATUS  AVG     RSS
 1      20.0    31414   2277    0       0       0       idle    2516ms  83.0M
202.0M  71.0M   1       0       7157645 12:32:03
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;あ・・・プロセス1個しか立ち上がってない・・・&lt;/p&gt;</summary><category term="python"></category><category term="uwsgi"></category></entry><entry><title>PostgreSQLメモ</title><link href="http://blog.shigepon.info/blog/2016/09/16/postgresql-memo/" rel="alternate"></link><updated>2016-09-16T21:24:42+09:00</updated><author><name>shigepon</name></author><id>tag:blog.shigepon.info,2016-09-16:blog/2016/09/16/postgresql-memo/</id><summary type="html">&lt;p&gt;rhaco2をPostgreSQL8.3で使えるように色々調べていくうちに学んだメモ。&lt;/p&gt;
&lt;h2&gt;insert時に「デフォルト値を入れる」だけの処理をしたい場合&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;insert&lt;/span&gt; &lt;span class="k"&gt;into&lt;/span&gt; &lt;span class="err"&gt;テーブル名&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;でOK&lt;/p&gt;
&lt;h2&gt;integerのカラムとかにlikeを適用したい場合&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;select&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="err"&gt;テーブル名&lt;/span&gt; &lt;span class="k"&gt;where&lt;/span&gt; &lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nb"&gt;text&lt;/span&gt; &lt;span class="k"&gt;like&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;#&lt;/span&gt;&lt;span class="mi"&gt;039&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="n"&gt;abc&lt;/span&gt;&lt;span class="o"&gt;%&amp;amp;#&lt;/span&gt;&lt;span class="mi"&gt;039&lt;/span&gt;&lt;span class="p"&gt;;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;!-- more --&gt;

&lt;p&gt;のようにカラムをテキストにキャストする。MySQLのvarcharをselectする時はデフォルトignore case。ついでにtrimも勝手にかける？らしい&lt;/p&gt;
&lt;h2&gt;show column&lt;/h2&gt;
&lt;p&gt;Mysqlで使えるshow columnは無いが、information_schemaの情報をselectすることで同じようなことが出来る。
ただし、create table時にserialで指定してもinformation_schema.columnsから取得できるカラム情報はinteger(int4)のみ。
なのでserialと判定するにはカラムがintegerであり、かつデフォルト値としてnextvalが指定されていることなど、複合的にチェックする必要がある。&lt;/p&gt;
&lt;h2&gt;cronでsqlを実行&lt;/h2&gt;
&lt;p&gt;毎日0時0分に実行する場合&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;0 0 * * * /path/to/psql -U username -c &amp;quot;sql&amp;quot; database &amp;gt; /dev/null
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;select結果でinsert, update&lt;/h2&gt;
&lt;p&gt;insertの場合はinsert文の後でselect文を書く。以下は一例&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;insert&lt;/span&gt; &lt;span class="k"&gt;into&lt;/span&gt; &lt;span class="k"&gt;table&lt;/span&gt; &lt;span class="k"&gt;select&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="n"&gt;table2&lt;/span&gt; &lt;span class="k"&gt;where&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="k"&gt;like&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;hoge%&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;別テーブルへの一部データのバックアップ代わりにも使える&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;insert&lt;/span&gt; &lt;span class="k"&gt;into&lt;/span&gt; &lt;span class="n"&gt;backup_table&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;select&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="k"&gt;table&lt;/span&gt; &lt;span class="k"&gt;where&lt;/span&gt; &lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;updateは次のように行う&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;update&lt;/span&gt; &lt;span class="k"&gt;table&lt;/span&gt; &lt;span class="k"&gt;set&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;select&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="n"&gt;table2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="k"&gt;where&lt;/span&gt; &lt;span class="k"&gt;table&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;どの範囲のデータが更新されるかに注意してwhere句を使う。上の場合、tの中でwhere句を使う場合とで異なる結果になる場合がある。&lt;/p&gt;
&lt;h2&gt;インデックス一覧を表示&lt;/h2&gt;
&lt;p&gt;インデックス一覧を表示。インデックスを2重に登録しようとするとエラーが出るので、チェックに使う&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;SELECT&lt;/span&gt; &lt;span class="n"&gt;tablename&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;indexname&lt;/span&gt; &lt;span class="k"&gt;FROM&lt;/span&gt; &lt;span class="n"&gt;pg_indexes&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;ビューの一覧を表示&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;SELECT&lt;/span&gt; &lt;span class="n"&gt;viewname&lt;/span&gt; &lt;span class="k"&gt;FROM&lt;/span&gt; &lt;span class="n"&gt;pg_views&lt;/span&gt; &lt;span class="k"&gt;ORDER&lt;/span&gt; &lt;span class="k"&gt;BY&lt;/span&gt; &lt;span class="n"&gt;viewname&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;ビューの定義を調べる&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;select&lt;/span&gt; &lt;span class="n"&gt;definition&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="n"&gt;pg_views&lt;/span&gt; &lt;span class="k"&gt;WHERE&lt;/span&gt; &lt;span class="n"&gt;viewname&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;ビュー名&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;psqlで実行結果を見やすくする&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;psql&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;
&lt;span class="n"&gt;psql&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;select&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="k"&gt;table&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;カラムの数が多いと表示が崩れやすいので、これで見やすくなる&lt;/p&gt;
&lt;h2&gt;カラム追加時にNOT NULLを指定する手順&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;ALTER&lt;/span&gt; &lt;span class="k"&gt;TABLE&lt;/span&gt; &lt;span class="k"&gt;table_name&lt;/span&gt; &lt;span class="k"&gt;ADD&lt;/span&gt; &lt;span class="k"&gt;COLUMN&lt;/span&gt; &lt;span class="k"&gt;column_name&lt;/span&gt; &lt;span class="nb"&gt;text&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;ALTER&lt;/span&gt; &lt;span class="k"&gt;TABLE&lt;/span&gt; &lt;span class="k"&gt;table_name&lt;/span&gt; &lt;span class="k"&gt;ALTER&lt;/span&gt; &lt;span class="k"&gt;COLUMN&lt;/span&gt; &lt;span class="k"&gt;column_name&lt;/span&gt; &lt;span class="k"&gt;SET&lt;/span&gt; &lt;span class="k"&gt;DEFAULT&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;UPDATE&lt;/span&gt; &lt;span class="k"&gt;table_name&lt;/span&gt; &lt;span class="k"&gt;SET&lt;/span&gt; &lt;span class="k"&gt;column_name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;ALTER&lt;/span&gt; &lt;span class="k"&gt;TABLE&lt;/span&gt; &lt;span class="k"&gt;table_name&lt;/span&gt; &lt;span class="k"&gt;ALTER&lt;/span&gt; &lt;span class="k"&gt;COLUMN&lt;/span&gt; &lt;span class="k"&gt;column_name&lt;/span&gt; &lt;span class="k"&gt;SET&lt;/span&gt; &lt;span class="k"&gt;NOT&lt;/span&gt; &lt;span class="k"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;こんな感じで複数業使ってNOT NULL制約を入れる&lt;/p&gt;
&lt;h2&gt;テーブル（ビュー）のスキーマをファイルに書き込む&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ pg_dump -s -t table_name db_name &amp;gt; file_name
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;これだけ。反映したい時は&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ cat file_name &lt;span class="p"&gt;|&lt;/span&gt; psql db_name
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;でおk&lt;/p&gt;
&lt;h2&gt;csvの取り込み&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;1,&amp;quot;hoge&amp;quot;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;みたいなデータを/path/to/csvに保存して&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;copy&lt;/span&gt; &lt;span class="n"&gt;tablename&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;/path/to/csv&amp;#39;&lt;/span&gt; &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="n"&gt;csv&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;とpsql で実行すると取り込みできる。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;copy&lt;/span&gt; &lt;span class="n"&gt;tablename&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;column1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;column2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;/path/to/csv&amp;#39;&lt;/span&gt; &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="n"&gt;csv&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;とやれば、カラム名と順序の指定が可能&lt;/p&gt;
&lt;h2&gt;SQL結果をcsvに出力&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ psql db_name -c &lt;span class="s2"&gt;&amp;quot;SQL&amp;quot;&lt;/span&gt; -A -F, -t &amp;gt; filename
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;psql内では（タブ区切り出力とする）&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ psql
&lt;span class="se"&gt;\o&lt;/span&gt; filename
&lt;span class="se"&gt;\a&lt;/span&gt;
&lt;span class="se"&gt;\f&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;\t&amp;#39;&lt;/span&gt;
SQL
&lt;span class="se"&gt;\o&lt;/span&gt;
&lt;span class="se"&gt;\q&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;IN句に複数条件を指定&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;select&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="n"&gt;hoge&lt;/span&gt; &lt;span class="k"&gt;where&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;select&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="n"&gt;fuga&lt;/span&gt; &lt;span class="k"&gt;where&lt;/span&gt; &lt;span class="n"&gt;hage&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="k"&gt;select&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="n"&gt;hoge&lt;/span&gt; &lt;span class="k"&gt;where&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;fuga&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;hage&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;abc&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;def&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;みたいに指定すればおk&lt;/p&gt;
&lt;h2&gt;ユーザー定義関数の定義内容を表示&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;select&lt;/span&gt; &lt;span class="n"&gt;procsrc&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="n"&gt;pg_proc&lt;/span&gt; &lt;span class="k"&gt;where&lt;/span&gt; &lt;span class="n"&gt;proname&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;関数名&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;結構こんな感じでシステム用テーブルとかカラムとか色々あるので大変。&lt;/p&gt;
&lt;h2&gt;実行中のsql確認&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;select&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="n"&gt;pg_stat_activity&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;実行中sqlをストップ&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;select&lt;/span&gt; &lt;span class="n"&gt;pg_cancel_backend&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="err"&gt;プロセス&lt;/span&gt;&lt;span class="n"&gt;ID&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;データベースやテーブルのサイズ取得&lt;/h2&gt;
&lt;p&gt;データベース&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;select&lt;/span&gt; &lt;span class="n"&gt;pg_database_size&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;dbname&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;テーブル&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;select&lt;/span&gt; &lt;span class="n"&gt;pg_relation_size&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;tablename&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;select結果を配列にして、比較する&lt;/h2&gt;
&lt;p&gt;テーブル(event)に、日付(date)とイベントコード(code)カラムがあって、あるイベントコードのイベントと、全く同じ日程のイベントがあるかどうか調べる必要があったんだけど、配列使ったら上手く出来たのでメモ&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;select&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;select&lt;/span&gt; &lt;span class="n"&gt;array_agg&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;date_trunc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;day&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nb"&gt;date&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;code&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;select&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="n"&gt;event&lt;/span&gt; &lt;span class="k"&gt;where&lt;/span&gt; &lt;span class="k"&gt;order&lt;/span&gt; &lt;span class="k"&gt;by&lt;/span&gt; &lt;span class="nb"&gt;date&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="k"&gt;group&lt;/span&gt; &lt;span class="k"&gt;by&lt;/span&gt; &lt;span class="n"&gt;code&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="k"&gt;where&lt;/span&gt; &lt;span class="n"&gt;code&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;...&amp;#39;&lt;/span&gt; &lt;span class="k"&gt;and&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;d&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;ARRAY&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;select&lt;/span&gt; &lt;span class="n"&gt;date_trunc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;day&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nb"&gt;date&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="n"&gt;event&lt;/span&gt; &lt;span class="k"&gt;where&lt;/span&gt; &lt;span class="n"&gt;code&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;...&amp;#39;&lt;/span&gt; &lt;span class="k"&gt;order&lt;/span&gt; &lt;span class="k"&gt;by&lt;/span&gt; &lt;span class="nb"&gt;date&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;こんな感じで出来た。ポイントはgroup_byとarray_aggを使うとgroup化した時にそれぞれの行にあった数字をまとめて配列化できることと、配列は順序を同じにしておかないと比較出来ないので、予めorderをかけておくこと。select結果をそのまま配列にするにはARRAYでいけること。もうちょっとsqlをスッキリ出来そうだけど、とりあえずこんな感じ。&lt;/p&gt;
&lt;h2&gt;正規表現関連&lt;/h2&gt;
&lt;h3&gt;置換&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;select&lt;/span&gt; &lt;span class="n"&gt;regex_replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;columnname&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;pattern&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;replace&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="n"&gt;tablename&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;検索&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;select&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="n"&gt;tablename&lt;/span&gt; &lt;span class="k"&gt;where&lt;/span&gt; &lt;span class="n"&gt;columnname&lt;/span&gt; &lt;span class="o"&gt;~&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;pattern&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;psqlでパスワードを入力しない方法&lt;/h2&gt;
&lt;p&gt;~HOME/.pgpassを作成する(Linuxの場合)&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;hostname&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;port&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;database&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;username&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;password&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;参考：&lt;a href="http://saikyoline.jp/weblog/2005/10/14/234742.html"&gt;パスワード入力なしでpsql » サイキョウライン&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;全データベースの物理ファイルサイズ&lt;/h2&gt;
&lt;p&gt;&lt;a href="http://readit.l8r.in/post-289/"&gt;[Postgres]全データベースの物理ファイルサイズを取得 | Read it later.&lt;/a&gt;をそのまま使えば良い&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;select datname, pg_size_pretty(pg_database_size(datname)) from pg_database;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;psqlでsqlにパラメータを渡す&lt;/h2&gt;
&lt;p&gt;vオプションを用いる&lt;/p&gt;
&lt;p&gt;&lt;a href="http://stackoverflow.com/questions/7389416/postgresql-how-to-pass-parameters-from-command-line"&gt;PostgreSQL: How to pass parameters from command line? - Stack Overflow&lt;/a&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;#&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;sql&lt;/span&gt;
&lt;span class="k"&gt;select&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;vint&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;vstr&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ psql -v &lt;span class="nv"&gt;vint&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;10&lt;/span&gt; -v &lt;span class="nv"&gt;vstr&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&amp;#39;hoge&amp;#39;&amp;quot;&lt;/span&gt; -f a.sql dbname
&lt;span class="m"&gt;10&lt;/span&gt;  hoge
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;-cオプションで実行するsqlを指定する場合は無理っぽい&lt;/p&gt;
&lt;h2&gt;サブクエリで2列以上を返す&lt;/h2&gt;
&lt;p&gt;調べるのに結構時間かかった。配列を使うと上手く出来る&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;select&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;sub_array&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;hoge&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;sub_array&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;fuga&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;select&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;select&lt;/span&gt; &lt;span class="nb"&gt;array&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="k"&gt;avg&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;hoge&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="n"&gt;stddev&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;hoge&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="n"&gt;table1&lt;/span&gt; &lt;span class="k"&gt;where&lt;/span&gt; &lt;span class="p"&gt;...)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;sub_array&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="n"&gt;table1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="k"&gt;where&lt;/span&gt; &lt;span class="p"&gt;...;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;こんな感じで一旦複数列の値を配列に格納して、1列扱いとして、その配列を展開することでいける。ちなみに配列の添字は0スタートではなく、1スタートみたい。ある期間での集計値を各行に追加したいとかそんな場合にとても使える。&lt;/p&gt;
&lt;p&gt;参考：&lt;a href="http://yanor.net/wiki/?PostgreSQL%2FSQL%2F%E3%82%B5%E3%83%96%E3%82%AF%E3%82%A8%E3%83%AA%E3%81%A7%E8%A4%87%E6%95%B0%E3%82%AB%E3%83%A9%E3%83%A0%E3%82%92%E8%BF%94%E3%81%99"&gt;PostgreSQL/SQL/サブクエリで複数カラムを返す - yanor.net/wiki&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;クエリを止める&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;select&lt;/span&gt; &lt;span class="n"&gt;pg_stat_activity&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;でpidを確認して&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;select&lt;/span&gt; &lt;span class="n"&gt;pg_cancel_backend&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pid&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;でおk&lt;/p&gt;
&lt;h2&gt;集計に対するnullの扱い&lt;/h2&gt;
&lt;p&gt;sum, min, maxでは特に気にする必要は無いがcount, avg, stddevなどの集計の場合、nullは無視される。これを応用して、色んな条件での平均を計算したりできる。例えば毎日のデータに1週間分、1ヶ月分の集計を追加するとか出来る。&lt;/p&gt;
&lt;p&gt;参考：&lt;a href="http://fdays.blogspot.jp/2010/05/sql-null.html"&gt;floatingdays: SQLの集計関数で NULLを含む列を集計する場合の注意点&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;マテリアライズド・ビューの定義を表示&lt;/h2&gt;
&lt;p&gt;マテリアライズド・ビューの情報は通常のビューと違い、pg_matviewsに入っている。定義を確認する場合は&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;select&lt;/span&gt; &lt;span class="n"&gt;definition&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="n"&gt;pg_matviews&lt;/span&gt; &lt;span class="k"&gt;where&lt;/span&gt; &lt;span class="n"&gt;matviewname&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;ビュー名&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;でおk&lt;/p&gt;
&lt;h2&gt;コマンドラインでpsqlした結果をファイルに保存&lt;/h2&gt;
&lt;p&gt;カラム名などの情報無しでpsqlした結果を保存する&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ psql dbname -A -t -c &lt;span class="s2"&gt;&amp;quot;select ...&amp;quot;&lt;/span&gt; &amp;gt; result.txt
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;オプションで&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;-F ,
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;とか加えるとカンマ区切りになる&lt;/p&gt;
&lt;h2&gt;配列フィールドがhogeを含む条件をsqlで&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;select * from hoge where arr &amp;amp;&amp;amp; &amp;#39;fuga&amp;#39;;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;でarrという配列フィールドにfugaを含むものを取り出せる。良く使いそうなのでメモ&lt;/p&gt;
&lt;p&gt;参考：&lt;a href="https://www.postgresql.jp/document/9.4/html/functions-array.html"&gt;配列関数と演算子&lt;/a&gt;&lt;/p&gt;</summary><category term="PostgreSQL"></category><category term="memo"></category></entry><entry><title>ansibleを使ってlets encryptを設定するーandreaswolf.letsencryptを使ってみた</title><link href="http://blog.shigepon.info/blog/2016/04/12/setup_letsencrypt_ssl_using_ansible_andreaswolf_letsencrypt_role/" rel="alternate"></link><updated>2016-04-12T20:40:00+09:00</updated><author><name>thoz</name></author><id>tag:blog.shigepon.info,2016-04-12:blog/2016/04/12/setup_letsencrypt_ssl_using_ansible_andreaswolf_letsencrypt_role/</id><summary type="html">&lt;p&gt;ansibleを使って&lt;a href="https://letsencrypt.org/"&gt;lets encrypt&lt;/a&gt;を設定しようと思ったので、やった作業を記録しておく&lt;/p&gt;
&lt;h2&gt;ansible-galaxyから良さげなroleを探す&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://galaxy.ansible.com/"&gt;ansible-galaxy&lt;/a&gt;を使えばansibleの設定を色々まとめてくれる。ansible-galaxyで「BROWSE ROLES」をクリックするとキーワードでroleを調べることが出来るので、「encrypt」というキーワードで調べてみると何個か「letsencrypt」という名前のroleがあった。こういう場合はダウンロード数が多い奴を選べは無難な気がするので、今回は&lt;a href="https://galaxy.ansible.com/andreaswolf/letsencrypt/"&gt;andreaswolf.letsencrypt&lt;/a&gt;を使うことにした。他も色々あったけど、READMEが不十分だったり、機能がイマイチだったりで使えなかった。ちなみにUbuntuでやっているので、Fedoraなど用のroleは対象から外したので試してない。&lt;/p&gt;
&lt;p&gt;&lt;script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"&gt;&lt;/script&gt;
&lt;!-- Google Adsense below content --&gt;
&lt;ins class="adsbygoogle" style="display:inline-block;width:336px;height:280px" data-ad-client="ca-pub-3165642025902490" data-ad-slot="1749996500"&gt;&lt;/ins&gt;
&lt;script&gt;
    (adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;!-- end Google Adsense --&gt;
&lt;/p&gt;
&lt;h2&gt;roleのインストール&lt;/h2&gt;
&lt;p&gt;以下のコマンドでインストールした&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ ansible-galaxy install andreaswolf.letsencrypt -p /path/to/roles
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;rolesを保存する場所を指定したかったのでこんな感じにした。&lt;/p&gt;
&lt;h2&gt;roleの設定&lt;/h2&gt;
&lt;p&gt;READMEを見ながら設定した。&lt;/p&gt;
&lt;h3&gt;必須の設定&lt;/h3&gt;
&lt;p&gt;外部から「ssl化したいドメイン/.well-known/acme-challenge」にアクセス出来て、そのアクセス先を{{ acme_tiny_challenges_directory }}に設定する必要がある。今回nginxをwebサーバに使ったのでnginxの設定ファイルに&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="x"&gt;location /.well-known/acme-challenge {&lt;/span&gt;
&lt;span class="x"&gt;    alias &lt;/span&gt;&lt;span class="cp"&gt;{{&lt;/span&gt;&lt;span class="nv"&gt;acme_tiny_challenges_directory&lt;/span&gt;&lt;span class="cp"&gt;}}&lt;/span&gt;&lt;span class="x"&gt;;&lt;/span&gt;
&lt;span class="x"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;な感じで書いておいて、設定ファイルをansibleのtemplateモジュールを使って反映させた。&lt;/p&gt;
&lt;h3&gt;ssl関連の設定&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;letsencrypt_certs:
  - 
    name: &amp;quot;an_easily_recognizable_name__this_is_used_for_the_csr_file&amp;quot;
    keypath: &amp;quot;/path/to/your/keys/anything-you-like.key&amp;quot;
    certpath: &amp;quot;/path/to/your/certs/anything-you-like.crt&amp;quot;
    chainedcertpath: &amp;quot;/path/to/your/certs/anything-you-like.chained.pem&amp;quot;
    host: &amp;quot;myhost.example.com&amp;quot;
  -
    name: &amp;quot;multidomain cert&amp;quot;
    keypath: &amp;quot;/path/to/your/keys/example.org.key&amp;quot;
    certpath: &amp;quot;/path/to/your/certs/example.org.crt&amp;quot;
    host:
      - &amp;quot;foo.example.org&amp;quot;
      - &amp;quot;bar.example.org&amp;quot;
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;nameは適当に付けた&lt;/li&gt;
&lt;li&gt;keypath、certpathはchainedcertpathは/etc/ssl/hoge内に設定した&lt;/li&gt;
&lt;li&gt;hostは1個でも複数でもおk&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;他に設定出来る項目として&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;key_ownerは作成されるファイルのユーザー名&lt;/li&gt;
&lt;li&gt;key_groupは作成されるファイルのグループ名&lt;/li&gt;
&lt;li&gt;key_permissionsは作成されるファイルの権限、"0600"みたいにクウォートを入れて設定するらしい&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;があるらしいがやってない。&lt;/p&gt;
&lt;h3&gt;letsencryptでssl関連のファイルを作った後の設定&lt;/h3&gt;
&lt;p&gt;ssl設定をnginxで反映させたいので、それ用のnginxの設定テンプレートを作って反映させた。yml、テンプレートを一部抜粋するとこんな感じ。テンプレート名は「ホスト名.ssl」という名前で保存した&lt;/p&gt;
&lt;p&gt;ansibleのymlファイル&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="x"&gt;  tasks:&lt;/span&gt;
&lt;span class="x"&gt;    - name: create sites-available dir&lt;/span&gt;
&lt;span class="x"&gt;      template: src=/path/to/template/&lt;/span&gt;&lt;span class="cp"&gt;{{&lt;/span&gt;&lt;span class="nv"&gt;item.1&lt;/span&gt;&lt;span class="cp"&gt;}}&lt;/span&gt;&lt;span class="x"&gt;.ssl dest=/path/to/nginx/sites-available/&lt;/span&gt;&lt;span class="cp"&gt;{{&lt;/span&gt;&lt;span class="nv"&gt;item.1&lt;/span&gt;&lt;span class="cp"&gt;}}&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;span class="x"&gt;      with_subelements:&lt;/span&gt;
&lt;span class="x"&gt;        - &amp;quot;&lt;/span&gt;&lt;span class="cp"&gt;{{&lt;/span&gt;&lt;span class="nv"&gt;letsencrypt_certs&lt;/span&gt;&lt;span class="cp"&gt;}}&lt;/span&gt;&lt;span class="x"&gt;&amp;quot;&lt;/span&gt;
&lt;span class="x"&gt;        - host&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;nginxの設定&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="x"&gt;server {&lt;/span&gt;
&lt;span class="x"&gt;    listen 80;&lt;/span&gt;
&lt;span class="x"&gt;    listen [::]:80;&lt;/span&gt;
&lt;span class="x"&gt;    server_name xxx;&lt;/span&gt;
&lt;span class="x"&gt;    return 301 https://$host$request_uri;&lt;/span&gt;
&lt;span class="x"&gt;}&lt;/span&gt;
&lt;span class="x"&gt;server {&lt;/span&gt;
&lt;span class="x"&gt;    listen 443 ssl;&lt;/span&gt;
&lt;span class="x"&gt;    server_name xxx;&lt;/span&gt;
&lt;span class="x"&gt;    ssl_certificate &lt;/span&gt;&lt;span class="cp"&gt;{{&lt;/span&gt;&lt;span class="nv"&gt;item.0.certpath&lt;/span&gt;&lt;span class="cp"&gt;}}&lt;/span&gt;&lt;span class="x"&gt;;&lt;/span&gt;
&lt;span class="x"&gt;    ssl_certificate_key &lt;/span&gt;&lt;span class="cp"&gt;{{&lt;/span&gt;&lt;span class="nv"&gt;item.0.keypath&lt;/span&gt;&lt;span class="cp"&gt;}}&lt;/span&gt;&lt;span class="x"&gt;;&lt;/span&gt;
&lt;span class="x"&gt;    ssl_trusted_certificate &lt;/span&gt;&lt;span class="cp"&gt;{{&lt;/span&gt;&lt;span class="nv"&gt;item.0.chainedcertpath&lt;/span&gt;&lt;span class="cp"&gt;}}&lt;/span&gt;&lt;span class="x"&gt;;&lt;/span&gt;
&lt;span class="x"&gt;    ssl_stapling on;&lt;/span&gt;
&lt;span class="x"&gt;    ssl_stapling_verify on;&lt;/span&gt;
&lt;span class="x"&gt;    .....&lt;/span&gt;
&lt;span class="x"&gt;    location /.well-known/acme-challenge {&lt;/span&gt;
&lt;span class="x"&gt;        alias &lt;/span&gt;&lt;span class="cp"&gt;{{&lt;/span&gt;&lt;span class="nv"&gt;acme_tiny_challenges_directory&lt;/span&gt;&lt;span class="cp"&gt;}}&lt;/span&gt;&lt;span class="x"&gt;;&lt;/span&gt;
&lt;span class="x"&gt;    }&lt;/span&gt;
&lt;span class="x"&gt;    ....&lt;/span&gt;
&lt;span class="x"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;これで反映できる。あとはnotifyとかして、nginxをreloadして設定を反映させる。&lt;/p&gt;
&lt;p&gt;ただし、このroleでは&lt;a href="https://gethttpsforfree.com/"&gt;get https for free&lt;/a&gt;のような手動の操作をしないと&lt;a href="https://www.ssllabs.com/index.html"&gt;Qualys ssl labs&lt;/a&gt;でB判定になっちゃうので、また別のroleを試してみようと思う。&lt;/p&gt;</summary><category term="python"></category><category term="ansible"></category></entry><entry><title>Google Tag ManagerでGoogle Analyticsを使う</title><link href="http://blog.shigepon.info/blog/2016/04/02/implement_google_analytics_with_google_tag_manager/" rel="alternate"></link><updated>2016-04-02T10:30:00+09:00</updated><author><name>shigepon</name></author><id>tag:blog.shigepon.info,2016-04-02:blog/2016/04/02/implement_google_analytics_with_google_tag_manager/</id><summary type="html">&lt;p&gt;Google AnalyticsのコントロールもGoogle Tag Managerに置き換えてしまった方が良いと思ったのでやってみた。Google Analytics上での設定は先にしているものとする。&lt;/p&gt;
&lt;h2&gt;アカウント作成する場合&lt;/h2&gt;
&lt;p&gt;してもしなくても良い。すでにあるものを利用するなら、必要ない。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://tagmanager.google.com"&gt;Google Tag Manager&lt;/a&gt;にアクセス&lt;/li&gt;
&lt;li&gt;「アカウントを作成」をクリック&lt;/li&gt;
&lt;li&gt;アカウント名を入力して続行ボタンを押す&lt;/li&gt;
&lt;li&gt;コンテナ名を入力して使用場所としてウェブを選択&lt;/li&gt;
&lt;li&gt;利用規約が出るので「はい」&lt;/li&gt;
&lt;li&gt;作成を押す&lt;/li&gt;
&lt;li&gt;スニペットが出るので、これをウェブサイトの全てのページの&lt;body&gt;下にコピペする&lt;/li&gt;
&lt;li&gt;「コンテナの設定」からの作業を続ける&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"&gt;&lt;/script&gt;
&lt;!-- Google Adsense below content --&gt;
&lt;ins class="adsbygoogle" style="display:inline-block;width:336px;height:280px" data-ad-client="ca-pub-3165642025902490" data-ad-slot="1749996500"&gt;&lt;/ins&gt;
&lt;script&gt;
    (adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;!-- end Google Adsense --&gt;
&lt;/p&gt;
&lt;h2&gt;アカウント作成しない場合&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Google Tag Managerにアクセス&lt;/li&gt;
&lt;li&gt;すでに作成しているアカウントのアカウント名右にある「・・・」が縦になってるようなメニューをクリック&lt;/li&gt;
&lt;li&gt;コンテナを作成をクリック&lt;/li&gt;
&lt;li&gt;コンテナ名を入力して使用場所としてウェブを選択&lt;/li&gt;
&lt;li&gt;作成を押す&lt;/li&gt;
&lt;li&gt;スニペットが出るので、これをウェブサイトの全てのページの&lt;body&gt;下にコピペする&lt;/li&gt;
&lt;li&gt;「コンテナの設定」からの作業を続ける&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;コンテナの設定&lt;/h2&gt;
&lt;p&gt;まずGoogle Analyticsのトラッキング IDを変数にしておいた方が後々便利なので設定しておく&lt;/p&gt;
&lt;p&gt;変数の設定&lt;/p&gt;
&lt;h6&gt;&lt;/h6&gt;
&lt;ul&gt;
&lt;li&gt;左サイドの「変数」をクリック&lt;/li&gt;
&lt;li&gt;下部にある「新規」をクリック&lt;/li&gt;
&lt;li&gt;「定数」をクリック&lt;/li&gt;
&lt;li&gt;値として「UA-xxxx-xxxx」とGoogle Analyticsのトラッキング IDを設定して「変数を作成」をクリック&lt;/li&gt;
&lt;li&gt;変数名を適当に付けて「保存」をクリック（今回は「UA」とした）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;タグの設定（Google Analyticsの設定）&lt;/p&gt;
&lt;h6&gt;&lt;/h6&gt;
&lt;ul&gt;
&lt;li&gt;左サイドの「サマリー」をクリック&lt;/li&gt;
&lt;li&gt;新しいタグをクリック&lt;/li&gt;
&lt;li&gt;「1.プロダクトを選択」で「Google Analytics」をクリック&lt;/li&gt;
&lt;li&gt;「2.タグの種類を選択」で「ユニバーサルアナリティックス」をクリック（従来でも良いかも？）&lt;/li&gt;
&lt;li&gt;「3.タグを設定」で「トラッキングID」に「{{ UA }}」を設定（上で設定した変数）&lt;/li&gt;
&lt;li&gt;「続行」をクリック&lt;/li&gt;
&lt;li&gt;「4.配信するタイミング」で「全てのページ」をクリック&lt;/li&gt;
&lt;li&gt;「タグを作成」をクリック&lt;/li&gt;
&lt;li&gt;「タグ名の変更」で「タグ名」を適当に設定して「保存」をクリック&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;タグの公開（実行してAnalyticsを開始する）&lt;/p&gt;
&lt;h6&gt;&lt;/h6&gt;
&lt;ul&gt;
&lt;li&gt;タグ一覧の画面になるので右上の「公開」ボタンをクリック&lt;/li&gt;
&lt;li&gt;「今すぐ公開」ボタンをクリック&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;以上でAnalyticsにデータを送信してくれるようになる。&lt;/p&gt;
&lt;p&gt;Analyticsを動かすためだけにGoogle Tag Manager使うのは手間がかかるが、クリックを検出したりと色々機能を追加したり変更したりする時に、Google Tag Manager使っているとページ上のコードを変更する必要がなくなる。このメリットはとても大きいので、使う価値はあるんじゃないかと思う。&lt;/p&gt;</summary><category term="google"></category></entry><entry><title>pelicanのプラグイン利用法と入れておくと良さげなもの</title><link href="http://blog.shigepon.info/blog/2016/04/01/how_to_install_pelican_plugins_and_plugins_recommended/" rel="alternate"></link><updated>2016-04-01T14:30:00+09:00</updated><author><name>thoz</name></author><id>tag:blog.shigepon.info,2016-04-01:blog/2016/04/01/how_to_install_pelican_plugins_and_plugins_recommended/</id><summary type="html">&lt;p&gt;pelicanはプラグインを用いて色々機能を追加できる。プラグインを使うだけでそれっぽいブログが出来上がるので、結構便利だと思う。&lt;/p&gt;
&lt;h2&gt;pelicanプラグインのインストール方法&lt;/h2&gt;
&lt;p&gt;複数のブログで使うことを考えて独立したフォルダにプラグインを保存することにした。&lt;/p&gt;
&lt;h3&gt;プラグインダウンロード&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ &lt;span class="nb"&gt;cd&lt;/span&gt; /path/to
$ git --recursive clone https://github.com/getpelican/pelican-plugins.git
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;で/path/to/pelican-pluginsにgithubの&lt;a href="https://github.com/getpelican/pelican-plugins"&gt;getpelican/pelican-plugins&lt;/a&gt;上にあるプラグインを全てダウンロード出来る&lt;/p&gt;
&lt;h3&gt;プラグイン設定&lt;/h3&gt;
&lt;p&gt;pelicanconf.pyを編集する&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;#pelicanconf.py&lt;/span&gt;
&lt;span class="n"&gt;PLUGIN_PATHS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;/path/to/pelican-plugins&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;PLUGINS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;related_posts&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;tag_cloud&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;プラグイン個別の設定&lt;/h3&gt;
&lt;p&gt;プラグイン個別に必要な設定がある場合は別に設定する。github上のそれぞれのプラグイン個別のフォルダに設定の説明が大抵書いてある。（例：&lt;a href="https://github.com/getpelican/pelican-plugins/tree/master/tag_cloud"&gt;tag_cloud&lt;/a&gt;）&lt;/p&gt;
&lt;h3&gt;反映&lt;/h3&gt;
&lt;p&gt;makeすればおk。github上にアップするなら&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ make github
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"&gt;&lt;/script&gt;
&lt;!-- Google Adsense below content --&gt;
&lt;ins class="adsbygoogle" style="display:inline-block;width:336px;height:280px" data-ad-client="ca-pub-3165642025902490" data-ad-slot="1749996500"&gt;&lt;/ins&gt;
&lt;script&gt;
    (adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;!-- end Google Adsense --&gt;
&lt;/p&gt;
&lt;h2&gt;おすすめプラグイン&lt;/h2&gt;
&lt;h3&gt;tag_cloud&lt;/h3&gt;
&lt;p&gt;これを入れておかないと、Tagsの設定が反映されない。ほぼ必須？&lt;/p&gt;
&lt;h3&gt;related_posts&lt;/h3&gt;
&lt;p&gt;入れておけば関連する記事を勝手に表示してくれる。入れるととてもブログっぽく見えるプラグイン&lt;/p&gt;
&lt;h3&gt;tipue_search&lt;/h3&gt;
&lt;p&gt;検索フォームを用意してくれる。Googleのサイト内検索フォームとか無くても良くなる。&lt;/p&gt;
&lt;h3&gt;sitemap&lt;/h3&gt;
&lt;p&gt;sitemapを用意してくれる。xmlかtxtかフォーマットを指定する必要がある。pelicanconf.pyを&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;SITEMAP&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;format&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;xml&amp;#39;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;こんな感じで設定すれば良い。&lt;/p&gt;</summary><category term="pelican"></category><category term="python"></category></entry><entry><title>github pageのブログツールをoctopressからpelicanに移行しました</title><link href="http://blog.shigepon.info/blog/2016/03/31/migrate_octopress_github_page_to_pelican/" rel="alternate"></link><updated>2016-03-31T17:30:00+09:00</updated><author><name>thoz</name></author><id>tag:blog.shigepon.info,2016-03-31:blog/2016/03/31/migrate_octopress_github_page_to_pelican/</id><summary type="html">&lt;p&gt;別のブログを&lt;a href="http://docs.getpelican.com/en/3.6.3/"&gt;pelican&lt;/a&gt;で始めようと思っているので、このブログもpelicanで管理することにしたので作業内容をメモしておく&lt;/p&gt;
&lt;h2&gt;ローカル側にpelicanをインストール&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ pip install pelican Markdown
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;github pagesのリポジトリをclone&lt;/h2&gt;
&lt;p&gt;今回はgithubのユーザーページのリポジトリ（username.github.io）を/path/to/pelicanにクローンした。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ &lt;span class="nb"&gt;cd&lt;/span&gt; /path/to/pelican
$ git clone https://github.com/username/username.github.io
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;cloneすると色々ファイルが入っているので全部削除した&lt;/p&gt;
&lt;h2&gt;pelicanの初期設定を行う&lt;/h2&gt;
&lt;p&gt;pelicanの初期設定はpelican-quickstartコマンドで行った&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ pelican-quickstart
&amp;gt; Where &lt;span class="k"&gt;do&lt;/span&gt; you want to create your new web site? &lt;span class="o"&gt;[&lt;/span&gt;.&lt;span class="o"&gt;]&lt;/span&gt; .
&amp;gt; What will be the title of this web site? blog title
&amp;gt; Who will be the author of this web site? shigepon
&amp;gt; What will be the default language of this web site? &lt;span class="o"&gt;[&lt;/span&gt;en&lt;span class="o"&gt;]&lt;/span&gt; ja
&amp;gt; Do you want to specify a URL prefix? e.g., http://example.com   &lt;span class="o"&gt;(&lt;/span&gt;Y/n&lt;span class="o"&gt;)&lt;/span&gt; 
&amp;gt; What is your URL prefix? &lt;span class="o"&gt;(&lt;/span&gt;see above example&lt;span class="p"&gt;;&lt;/span&gt; no trailing slash&lt;span class="o"&gt;)&lt;/span&gt; blog.shigepon.info
&amp;gt; Do you want to &lt;span class="nb"&gt;enable&lt;/span&gt; article pagination? &lt;span class="o"&gt;(&lt;/span&gt;Y/n&lt;span class="o"&gt;)&lt;/span&gt; 
&amp;gt; How many articles per page &lt;span class="k"&gt;do&lt;/span&gt; you want? &lt;span class="o"&gt;[&lt;/span&gt;10&lt;span class="o"&gt;]&lt;/span&gt; 
&amp;gt; What is your &lt;span class="nb"&gt;time&lt;/span&gt; zone? &lt;span class="o"&gt;[&lt;/span&gt;Europe/Paris&lt;span class="o"&gt;]&lt;/span&gt; Asia/Tokyo
&amp;gt; Do you want to generate a Fabfile/Makefile to automate generation and publishing? &lt;span class="o"&gt;(&lt;/span&gt;Y/n&lt;span class="o"&gt;)&lt;/span&gt; 
&amp;gt; Do you want an auto-reload &lt;span class="p"&gt;&amp;amp;&lt;/span&gt; simpleHTTP script to assist with theme and site development? &lt;span class="o"&gt;(&lt;/span&gt;Y/n&lt;span class="o"&gt;)&lt;/span&gt; 
&amp;gt; Do you want to upload your website using FTP? &lt;span class="o"&gt;(&lt;/span&gt;y/N&lt;span class="o"&gt;)&lt;/span&gt; 
&amp;gt; Do you want to upload your website using SSH? &lt;span class="o"&gt;(&lt;/span&gt;y/N&lt;span class="o"&gt;)&lt;/span&gt; 
&amp;gt; Do you want to upload your website using Dropbox? &lt;span class="o"&gt;(&lt;/span&gt;y/N&lt;span class="o"&gt;)&lt;/span&gt; 
&amp;gt; Do you want to upload your website using S3? &lt;span class="o"&gt;(&lt;/span&gt;y/N&lt;span class="o"&gt;)&lt;/span&gt; 
&amp;gt; Do you want to upload your website using Rackspace Cloud Files? &lt;span class="o"&gt;(&lt;/span&gt;y/N&lt;span class="o"&gt;)&lt;/span&gt; 
&amp;gt; Do you want to upload your website using GitHub Pages? &lt;span class="o"&gt;(&lt;/span&gt;y/N&lt;span class="o"&gt;)&lt;/span&gt; y
&amp;gt; Is this your personal page &lt;span class="o"&gt;(&lt;/span&gt;username.github.io&lt;span class="o"&gt;)&lt;/span&gt;? &lt;span class="o"&gt;(&lt;/span&gt;y/N&lt;span class="o"&gt;)&lt;/span&gt; y
&amp;gt; Done. Your new project is available at ...
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;octopressで今迄作成していたmarkdownファイルを移動&lt;/h2&gt;
&lt;p&gt;pelicanの初期設定を行ったらcontentフォルダが出来るので、そこにブログ内容を移動した。
/path/to/octopressにoctopressが入っているとして以下のようにして今迄作成したブログの内容を移動した&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ cp /path/to/octopress/source/_posts/*.markdown /path/to/pelican/content
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"&gt;&lt;/script&gt;
&lt;!-- Google Adsense below content --&gt;
&lt;ins class="adsbygoogle" style="display:inline-block;width:336px;height:280px" data-ad-client="ca-pub-3165642025902490" data-ad-slot="1749996500"&gt;&lt;/ins&gt;
&lt;script&gt;
    (adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;!-- end Google Adsense --&gt;
&lt;/p&gt;
&lt;h2&gt;markdownファイルを編集&lt;/h2&gt;
&lt;p&gt;octopressのmarkdownファイルの中でそのままではpelicanで使用出来ない部分があるので編集した。編集内容はこんな感じ。１個１個修正するのは面倒なのでなるべくsedで変更した。&lt;/p&gt;
&lt;p&gt;元々のファイルはこんな感じ&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;---
title: &amp;quot;タイトル&amp;quot;
date: 2016-03-08 09:50:36 +0900
comments: true
categories: [&amp;quot;hoge&amp;quot;, &amp;quot;fuga&amp;quot;]
---

## 見出し
....
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;categoriesの変更&lt;/h3&gt;
&lt;p&gt;categoriesをtagsに変更して、&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p p-Indicator"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;hoge&amp;quot;&lt;/span&gt;&lt;span class="p p-Indicator"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;fuga&amp;quot;&lt;/span&gt;&lt;span class="p p-Indicator"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;を&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;hoge, fuga
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;になるように変更した&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ sed -e &lt;span class="s1"&gt;&amp;#39;s/^categories/tags/g&amp;#39;&lt;/span&gt; -i content/*.markdown
$ sed -e &lt;span class="s1"&gt;&amp;#39;/^tags/ s/\&amp;quot;//g&amp;#39;&lt;/span&gt; -i content/*.markdown
$ sed -e &lt;span class="s1"&gt;&amp;#39;/^tags/ s/\[//g&amp;#39;&lt;/span&gt; -i content/*.markdown
$ sed -e &lt;span class="s1"&gt;&amp;#39;/^tags/ s/\]//g&amp;#39;&lt;/span&gt; -i content/*.markdown
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;comments, layoutなど要らない部分の削除&lt;/h3&gt;
&lt;p&gt;layoutやcommentsは使わないし、ファイル内の「---」の部分も要らないので削除した&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ sed -e &lt;span class="s1"&gt;&amp;#39;/^layout:/ d&amp;#39;&lt;/span&gt; -i content/*.markdown
$ sed -e &lt;span class="s1"&gt;&amp;#39;/^comments:/ d&amp;#39;&lt;/span&gt; -i content/*.markdown
$ sed -e &lt;span class="s1"&gt;&amp;#39;/^---:/ d&amp;#39;&lt;/span&gt; -i content/*.markdown
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;summary, categoryの追加&lt;/h3&gt;
&lt;p&gt;summaryはoctpressでは&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;lt;!-- more --&amp;gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;を使ってるので、それをそのまま使いたい場合は&lt;a href="https://github.com/getpelican/pelican-plugins/tree/master/summary"&gt;summaryプラグイン&lt;/a&gt;を使うと良い・・・らしい。試してないけど。&lt;/p&gt;
&lt;p&gt;今回はsummaryを空白にしたかったので、「summary:」を追加した。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sed -e &lt;span class="s1"&gt;&amp;#39;/^tags:/ i summary:&amp;#39;&lt;/span&gt; -i content/*.markdown
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;カテゴリは記事によって違うので、さすがに手入力しないといけない（tagsの項目を使いたいが、pelicanは複数カテゴリを扱えないので上手く出来ない）。なので、とりあえず&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sed -e &lt;span class="s1"&gt;&amp;#39;/^tags:/ i category:&amp;#39;&lt;/span&gt; -i content/*.markdown
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;こんな感じで空欄とした&lt;/p&gt;
&lt;h2&gt;urlの扱いをoctopressに合わせる&lt;/h2&gt;
&lt;p&gt;octopressでは/year/month/day/title/
みたいなurlになる。pelicanでは/title/だけなので、合わせるように設定すると良い&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;#pelicanconf.py&lt;/span&gt;
&lt;span class="c1"&gt;#ファイル名からslugを取得&lt;/span&gt;
&lt;span class="n"&gt;FILENAME_METADATA&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;(?P&amp;lt;date&amp;gt;\d{4}-\d{2}-\d{2})-(?P&amp;lt;slug&amp;gt;.*)&amp;#39;&lt;/span&gt;
&lt;span class="c1"&gt;#得られたslugからhtml生成時のurlと保存先を指定&lt;/span&gt;
&lt;span class="n"&gt;ARTICLE_URL&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;{date:%Y}/{date:%m}/{date:&lt;/span&gt;&lt;span class="si"&gt;%d&lt;/span&gt;&lt;span class="s1"&gt;}/{slug}/&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;ARTICLE_SAVE_AS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;{date:%Y}/{date:%m}/{date:&lt;/span&gt;&lt;span class="si"&gt;%d&lt;/span&gt;&lt;span class="s1"&gt;}/{slug}/index.html&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;コードハイライトの設定&lt;/h2&gt;
&lt;p&gt;コードハイライトの為の設定として「```」を使えるように修正した&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;#pelicanconf.py&lt;/span&gt;
&lt;span class="n"&gt;MD_EXTENSIONS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;fenced_code&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;codehilite(css_class=highlight)&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;github pageへのアップ&lt;/h2&gt;
&lt;p&gt;記事が出来たので、とりあえずgithub pageへアップ出来れば完成。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ make github
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;あとはユーザー名とパスワード聞かれるので、入力すればアップ出来た。&lt;/p&gt;
&lt;p&gt;参考：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://jhshi.me/2015/10/11/migrating-from-octopress-to-pelican/"&gt;Migrating from Octopress to Pelican - Pearls in Life&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://daikishimada.github.io/pelican-start.html"&gt;Pelican + Github Pages でブログを作った話 | Futon note&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://a-slide.github.io/blog/github-pelican"&gt;Create a github hosted Pelican blog with a Bootstrap3 theme - Drowned In Genomics&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;ちなみにこれから作成していく記事は別に2016_03_31_hogefuga.markdownみたいな形式にしないでも大丈夫。hogefuga.mdとかでも問題無い。&lt;/p&gt;</summary><category term="python"></category><category term="pelican"></category><category term="octopress"></category></entry><entry><title>visual studio メモ</title><link href="http://blog.shigepon.info/blog/2016/03/08/visual-studio-memo/" rel="alternate"></link><updated>2016-03-08T09:50:36+09:00</updated><author><name>shigepon</name></author><id>tag:blog.shigepon.info,2016-03-08:blog/2016/03/08/visual-studio-memo/</id><summary type="html">&lt;h2&gt;Visual Studio 2010でLNK1123エラーが出る&lt;/h2&gt;
&lt;p&gt;Visual Studio Express 2012をインストールした後で、Visual Studio 2010でビルドしようとしたらエラーが出た。&lt;a href="http://www.microsoft.com/ja-jp/download/details.aspx?id=23691"&gt;Visual C++ Service Pack 1&lt;/a&gt;以降をインストールすれば良い。&lt;/p&gt;
&lt;p&gt;参考：&lt;a href="http://minus9d.hatenablog.com/entry/20121212/1355312498"&gt;VS2010でLNK1123エラーが出たら、SP1にしてみよう - minus9d's diary&lt;/a&gt;&lt;/p&gt;</summary><category term="memo"></category><category term="visualstudio"></category></entry><entry><title>uwsgiの管理にsupervisordを使う</title><link href="http://blog.shigepon.info/blog/2016/03/07/use-supervisord-to-control-uwsgi/" rel="alternate"></link><updated>2016-03-07T21:41:38+09:00</updated><author><name>shigepon</name></author><id>tag:blog.shigepon.info,2016-03-07:blog/2016/03/07/use-supervisord-to-control-uwsgi/</id><summary type="html">&lt;p&gt;Ansibleで環境構築する時にuwsgiの再起動をservice使ってやりたかったので、supervisorにuwsgiを登録し、supervisorをserviceに登録するためにsupervisorについて調べてみたメモ&lt;/p&gt;
&lt;p&gt;色々はまったりして参考にしたのは以下のサイト&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://d.zinrai.info/blog/html/2013/10/17/freebsd_supervisor_uwsgi.html"&gt;Supervisorを使ってuWSGIを管理 — command not found:&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/10716159/nginx-and-supervisor-setup-in-ubuntu"&gt;python - nginx and supervisor setup in Ubuntu - Stack Overflow&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://serverfault.com/questions/163392/supervisor-always-quit-process-with-exit-status-0-not-expected"&gt;supervisord - Supervisor always quit process with 'exit status 0; not expected' - Server Fault&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/34631806/fail-during-installation-of-pillow-python-module-in-linux"&gt;Fail during installation of Pillow (Python module) in Linux - Stack Overflow&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;ざっくり手順&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;uwsgiのiniファイルを用意&lt;/li&gt;
&lt;li&gt;virtualenvでsupervisordをインストール&lt;/li&gt;
&lt;li&gt;supervisord.confを書く&lt;/li&gt;
&lt;li&gt;aptでsupervisorをインストールして削除&lt;/li&gt;
&lt;li&gt;/etc/init.d/supervisorを編集&lt;/li&gt;
&lt;li&gt;service起動&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;uwsgiのiniファイルを用意&lt;/h3&gt;
&lt;p&gt;省略&lt;/p&gt;
&lt;h3&gt;virtualenvでsupervisordをインストール&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ pip install supervisord
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;supervisord.conf、xxx.iniを書く&lt;/h3&gt;
&lt;p&gt;全体の設定はsupervisord.confで、個別のuwsgiに関する設定はxxx.iniで行うようにした&lt;/p&gt;
&lt;p&gt;supervisord.confは適当に次のように編集した&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;sudo使うならchownをrootに、でなければ現在のユーザーに&lt;/li&gt;
&lt;li&gt;pidfileを適当にtmpフォルダに設定&lt;/li&gt;
&lt;li&gt;includeでincludeしたいファイルを指定する（例えば下のような感じで書く）&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;[include]&lt;/span&gt;
&lt;span class="na"&gt;files&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;/path/to/*.ini&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;xxx.iniにはuwsgiコマンドを指定する。stopasgroupオプションは有効にする&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;[hoge:fuga]&lt;/span&gt;
&lt;span class="na"&gt;command&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;/path/to/virtualenv/bin/uwsgi /path/to/xxx.ini&lt;/span&gt;
&lt;span class="na"&gt;stopasgroup&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;true&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;aptでsupervisorをインストールして削除&lt;/h3&gt;
&lt;p&gt;virtualenvでsupervisorをインストールしたいけど、service登録用のスクリプトは欲しかったのでこの作業をした&lt;/p&gt;
&lt;p&gt;要はapt-getしてるだけなので省略&lt;/p&gt;
&lt;h3&gt;/etc/init.d/supervisorを編集&lt;/h3&gt;
&lt;p&gt;編集カ所は&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;DAEMONに書くsupervisordのパスをvirtuaalenvでインストールしたところにする（/path/to/virtualenv/bin/supervisord）&lt;/li&gt;
&lt;li&gt;LOGDIRを適当にログを書き出したい場所に指定&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;service起動&lt;/h3&gt;
&lt;p&gt;pip installのとこでrootでインストールした場合は&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ sudo service supervisor start
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;現在のユーザーでインストールした場合はsudo要らないかも&lt;/p&gt;
&lt;h2&gt;注意&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;uwsgiはコマンドでデーモン化しないこと。デーモン化しちゃうとコントロール出来ない&lt;/li&gt;
&lt;li&gt;pillowをインストールできないと怒られることがある。必要なライブラリはUbuntu14なら、zlib1g-dev, libtiff5-dev, libjpeg8-dev, libfreetype6-dev, liblcms2-dev, libwebp-dev, tcl8.6-dev, tk8.6-dev, python-tk&lt;/li&gt;
&lt;li&gt;パーミッションに気をつける。ソケットとかログとか&lt;/li&gt;
&lt;/ul&gt;</summary><category term="python"></category><category term="uwsgi"></category></entry><entry><title>django 1.8から1.9へアップした時に気にする点</title><link href="http://blog.shigepon.info/blog/2016/02/09/migrate-from-django-1-dot-8-to-1-dot-9/" rel="alternate"></link><updated>2016-02-09T15:59:36+09:00</updated><author><name>shigepon</name></author><id>tag:blog.shigepon.info,2016-02-09:blog/2016/02/09/migrate-from-django-1-dot-8-to-1-dot-9/</id><summary type="html">&lt;h2&gt;django.utils.log.NullHandlerが使えない&lt;/h2&gt;
&lt;p&gt;logging.NullHandlerに変わってる。というかdjango.utils.log.NullHandlerはエリアスだったのね。&lt;/p&gt;
&lt;p&gt;参考：&lt;a href="http://www.monotalk.xyz/blog/no-module-named-djangoutilslognullhandler-djangoutilslog-is-not-a-package/"&gt;No module named 'django.utils.log.NullHandler'; 'django.utils.log' is not a package | Monotalk&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;No module named context_processors&lt;/h2&gt;
&lt;p&gt;django-allauthを入れてると出てくるエラーメッセージ。TEMPLATESのcontext_processorsに'django.template.context_processors.request'を加えれば良いらしい。&lt;/p&gt;
&lt;p&gt;参考：&lt;a href="http://stackoverflow.com/questions/32828536/django-no-module-named-context-processors-error-after-reboot"&gt;python - Django: "No module named context_processors" error after reboot - Stack Overflow&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Enable 'django.contrib.auth.context_processors.auth' in your TEMPLATES setting in order to use the admin application.&lt;/h2&gt;
&lt;p&gt;TEMPLATE_CONTEXT_PROCESSORSがTMPLATESに変わったらしい。&lt;/p&gt;
&lt;p&gt;参考：&lt;a href="http://stackoverflow.com/questions/30005127/django-admin-breaks-after-upgrading-to-1-8-1"&gt;Django admin breaks after upgrading to 1.8.1 - Stack Overflow&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;とりあえずここまで&lt;/p&gt;</summary><category term="python"></category><category term="django"></category></entry><entry><title>PCLメモ</title><link href="http://blog.shigepon.info/blog/2016/01/29/pcl-memo/" rel="alternate"></link><updated>2016-01-29T08:42:31+09:00</updated><author><name>shigepon</name></author><id>tag:blog.shigepon.info,2016-01-29:blog/2016/01/29/pcl-memo/</id><summary type="html">&lt;p&gt;マルチプラットフォーム用に開発するにはPCL(ポータブル・クラス・ライブラリ)を使うと良いらしいのだが情報が少ない気がするので、調べたことをメモしていく&lt;/p&gt;
&lt;p&gt;それにしてもどこかに.netでこう書いてるものをPCLで書くには・・・みたいな書籍とかサイトとか無いものか。現在はstack&lt;/p&gt;
&lt;h2&gt;基本事項&lt;/h2&gt;
&lt;p&gt;プロジェクト生成時にポータブルライブラリを選択すればPCLで開発出来るようになる。すでに.netのプロジェクトで開発している場合にPCLにする方法はシラン。&lt;/p&gt;
&lt;p&gt;.netで使ってる機能で使えなくなるものが多い。ファイルアクセスなんかがSystem.IOに入ってなくて出来なくなるので、NugetでPCL関連のライブラリを調べるのは必須&lt;/p&gt;
&lt;p&gt;参考：&lt;a href="http://www.buildinsider.net/mobile/insidexamarin/13"&gt;Xamarinと、ポータブル・クラス・ライブラリ（PCL） - Build Insider&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;ファイルアクセス&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://github.com/dsplaisted/PCLStorage"&gt;PCL Storage&lt;/a&gt;を使うとよしなにやってくれる。Nugetから入れれば使えるようになる。&lt;/p&gt;
&lt;h2&gt;使えなくなるメソッドが結構ある&lt;/h2&gt;
&lt;p&gt;例えばSystem.Type.GetPropertyでPropertyInfoを取得しようとしても、メソッド無いので無理。この場合はSystem.Refrectionを使う&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="nn"&gt;System.Refrection&lt;/span&gt;
&lt;span class="p"&gt;...&lt;/span&gt;
&lt;span class="n"&gt;PropertyInfo&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;typeof&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Hoge&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;GetRuntimeProperty&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;property&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;いちいちこういうのがあるので、結構大変。&lt;/p&gt;
&lt;h2&gt;TypeよりはなるべくTypeInfoを使うのが良さげ&lt;/h2&gt;
&lt;p&gt;PCLだとType.IsClassとか無いけどTypeInfo.IsClassはある。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;assembly&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DefinedTypes&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Where&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;IsClass&lt;/span&gt; &lt;span class="p"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="p"&gt;!&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;IsAbstract&lt;/span&gt; &lt;span class="p"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ImplementedInterfaces&lt;/span&gt;
        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Any&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;GetTypeInfo&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="n"&gt;IsGenericType&lt;/span&gt; &lt;span class="p"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;GetGenericTypeDefinition&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;==&lt;/span&gt; &lt;span class="n"&gt;commandHandlerOpenGenericType&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Select&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;AsType&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;みたいにして必要なインターフェースを持つクラスの型情報を取り出すとか出来る&lt;/p&gt;
&lt;p&gt;参考：&lt;a href="http://stackoverflow.com/questions/20524263/portable-class-library-reflection"&gt;c# - Portable Class Library Reflection - Stack Overflow&lt;/a&gt;&lt;/p&gt;</summary><category term="memo"></category><category term="CSharp"></category></entry><entry><title>インストールしたfluentdをserviceから使えるようにする</title><link href="http://blog.shigepon.info/blog/2016/01/25/enable-service-fluentd-start/" rel="alternate"></link><updated>2016-01-25T21:20:26+09:00</updated><author><name>shigepon</name></author><id>tag:blog.shigepon.info,2016-01-25:blog/2016/01/25/enable-service-fluentd-start/</id><summary type="html">&lt;p&gt;&lt;a href="http://blog.shigepon.info/blog/2016/01/23/install-and-setting-up-fluentd-pluhin-groonga-using-ansible/"&gt;前回&lt;/a&gt;の続き&lt;/p&gt;
&lt;p&gt;rbenvのgemを使ってインストールしたfluentdはserviceからの起動スクリプトが無いので、service fluentd startみたいなことをしたければ自分で登録するしかない。&lt;/p&gt;
&lt;p&gt;でも1からスクリプトを書くのは面倒なので、td-agentのスクリプトを利用することにした。
まずはtd-agentのインストール、削除&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ sudo aptitude install td-agent
$ sudo aptitude remove td-agent
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;削除してもserviceで使うスクリプトは残るみたいなので、これを元に起動スクリプトを作る。&lt;/p&gt;
&lt;!-- more --&gt;

&lt;p&gt;td-agentの起動スクリプトは&lt;/p&gt;
&lt;p&gt;/etc/init.d/td-agentにある。&lt;/p&gt;
&lt;p&gt;td-agentをfluentdに変えて、編集した。編集内容は主に以下の通り&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;td-agentをfluentdに変更&lt;/li&gt;
&lt;li&gt;DAEMONをfluentdまでのパスに変更&lt;/li&gt;
&lt;li&gt;USER、GROUPをfluentdをインストールしたユーザー、グループに変更&lt;/li&gt;
&lt;li&gt;DAEMON_ARGSに"--config /path/to/config"を追加&lt;/li&gt;
&lt;li&gt;/var/log/fluentd/fluentd.logを作っておく。ユーザー、グループはfluentdのユーザー、グループにする&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;必要無くて消して良い部分も結構ある気がするが、とりあえず動く為に最小限の修正にしておく。
最後にserviceに登録するために&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ sudo update-rc.d fluentd defaults
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;でserviceにfluentdが登録される。ちなみにスクリプトのデバッグは&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ bash -x /etc/init.d/fluentd start
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;とすればある程度出来るので、変なエラーが出ないかはここでチェックしてしまうと良い。&lt;/p&gt;
&lt;p&gt;以上をansibleで動かすようにしてみた。&lt;/p&gt;
&lt;p&gt;参考：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://l-w-i.net/t/ubuntu/service_001.txt"&gt;[Ubuntu] サービスを有効化/無効化する方法 - Life with IT&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://askubuntu.com/questions/36200/how-to-debug-upstart-scripts"&gt;debugging - how to debug upstart scripts? - Ask Ubuntu&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</summary><category term="linux"></category></entry><entry><title>fluent-plugin-groongaをインストールして動かすまでをAnsibleでやってみた</title><link href="http://blog.shigepon.info/blog/2016/01/23/install-and-setting-up-fluentd-pluhin-groonga-using-ansible/" rel="alternate"></link><updated>2016-01-23T14:32:43+09:00</updated><author><name>shigepon</name></author><id>tag:blog.shigepon.info,2016-01-23:blog/2016/01/23/install-and-setting-up-fluentd-pluhin-groonga-using-ansible/</id><summary type="html">&lt;p&gt;ログ集計に何使うか迷ったんだけど、fluentdに&lt;a href="https://github.com/groonga/fluent-plugin-groonga"&gt;fluent-plugin-groonga&lt;/a&gt;ってのがあったのでfluentdを使ってgroongaにログを集計していくとこまでをやった。rbenvから色々やろうとしたら面倒だった。&lt;/p&gt;
&lt;h2&gt;rbenvを使う&lt;/h2&gt;
&lt;p&gt;バージョン管理が面倒なので、やっぱrbenv使わないといかんっしょと思ってやった。&lt;a href="http://qiita.com/katsuhiko/items/56935225754a90d58314"&gt;Ansible と Vagrant を使って Rails 開発環境（Ubuntu + rbenv + MySQL5.6 + node.js）を構築する - Qiita&lt;/a&gt;を参考にして変数を適当にしたりsudoのとこを変更したりして出来た&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="x"&gt;---&lt;/span&gt;
&lt;span class="x"&gt;- hosts: all&lt;/span&gt;
&lt;span class="x"&gt;  user: hoge&lt;/span&gt;
&lt;span class="x"&gt;  tasks:&lt;/span&gt;
&lt;span class="x"&gt;    - name: Install dependencies for rbenv&lt;/span&gt;
&lt;span class="x"&gt;      sudo: yes&lt;/span&gt;
&lt;span class="x"&gt;      apt: name=\&lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="x"&gt;\&lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="x"&gt; item \}\} state=latest&lt;/span&gt;
&lt;span class="x"&gt;      with_items:&lt;/span&gt;
&lt;span class="x"&gt;        - git&lt;/span&gt;
&lt;span class="x"&gt;    - name: Install rbenv&lt;/span&gt;
&lt;span class="x"&gt;      git: repo=https://github.com/sstephenson/rbenv.git dest=~/.rbenv&lt;/span&gt;
&lt;span class="x"&gt;    - name: Add ~.rbenv/bin to PATH&lt;/span&gt;
&lt;span class="x"&gt;      lineinfile: &amp;gt;&lt;/span&gt;
&lt;span class="x"&gt;        dest=&amp;quot;~/.bashrc&amp;quot;&lt;/span&gt;
&lt;span class="x"&gt;        line=&amp;quot;export PATH=&lt;/span&gt;&lt;span class="p"&gt;$&lt;/span&gt;&lt;span class="nv"&gt;HOME&lt;/span&gt;&lt;span class="x"&gt;/.rbenv/bin:&lt;/span&gt;&lt;span class="p"&gt;$&lt;/span&gt;&lt;span class="nv"&gt;PATH&lt;/span&gt;&lt;span class="x"&gt;&amp;quot;&lt;/span&gt;
&lt;span class="x"&gt;    - name: Eval rbenv init in ~/.bashrc&lt;/span&gt;
&lt;span class="x"&gt;      lineinfile: &amp;gt;&lt;/span&gt;
&lt;span class="x"&gt;        dest=&amp;quot;~/.bashrc&amp;quot;&lt;/span&gt;
&lt;span class="x"&gt;        line=&amp;#39;eval &amp;quot;&lt;/span&gt;&lt;span class="p"&gt;$(&lt;/span&gt;&lt;span class="err"&gt;rbenv&lt;/span&gt; &lt;span class="err"&gt;init&lt;/span&gt; &lt;span class="err"&gt;-&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="x"&gt;&amp;quot;&amp;#39;&lt;/span&gt;
&lt;span class="x"&gt;    - name: Install dependencies for ruby-build (see. https://github.com/sstephenson/ruby-build/wiki)&lt;/span&gt;
&lt;span class="x"&gt;      apt: name=\&lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="x"&gt;\&lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="x"&gt; item \}\} state=latest&lt;/span&gt;
&lt;span class="x"&gt;      with_items:&lt;/span&gt;
&lt;span class="x"&gt;        - autoconf&lt;/span&gt;
&lt;span class="x"&gt;        - bison&lt;/span&gt;
&lt;span class="x"&gt;        - build-essential&lt;/span&gt;
&lt;span class="x"&gt;        - libssl-dev&lt;/span&gt;
&lt;span class="x"&gt;        - libyaml-dev&lt;/span&gt;
&lt;span class="x"&gt;        - libreadline6-dev&lt;/span&gt;
&lt;span class="x"&gt;        - zlib1g-dev&lt;/span&gt;
&lt;span class="x"&gt;        - libncurses5-dev&lt;/span&gt;
&lt;span class="x"&gt;        - libffi-dev&lt;/span&gt;
&lt;span class="x"&gt;        - libgdbm3&lt;/span&gt;
&lt;span class="x"&gt;        - libgdbm-dev&lt;/span&gt;
&lt;span class="x"&gt;    - name: Install ruby-build as rbenv plugin&lt;/span&gt;
&lt;span class="x"&gt;      git: repo=https://github.com/sstephenson/ruby-build.git dest=~/.rbenv/plugins/ruby-build&lt;/span&gt;
&lt;span class="x"&gt;    - name: Check if version is installed ruby&lt;/span&gt;
&lt;span class="x"&gt;      shell: &amp;quot;~/.rbenv/bin/rbenv versions | grep \&lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="x"&gt;\&lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="x"&gt; rbenv_ruby_version \}\}&amp;quot;&lt;/span&gt;
&lt;span class="x"&gt;      register: rbenv_check_install&lt;/span&gt;
&lt;span class="x"&gt;      changed_when: False&lt;/span&gt;
&lt;span class="x"&gt;      ignore_errors: yes&lt;/span&gt;
&lt;span class="x"&gt;    - name: Install ruby&lt;/span&gt;
&lt;span class="x"&gt;      command: &amp;quot;~/.rbenv/bin/rbenv install \&lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="x"&gt;\&lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="x"&gt; rbenv_ruby_version \}\}&amp;quot;&lt;/span&gt;
&lt;span class="x"&gt;      when: rbenv_check_install|failed&lt;/span&gt;
&lt;span class="x"&gt;    - name: Check if version is the default ruby version&lt;/span&gt;
&lt;span class="x"&gt;      shell: &amp;quot;~/.rbenv/bin/rbenv version | grep \&lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="x"&gt;\&lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="x"&gt; rbenv_ruby_version \}\}&amp;quot;&lt;/span&gt;
&lt;span class="x"&gt;      register: rbenv_check_default&lt;/span&gt;
&lt;span class="x"&gt;      changed_when: False&lt;/span&gt;
&lt;span class="x"&gt;      ignore_errors: yes&lt;/span&gt;
&lt;span class="x"&gt;    - name: Set default ruby version&lt;/span&gt;
&lt;span class="x"&gt;      command: &amp;quot;~/.rbenv/bin/rbenv global \&lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="x"&gt;\&lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="x"&gt; rbenv_ruby_version \}\}&amp;quot;&lt;/span&gt;
&lt;span class="x"&gt;      when: rbenv_check_default|failed&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;rbenv_ruby_versionはインベントリファイルで設定しておく。&lt;/p&gt;
&lt;p&gt;shellのところrbenvだけにしたら何回やってもエラーで止まってしまった。なので結局rbenvはフルパス指定にした。bashrcに書いた分その後色々やった時に書いたので.profileでも良いかも知れない。&lt;/p&gt;
&lt;h2&gt;fluentdのインストール&lt;/h2&gt;
&lt;p&gt;こっから面倒だった。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    - name: Gem install fluentd
      gem: name=\{\{ item \}\}
       executable=~/.rbenv/versions/\{\{ rbenv_ruby_version \}\}/bin/gem user_install=no
      with_items:
        - fluentd
        - fluent-plugin-groonga
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;たったこれだけ書くのに2時間くらい掛かったorz。fluentdをインストールする前にtd-agentから何とかならないか試したり、gemがなかなかrbenvでインストールしたバージョンになってくれなかったり、fluentdが変な場所にインストールされたり・・・でも結論としてはこれでおk。フルパス指定とuserinstall=noがポイントかな。&lt;/p&gt;
&lt;h2&gt;fluentdの設定&lt;/h2&gt;
&lt;p&gt;設定やったこと無かったので、ここが手探りになるのは仕方ない。includeのパスを間違えてて設定を読み込めないとか色々しょーもないハマりをした。ログが正しく送られてるかどうかはsourceのタグをdebug.accessに変えて、デバッグ表示させてtailがちゃんとされているか確認→実際にlog.accessでやってみるという手順で行った&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;- name: setup fluentd dir
      command: ~/.rbenv/versions/\{\{ rbenv_ruby_version \}\}/bin/fluentd --setup /path/to/fluent/config/file
    - name: set fluent.conf
      lineinfile: dest=/path/to/fluent/config/file/fluent.conf insertafter=EOF line=&amp;quot;@include conf.d/*&amp;quot; state=present
    - name: create conf.d folder
      file: path=/path/to/fluent/config/file/conf.d state=directory
    - name: copy groonga.fluentd.conf
      copy: src=groonga.fluentd.conf dest=~/path/to/fluent/config/file/conf.d
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;source&amp;gt;&lt;/span&gt;
    type tail
    format ltsv
    tag log.access
    path /path/to/log/file
    pos_file /path/to/pos/file
&lt;span class="nt"&gt;&amp;lt;/source&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;match&lt;/span&gt; &lt;span class="err"&gt;log.*&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    type groonga
    store_table logs
    host xxx.xxx.xxx.xx
    port xxxxx
&lt;span class="nt"&gt;&amp;lt;/match&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;としてIPがxxx.xxx.xxx.xxでポートがxxxxxのところにgroongaを用意すると勝手にフィールドとか色々作ってログを保存してくれるようになる。ちなみにfluentdの開始コマンドは&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ fluentd -c /path/to/fluent/config/file -vv &lt;span class="p"&gt;&amp;amp;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;とした。&lt;/p&gt;
&lt;p&gt;とりあえずここまでで十分ハマった。&lt;/p&gt;
&lt;h2&gt;td-agentは使わない&lt;/h2&gt;
&lt;p&gt;使用OSがubuntuなので、td-agentを使ってみたんだが、rbenv上のgemでインストールしたfluent-plugin-groongaを読み込む方法が最後まで分かんなかったので使わないことにした。td-agentだとserveceコマンドでリスタートとかやってくれるので楽なんだけどなー。&lt;/p&gt;
&lt;p&gt;参考：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://mhag.hatenablog.com/entry/2014/07/04/151415"&gt;Ubuntu 14.04 LTS に Fluentd をインストールする - ´・ω・)＜ときどき書くよ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://qiita.com/h5y1m141@github/items/74029cab9706971c8dbe"&gt;Rubyが参照してるgemのパスやインストール済gemを確認する方法 - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://qiita.com/groonga/items/5c674be9daf25054c14c"&gt;Fluentdで集めたデータをGroongaに格納する方法 - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://chocoby.jp/blog/2013/03/05/fluentd-ltsv/"&gt;fluentd で LTSV がサポートされたのでメモ - 暇人じゃない&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</summary><category term="python"></category><category term="groonga"></category><category term="ansible"></category><category term="ruby"></category></entry><entry><title>djangoでcache使ってる間でも呼び出されたviewとかパラメーターをログに書き出したい</title><link href="http://blog.shigepon.info/blog/2016/01/19/log-view-parameter-before-caching-for-django/" rel="alternate"></link><updated>2016-01-19T18:50:33+09:00</updated><author><name>shigepon</name></author><id>tag:blog.shigepon.info,2016-01-19:blog/2016/01/19/log-view-parameter-before-caching-for-django/</id><summary type="html">&lt;p&gt;djangoのログ機能を使って、呼び出されたview名とかパラメーターとかを書き出してたんだけど、viewでキャッシュを使うとログを書いてくれなくなるので、それをなんとかしたいという話。&lt;/p&gt;
&lt;p&gt;コードにするとこんな感じ&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;#views.py&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.views.decorators.cache&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;cache_page&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;logging&lt;/span&gt;
&lt;span class="n"&gt;logger&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;logging&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getLogger&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;hoge&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="nd"&gt;@cache_page&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;60&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="mi"&gt;60&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="mi"&gt;24&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="mi"&gt;30&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;index&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;param1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;param2&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;logger&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;info&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;u&amp;quot;param1:{0} param2:{1}&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;param1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;param2&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="o"&gt;...&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;!-- more --&gt;

&lt;p&gt;こうするとキャッシュが効いてしまって、1回アクセスした時以外ログが出なくなってしまう。アクセスログ的
な使い方をしたい時に困ってしまう。アクセスログはnginxとかそこらへんのログに任せてた方が良いような気もするが、
django内で何とかしたかったのでrequest_startedシグナルを使って下のようにした&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;#views.py&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; 
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;logging&lt;/span&gt;
&lt;span class="n"&gt;logger&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;logging&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getLogger&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;hoge&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="nd"&gt;@cache_page&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;60&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="mi"&gt;60&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="mi"&gt;24&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="mi"&gt;30&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;index&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;param1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;param2&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;logger&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;info&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;u&amp;quot;param1:{0} param2:{1}&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;param1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;param2&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="o"&gt;...&lt;/span&gt;
&lt;span class="c1"&gt;#ここから追記&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.core.signals&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;request_started&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;copy&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.core.handlers.wsgi&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;WSGIRequest&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.core.urlresolvers&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;resolve&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;log_before_view&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;handler&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;sender&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="n"&gt;environ&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;copy&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;copy&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;environ&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
        &lt;span class="n"&gt;request&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;WSGIRequest&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;environ&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;match&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path_info&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;match&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;logger&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;info&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;u&amp;quot;param1:{0} param2:{1}&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;param1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;param2&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="k"&gt;except&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;pass&lt;/span&gt;
&lt;span class="n"&gt;request_started&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;connect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;log_before_view&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;これでキャッシュが効いてる状態でもログを取ることが出来る&lt;/p&gt;</summary><category term="django"></category><category term="python"></category></entry><entry><title>use groonga for django cache</title><link href="http://blog.shigepon.info/blog/2016/01/15/use-groonga-for-django-cache/" rel="alternate"></link><updated>2016-01-15T01:43:58+09:00</updated><author><name>shigepon</name></author><id>tag:blog.shigepon.info,2016-01-15:blog/2016/01/15/use-groonga-for-django-cache/</id><summary type="html">&lt;p&gt;djangoのキャッシュバックエンドとして、Redisを使ってみたけど、慣れてないし、しばらくしたらメモリを圧迫したせいかdjangoがタイムアウトを連発しだしたので、こりゃだめだと思い、&lt;a href="http://groonga.org/ja/"&gt;groonga&lt;/a&gt;を試してみた流れを書いておく。groongaは全文検索エンジンだけど、kvsみたいな使い方も出来る。詳しくはgroongaのページを読めば分かる、はず。&lt;/p&gt;
&lt;h2&gt;groonga側の設定&lt;/h2&gt;
&lt;p&gt;どうも&lt;a href="http://groonga.org/ja/docs/server/memcached.html"&gt;Memcachedバイナリプロトコルが使える&lt;/a&gt;らしい。マニュアルのページからおもむろに&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ groonga -d --protocol memcached hoge
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;とやるとhogeというファイルが出来た（hogeがデータベース名かつファイル名）。んで、&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ groonga -c
&amp;gt; table_list
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;とするとテーブルが無い。出来てない。これじゃアクセス出来ないんじゃね？と思い（間違ってたんだけど）ググると固定のテーブル名、カラム名になってうんたらかんたらと書いていた。&lt;/p&gt;
&lt;p&gt;そこで「決まった名前でテーブルを手動で作らないといけない」と思い込み、指定するべきテーブル名をググってBingして探して1時間以上、ソースからやっとテーブル名がMemcacheで・・・と分かった時点で&lt;strong&gt;テーブル、カラムはgroonga側で自動で作成する&lt;/strong&gt;ことに気づいた。どうもバイナリプロトコルでアクセスがあった瞬間にテーブル、カラムを作るみたい。なので、上のコマンドだけで良かったみたい。えーそうなのー＞＜。こんな簡単なのになんでハマったのか・・・＞＜&lt;/p&gt;
&lt;p&gt;ちなみにこのコマンドの場合、ポートは10041となる。&lt;/p&gt;
&lt;h2&gt;django側の設定&lt;/h2&gt;
&lt;p&gt;groonga側の設定でハマった理由はdjangoのキャッシュフレームワークでdjango.core.cache.backends.memcached.MemcachedCacheを使うと全然キャッシュしてくれなかったことにある。&lt;/p&gt;
&lt;p&gt;このライブラリが&lt;strong&gt;バイナリプロトコルを使っていない&lt;/strong&gt;というのに全く気付かず、絶対groonga側でテーブル作ってないからだと勘違いして1時間以上無駄にしてしまった。&lt;/p&gt;
&lt;p&gt;で、結論としては&lt;a href="https://github.com/jaysonsantos/django-bmemcached"&gt;Django-BMemcached&lt;/a&gt;を使えば問題なくキャッシュしてくれる。他にもバイナリプロトコルを使うライブラリに&lt;a href="https://github.com/django-pylibmc/django-pylibmc"&gt;django-pylibmc&lt;/a&gt;があるけど、これは何故か接続の段階で止まってしまった。&lt;/p&gt;
&lt;p&gt;手順としてはこんな感じ&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ sudo aptitude install libmemcached-dev
$ pip install django-bmemcached
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;aptitudeの部分は要らないかも（django-pylibmcを入れる時に怒られて入れたので、もしかして必要無いかもしれない）&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# settings.py&lt;/span&gt;
&lt;span class="n"&gt;CACHES&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;default&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:{&lt;/span&gt;
        &lt;span class="s1"&gt;&amp;#39;BACKEND&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;django_bmemcached.memcached.BMemcached&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s1"&gt;&amp;#39;LOCATION&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;127.0.0.1:10041&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;これはローカルで上のような形でgroongaのサーバを作った場合の設定。
これで普通のキャッシュを扱うプログラム書けばちゃんとデータをgroongaに入れてくれた。&lt;/p&gt;
&lt;p&gt;めでたしめでたし。&lt;/p&gt;</summary><category term="groonga"></category><category term="django"></category><category term="python"></category></entry><entry><title>redis memo</title><link href="http://blog.shigepon.info/blog/2016/01/13/redis-memo/" rel="alternate"></link><updated>2016-01-13T21:35:13+09:00</updated><author><name>shigepon</name></author><id>tag:blog.shigepon.info,2016-01-13:blog/2016/01/13/redis-memo/</id><summary type="html">&lt;p&gt;redisが良く分かってないので、良く使いそうなものをメモしていく。主にredis-clientを使って行く（OSはUbuntu）&lt;/p&gt;
&lt;h2&gt;dbの選択&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ redis-client
&amp;gt; &lt;span class="k"&gt;select&lt;/span&gt; 1
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;で1番のdbに移動。0から15まである？&lt;/p&gt;
&lt;h2&gt;keyの一覧&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt; keys *
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;で取りあえず一覧してくれる。dbにキーがあるか程度ならこれで。&lt;/p&gt;</summary><category term="redis"></category><category term="memo"></category></entry><entry><title>MT4 memo</title><link href="http://blog.shigepon.info/blog/2016/01/07/mt4-memo/" rel="alternate"></link><updated>2016-01-07T14:00:25+09:00</updated><author><name>shigepon</name></author><id>tag:blog.shigepon.info,2016-01-07:blog/2016/01/07/mt4-memo/</id><summary type="html">&lt;p&gt;MT4でEAを書くためのメモ&lt;/p&gt;
&lt;h2&gt;時間の扱い&lt;/h2&gt;
&lt;!-- more --&gt;

&lt;p&gt;時間は秒単位の数値になるので&lt;/p&gt;
&lt;p&gt;時間差を出したい場合は&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;(t1 - t2)/3600.0
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;みたいな扱いで良い
参考：&lt;a href="http://forum.mql4.com/5907"&gt;How to calculate time difference, and return time in hours ? - MQL4 forum&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;矢印の表示&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;ObjectCreate(&amp;quot;OBJ&amp;quot;+Time[0], OBJ_ARROW, 0, Time[0], Ask)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;みたいに書くと表示出来る"OBJ"+Time[0]が矢印の名前となり、後で色を付けたりするのに使う&lt;/p&gt;
&lt;p&gt;参考：&lt;a href="http://forum.mql4.com/54528"&gt;How to create arrow on a price chart by EA ? - MQL4 forum&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;gmailを使ってメールを送る&lt;/h2&gt;
&lt;p&gt;参考：&lt;a href="http://d.hatena.ne.jp/fai_fx/20091110/1257779182"&gt;MT4のメール送信サーバにGmail を使う。 - とあるMetaTraderの備忘秘録&lt;/a&gt;にあるような設定を行う。&lt;/p&gt;
&lt;p&gt;手順は&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;オプション→Eメールのタブを開く&lt;/li&gt;
&lt;li&gt;SMTP設定&lt;ul&gt;
&lt;li&gt;SMTPサーバー：smtp.gmail.com:465&lt;/li&gt;
&lt;li&gt;SMTPログインID: メアド&lt;/li&gt;
&lt;li&gt;SMTPパスワード: gmailのパスワード&lt;/li&gt;
&lt;li&gt;発信元: 自分のgmailメアド&lt;/li&gt;
&lt;li&gt;送信先: 送信先メアド&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Testボタンを押すとテストメールが送られるので、設定が正しいか確認出来る&lt;/li&gt;
&lt;li&gt;OKボタンを押す&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;送信は&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;SendMail(題名, 内容);
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;でおk。改行は\nでおk。円マークではない。&lt;/p&gt;
&lt;h2&gt;バックテストを色々やるとハードディスク容量が足らなくなる&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;ファイル→データフォルダを開く&lt;/li&gt;
&lt;li&gt;testerを開く&lt;/li&gt;
&lt;li&gt;中に出来たファイルを消す&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;でおk&lt;/p&gt;
&lt;p&gt;参考：&lt;a href="http://www.autotrading-fx.com/mt4-tips/1930.html"&gt;MT4のバックテストでハードディスク容量が不足した時の対処法&lt;/a&gt;&lt;/p&gt;</summary><category term="MT4"></category><category term="memo"></category></entry><entry><title>Google Tag Managerを使ってボタンのクリックを検出する</title><link href="http://blog.shigepon.info/blog/2016/01/06/track-button-click-at-google-tag-manager/" rel="alternate"></link><updated>2016-01-06T11:43:41+09:00</updated><author><name>shigepon</name></author><id>tag:blog.shigepon.info,2016-01-06:blog/2016/01/06/track-button-click-at-google-tag-manager/</id><summary type="html">&lt;p&gt;Google Tag Manager(多分現在はバージョン2)を使ってリンクのクリックをAnalyticsに検出させる方法はちょこちょこ書いてあるけど、ボタンのクリックを検出する方法が書いてなかったのでメモ。例としてIDがhogeのボタンクリックを検出してみる&lt;/p&gt;
&lt;h2&gt;変数の設定&lt;/h2&gt;
&lt;p&gt;google tag managerのコンテナ画面で、左サイドメニューの「変数」をクリックすると「クリック」という項目が色々ある。初期ではチェックが外れている。これを全てチェックしておく（実際はID指定でクリックを検出したいならClick IDをチェックすれば良いとかあるけど全部チェックしておくと無難）&lt;/p&gt;
&lt;h2&gt;トリガー作成&lt;/h2&gt;
&lt;p&gt;同じく左サイドメニューの「トリガー」をクリックする。「新規」ボタンを押してトリガーを新規作成する。そこからは下のようにする&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;1.イベントを選択→クリック&lt;/li&gt;
&lt;li&gt;2.トリガーを設定、ターゲット→すべての要素→続行をクリック&lt;/li&gt;
&lt;li&gt;3.配信するタイミング→一部のクリック→Click ID、等しいの順に選択→hogeと入力→トリガーを作成ボタンをクリック&lt;/li&gt;
&lt;li&gt;名前を聞かれるので分かる名前にする。例としてfugaとしておく&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;タグ作成&lt;/h2&gt;
&lt;p&gt;同じく左サイドメニューの「タグ」をクリックする。「新規」ボタンを押してタグを新規作成する。そこからは下のようにする &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;1.プロダクトを選択→GoogleAnalytics&lt;/li&gt;
&lt;li&gt;2.タグの種類を選択→ユニバーサル　アナリティクス&lt;/li&gt;
&lt;li&gt;3.タグを設定→下のように設定して続行ボタンをクリック&lt;ul&gt;
&lt;li&gt;トラッキングID→AnalyticsのトラッキングID（UA-xxxx-xxxxxみたいな）&lt;/li&gt;
&lt;li&gt;ディスプレイ広告向け機能を有効にする→どっちでも&lt;/li&gt;
&lt;li&gt;トラッキングタイプ→イベント&lt;/li&gt;
&lt;li&gt;カテゴリ→適当（Buttonとかで良い？）&lt;/li&gt;
&lt;li&gt;アクション→適当（clickとか？）&lt;/li&gt;
&lt;li&gt;ラベル→適当（hogeとか？）&lt;/li&gt;
&lt;li&gt;その他はそのまま&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;4.配信するタイミング→クリック&lt;ul&gt;
&lt;li&gt;「既存のクリック　トリガーから選択」が出てくるので作ったトリガーをチェック→「保存」ボタンをクリック&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;「タグを作成」ボタンをクリック&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;プレビュー&lt;/h2&gt;
&lt;p&gt;まだ良く分かってない。作った設定を当てはめる前にチェックが出来るらしい。&lt;/p&gt;
&lt;h2&gt;公開&lt;/h2&gt;
&lt;p&gt;右上の「公開」ボタンをクリックして出てくるダイアログで「今すぐ公開」をクリックすると作った設定を当てはめることが出来る。&lt;/p&gt;
&lt;h2&gt;確認&lt;/h2&gt;
&lt;p&gt;Chromeなら&lt;a href="https://chrome.google.com/webstore/detail/tag-assistant-by-google/kejbdjndbnbjgmefkgdddjlbokphdefk"&gt;Tag Assistant&lt;/a&gt;って拡張があるのでこれをインストールして確認する。実際にクリックしてみてAnalyticsで検出を確認するのでもおk&lt;/p&gt;
&lt;p&gt;参考：&lt;a href="http://konygin.net/gtm/tracking-buttons-en/"&gt;Buttons tracking at Google Tag Manager 2.0&lt;/a&gt;&lt;/p&gt;</summary><category term="google"></category></entry><entry><title>mono winformsがmacで文字化けする件</title><link href="http://blog.shigepon.info/blog/2015/12/17/mono-winforms-garbled-on-mac/" rel="alternate"></link><updated>2015-12-17T08:55:02+09:00</updated><author><name>shigepon</name></author><id>tag:blog.shigepon.info,2015-12-17:blog/2015/12/17/mono-winforms-garbled-on-mac/</id><summary type="html">&lt;p&gt;なでしこ2にフォームの機能入れるためにmonoのWinFormを試しているが、どうにも文字化けが治らないので、途中経過までのメモ。取りあえずボタンは文字化けしないようになった。&lt;/p&gt;
&lt;h2&gt;Fontプロパティを設定する&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="nn"&gt;System&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="nn"&gt;System.Windows.Forms&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="nn"&gt;System.Drawing&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;...&lt;/span&gt;
&lt;span class="n"&gt;Form&lt;/span&gt; &lt;span class="n"&gt;win&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;Form&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="n"&gt;win&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Font&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;Font&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Osaka&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;10&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;...&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;こんな感じ。&lt;/p&gt;
&lt;h2&gt;~/.config/fonts.confを設定&lt;/h2&gt;
&lt;p&gt;とりあえず必ず日本語フォントにするように設定してみる&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;fontconfig&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;match&lt;/span&gt; &lt;span class="na"&gt;target=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;pattern&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;edit&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;family&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;mode=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;assign&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;binding=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;strong&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;string&amp;gt;&lt;/span&gt;Hiragino Kaku Gothic Pro W3&lt;span class="nt"&gt;&amp;lt;/strong&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/edit&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/match&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/fontconfig&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;一応どっちもメインフォームにボタン貼付けくらいなら日本語になった。でもメインフォームのタイトルが文字化けするのが治らない。メインフォームは豆腐でない文字化けなので、フォントじゃないような気がする。どうしたものか。&lt;/p&gt;
&lt;p&gt;とここまで書いて、Eto.Formsっての使ってみた方が今後を考えると良いんじゃないかと思い始めたのでこれ以上やらないと思う。&lt;/p&gt;
&lt;p&gt;ここまでで参考にしたページ（情報少ない）&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://risky-safety.org/zinnia/d/2011/09/"&gt;Zinnia hacks tomorrow.&lt;/a&gt; 一番参考になった&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.slideshare.net/babatakao/font-config"&gt;Fontconfigことはじめ&lt;/a&gt; fontconfig回り&lt;/li&gt;
&lt;/ul&gt;</summary><category term="CSharp"></category><category term="nadesiko2"></category></entry><entry><title>msilを手動で出力する</title><link href="http://blog.shigepon.info/blog/2015/11/29/output-msil-manually/" rel="alternate"></link><updated>2015-11-29T20:40:36+09:00</updated><author><name>shigepon</name></author><id>tag:blog.shigepon.info,2015-11-29:blog/2015/11/29/output-msil-manually/</id><summary type="html">&lt;p&gt;何個か方法がある。とりあえずは雑多にメモ書きしておく&lt;/p&gt;
&lt;h2&gt;一行一行全て手動で出力する&lt;/h2&gt;
&lt;p&gt;System.Refrection、System.Refrection.Emitを使ってilを直接書き出していく方法。&lt;/p&gt;
&lt;p&gt;参考：
 &lt;a href="http://stackoverflow.com/questions/15600142/reflection-emit-assemblybuilder-setentrypoint-does-not-set-entry-point"&gt;c# - Reflection.Emit: AssemblyBuilder.SetEntryPoint does not set entry point - Stack Overflow&lt;/a&gt;ゆーてもこれそのままやっても.netは知らないけどmonoだと動かなかったりするので、修正が必要。動くコードはこちら&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="nn"&gt;System&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="nn"&gt;System.Collections.Generic&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="nn"&gt;System.Linq&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="nn"&gt;System.Text&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="nn"&gt;System.Reflection&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="nn"&gt;System.Reflection.Emit&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="nn"&gt;System.IO&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="nn"&gt;System.Diagnostics&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;namespace&lt;/span&gt; &lt;span class="nn"&gt;iltest&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Program&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;Main&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;ASSEMBLY_NAME&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;IL_Test&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="n"&gt;AssemblyBuilder&lt;/span&gt; &lt;span class="n"&gt;assemblyBuilder&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;AppDomain&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CurrentDomain&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DefineDynamicAssembly&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;AssemblyName&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ASSEMBLY_NAME&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;AssemblyBuilderAccess&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Save&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="n"&gt;ModuleBuilder&lt;/span&gt; &lt;span class="n"&gt;moduleBuilder&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;assemblyBuilder&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DefineDynamicModule&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ASSEMBLY_NAME&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;test.exe&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="n"&gt;TypeBuilder&lt;/span&gt; &lt;span class="n"&gt;typeBuilder&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;moduleBuilder&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DefineType&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Program&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;TypeAttributes&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Class&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="n"&gt;TypeAttributes&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Public&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="n"&gt;MethodBuilder&lt;/span&gt; &lt;span class="n"&gt;methodBuilder&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;typeBuilder&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DefineMethod&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Main&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;MethodAttributes&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;HideBySig&lt;/span&gt;&lt;span class="p"&gt;|&lt;/span&gt;&lt;span class="n"&gt;MethodAttributes&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Public&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="n"&gt;MethodAttributes&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Static&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;typeof&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;void&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;Type&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;typeof&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;[])&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
            &lt;span class="n"&gt;ILGenerator&lt;/span&gt; &lt;span class="n"&gt;gen&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;methodBuilder&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;GetILGenerator&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
            &lt;span class="n"&gt;gen&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Emit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;OpCodes&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Ldstr&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Hello, World!&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="n"&gt;gen&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Emit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;OpCodes&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Call&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;typeof&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Console&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;GetMethod&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;WriteLine&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;Type&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;typeof&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;}));&lt;/span&gt;
            &lt;span class="n"&gt;gen&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Emit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;OpCodes&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Ldc_I4_1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="n"&gt;gen&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Emit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;OpCodes&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Call&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;typeof&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Console&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;GetMethod&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;ReadKey&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;Type&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;typeof&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;bool&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;}));&lt;/span&gt;
            &lt;span class="n"&gt;gen&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Emit&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;OpCodes&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Pop&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="n"&gt;gen&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Emit&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;OpCodes&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Ret&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="n"&gt;typeBuilder&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CreateType&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
            &lt;span class="n"&gt;assemblyBuilder&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SetEntryPoint&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;methodBuilder&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;PEFileKinds&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ConsoleApplication&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="n"&gt;File&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Delete&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;test.exe&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="n"&gt;assemblyBuilder&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Save&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;test.exe&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="n"&gt;Process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Start&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;test.exe&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;手順は大雑把に&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;出力したいファイルの情報を作る。(Mainの1行目〜3行目)&lt;/li&gt;
&lt;li&gt;class、メソッドを作る(4, 5行目)&lt;/li&gt;
&lt;li&gt;ilを書き出す(6 〜 13行目)&lt;/li&gt;
&lt;li&gt;エントリーポイントを作る(14行目)&lt;/li&gt;
&lt;li&gt;ファイルを出力する(16行目)&lt;/li&gt;
&lt;li&gt;実行する(17行目)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;OpCOdesに関してはここをチェックした&lt;a href="https://msdn.microsoft.com/en-us/library/system.reflection.emit.opcodes_fields(v=vs.110).aspx"&gt;OpCodes Fields (System.Reflection.Emit)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;実際にどういうilコードを書けば良いかは、一回C#でビルドしたものを&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ monodis hoge.exe
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;みたいにしてilコードを表示させると良い&lt;/p&gt;
&lt;h2&gt;一旦ビルドしたものを手動で修正する&lt;/h2&gt;
&lt;p&gt;何個か選択肢があるみたいだが、&lt;a href="http://www.mono-project.com/docs/tools+libraries/libraries/Mono.Cecil/"&gt;Mono.Cecil&lt;/a&gt;を使ったので、Mono.Cecilについてのみ書く。&lt;/p&gt;
&lt;p&gt;色々情報はあるんだけど、どうもバージョンの違いによって作法が若干変わるみたい。なので、これは2015/11/29時点の情報(バージョン0.9.6)になる。&lt;/p&gt;
&lt;p&gt;test.exeにConsole.WriteLine("injected!")を追加するにはこんな感じで&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="nn"&gt;System&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="nn"&gt;System.Collections.Generic&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="nn"&gt;System.Linq&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="nn"&gt;System.Text&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="nn"&gt;System.IO&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="nn"&gt;System.Diagnostics&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="nn"&gt;Mono.Cecil&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="nn"&gt;Mono.Cecil.Cil&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;namespace&lt;/span&gt; &lt;span class="nn"&gt;ceciltest&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
 &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Program&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;Main&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;asm&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;AssemblyDefinition&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ReadAssembly&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;@&amp;quot;test.exe&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="n"&gt;mainDef&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;asm&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;MainModule&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Types&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;OfType&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;TypeDefinition&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;().&lt;/span&gt;&lt;span class="n"&gt;Single&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Name&lt;/span&gt; &lt;span class="p"&gt;==&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;MainClass&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="n"&gt;MethodDefinition&lt;/span&gt; &lt;span class="n"&gt;mainMethod&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;mainDef&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Methods&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;OfType&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;MethodDefinition&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;().&lt;/span&gt;&lt;span class="n"&gt;Single&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;m&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Name&lt;/span&gt; &lt;span class="p"&gt;==&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Main&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="n"&gt;Instruction&lt;/span&gt; &lt;span class="n"&gt;ret&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;mainMethod&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Body&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Instructions&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Last&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;OpCode&lt;/span&gt; &lt;span class="p"&gt;==&lt;/span&gt; &lt;span class="n"&gt;OpCodes&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Ret&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="n"&gt;mainMethod&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Body&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Instructions&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Remove&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ret&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="n"&gt;mainMethod&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Body&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Instructions&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Add&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Instruction&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Create&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Mono&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Cecil&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Cil&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;OpCodes&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Ldstr&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;injected!&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
        &lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;writeLineMethod&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;typeof&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Console&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;GetMethod&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;WriteLine&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;Type&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;typeof&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
        &lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;writeLineRef&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;asm&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;MainModule&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ImportReference&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;writeLineMethod&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="n"&gt;mainMethod&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Body&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Instructions&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Add&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Instruction&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Create&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;OpCodes&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Call&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;writeLineRef&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
        &lt;span class="n"&gt;mainMethod&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Body&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Instructions&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Add&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Instruction&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Create&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;OpCodes&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Ret&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
        &lt;span class="n"&gt;asm&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;test.modified.exe&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
 &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;大雑把にやってることはこんな感じ&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ビルドしたもの(dllとかexeとか)をアセンブリとして読み込む(Main関数の1行目)&lt;/li&gt;
&lt;li&gt;変更したいクラス、メソッドを取り出す(2, 3行目)&lt;/li&gt;
&lt;li&gt;メソッド内のilを修正(追加とか削除とか)&lt;/li&gt;
&lt;li&gt;Main内に元々あるretを削除(4, 5行目)&lt;/li&gt;
&lt;li&gt;出力したい文字列を設定する(6行目)&lt;/li&gt;
&lt;li&gt;Console.WriteLineを定義(7行目)&lt;/li&gt;
&lt;li&gt;Callする為の参照を作る(8行目)。&lt;/li&gt;
&lt;li&gt;Console.WriteLineをCallする(9行目)&lt;/li&gt;
&lt;li&gt;消したretを再度追加&lt;/li&gt;
&lt;li&gt;修正したものを書き出し(11行目)&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;雑多&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;他の情報でImportとあるのはImportReferenceになっている&lt;/li&gt;
&lt;li&gt;型やメソッドなど参照で登録するのでImportReferenceを使う。アセンブリ内で独自に定義している型の場合は別の作法が必要。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;参考：
+ &lt;a href="http://mono.1490590.n4.nabble.com/TypeReference-of-bool-td1550891.html"&gt;Mono - Cecil - TypeReference of bool&lt;/a&gt;
+ &lt;a href="http://vx.thomazi.me/posts/net-injection-cecil/"&gt;.Net injection with Mono.Cecil(全てのメソッドを修正する例)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;他参考資料&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://home.a00.itscom.net/hatada/_toc/dotnet.html#dotnet"&gt;.NET &amp;amp; C#&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</summary><category term="CSharp"></category></entry><entry><title>virtualenv上のpythonでmecabを使う (ubuntu1 12.04)</title><link href="http://blog.shigepon.info/blog/2015/11/02/use-mecab-in-python-virtualenv-ubuntu1-12-dot-04/" rel="alternate"></link><updated>2015-11-02T17:28:17+09:00</updated><author><name>shigepon</name></author><id>tag:blog.shigepon.info,2015-11-02:blog/2015/11/02/use-mecab-in-python-virtualenv-ubuntu1-12-dot-04/</id><summary type="html">&lt;p&gt;ubuntu 12.04でapt使ってmecabをインストールしている状態、virtualenvのpythonに切り替えているところからスタート&lt;/p&gt;
&lt;h2&gt;先に結論&lt;/h2&gt;
&lt;p&gt;mecabをソースからインストールして最新版にして、natto-pyをpipでインストールすれば出来た。&lt;/p&gt;
&lt;h2&gt;1. mecab-pythonをvirtualenv上で使用してみる&lt;/h2&gt;
&lt;p&gt;ファイルにmecab-pythonを置いてる場所を指定して、pip使えば良い&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;#requirements.txt&lt;/span&gt;
https://mecab.googlecode.com/files/mecab-python-0.996.tar.gz
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ pip install -r requirements.txt
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;これでvirtualenv上にmecab-pythonをインストール出来た。
参考：&lt;a href="http://qiita.com/hagino3000/items/4cb73fb53537c0714044"&gt;travisでpython-mecabを動かしたい時の設定 - Qiita&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;でもこれでおもむろに&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;MeCab&lt;/span&gt;
&lt;span class="n"&gt;m&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;MeCab&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Tagger&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;-Ochasen&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;今日は良い天気&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;エラーが出たorz&lt;/p&gt;
&lt;h2&gt;2. natto-pyを使ってみる&lt;/h2&gt;
&lt;p&gt;pip search mecabで調べて、その後ググると、natto-pyってのがmecab使えるライブラリであるっぽいのでインストールしてみた&lt;/p&gt;
&lt;p&gt;参考：&lt;a href="https://github.com/buruzaemon/natto-py"&gt;buruzaemon/natto-py&lt;/a&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ pip install natto-py
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;これだけでインストール出来た。使ってみたらインストールしてあるmecabのバージョンが古過ぎて使えないと怒られたorz。&lt;/p&gt;
&lt;h2&gt;3. mecabを最新バージョンにする&lt;/h2&gt;
&lt;p&gt;仕方ないので&lt;/p&gt;
&lt;h3&gt;aptのmecabをアンインストール&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ sudo aptitude remove mecab
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;mecabをソースからインストール&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ wget https://drive.google.com/uc?export&lt;span class="o"&gt;=&lt;/span&gt;download&lt;span class="p"&gt;&amp;amp;&lt;/span&gt;&lt;span class="nv"&gt;id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;0B4y35FiV1wh7cENtOXlicTFaRUE
$ tar zxvf mecab-0.996.tar.gz
$ &lt;span class="nb"&gt;cd&lt;/span&gt; mecab-0.996
$ ./configure
$ make
$ make check
$ sudo make install
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;mecab辞書のインストール&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ wget https://drive.google.com/uc?export&lt;span class="o"&gt;=&lt;/span&gt;download&lt;span class="p"&gt;&amp;amp;&lt;/span&gt;&lt;span class="nv"&gt;id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;0B4y35FiV1wh7MWVlSDBCSXZMTXM
$ tar zvxf mecab-ipadic-2.7.0-20070801.tar.gz
$ &lt;span class="nb"&gt;cd&lt;/span&gt; mecab-ipadic-2.7.0-20070801
$ ./configure --with-charset&lt;span class="o"&gt;=&lt;/span&gt;utf8
$ make
$ sudo make install
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;urlはそれぞれ&lt;a href="http://taku910.github.io/mecab/#download"&gt;mecabのページ&lt;/a&gt;からリンクされているものを用いた。&lt;/p&gt;
&lt;p&gt;参考：&lt;a href="http://tatsuyaoiw.hatenablog.com/entry/20120414/1334397985"&gt;MeCabのインストール方法 - tatsuyaoiw.hatenablog.com&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;natto-pyを改めて使う&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# coding: utf-8↲&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;natto&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;MeCab&lt;/span&gt;
&lt;span class="n"&gt;nm&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;MeCab&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;nm&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;parse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;ピンチの時には必ずヒーローが現れる。&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;# MeCab result as a single string&lt;/span&gt;
&lt;span class="err"&gt;ピンチ&lt;/span&gt;    &lt;span class="err"&gt;名詞&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="err"&gt;一般&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="err"&gt;ピンチ&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="err"&gt;ピンチ&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="err"&gt;ピンチ&lt;/span&gt;
&lt;span class="err"&gt;の&lt;/span&gt;      &lt;span class="err"&gt;助詞&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="err"&gt;連体化&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="err"&gt;の&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="err"&gt;ノ&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="err"&gt;ノ&lt;/span&gt;
&lt;span class="err"&gt;時&lt;/span&gt;      &lt;span class="err"&gt;名詞&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="err"&gt;非自立&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="err"&gt;副詞可能&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="err"&gt;時&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="err"&gt;トキ&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="err"&gt;トキ&lt;/span&gt;
&lt;span class="err"&gt;に&lt;/span&gt;      &lt;span class="err"&gt;助詞&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="err"&gt;格助詞&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="err"&gt;一般&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="err"&gt;に&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="err"&gt;ニ&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="err"&gt;ニ&lt;/span&gt;
&lt;span class="err"&gt;は&lt;/span&gt;      &lt;span class="err"&gt;助詞&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="err"&gt;係助詞&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="err"&gt;は&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="err"&gt;ハ&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="err"&gt;ワ&lt;/span&gt;
&lt;span class="err"&gt;必ず&lt;/span&gt;    &lt;span class="err"&gt;副詞&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="err"&gt;助詞類接続&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="err"&gt;必ず&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="err"&gt;カナラズ&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="err"&gt;カナラズ&lt;/span&gt;
&lt;span class="err"&gt;ヒーロー&lt;/span&gt;  &lt;span class="err"&gt;名詞&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="err"&gt;一般&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="err"&gt;ヒーロー&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="err"&gt;ヒーロー&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="err"&gt;ヒーロー&lt;/span&gt;
&lt;span class="err"&gt;が&lt;/span&gt;      &lt;span class="err"&gt;助詞&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="err"&gt;格助詞&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="err"&gt;一般&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="err"&gt;が&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="err"&gt;ガ&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="err"&gt;ガ&lt;/span&gt;
&lt;span class="err"&gt;現れる&lt;/span&gt;  &lt;span class="err"&gt;動詞&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="err"&gt;自立&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="err"&gt;一段&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="err"&gt;基本形&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="err"&gt;現れる&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="err"&gt;アラワレル&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="err"&gt;アラワレル&lt;/span&gt;
&lt;span class="err"&gt;。&lt;/span&gt;      &lt;span class="err"&gt;記号&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="err"&gt;句点&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="err"&gt;。&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="err"&gt;。&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="err"&gt;。&lt;/span&gt;
&lt;span class="n"&gt;EOS&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;うまくいった。&lt;/p&gt;</summary><category term="python"></category><category term="linux"></category></entry><entry><title>ubuntu12.04でpg\_bulkloadを使う</title><link href="http://blog.shigepon.info/blog/2015/09/24/use-pg-bulkload-in-ubuntu-12-dot-04/" rel="alternate"></link><updated>2015-09-24T08:50:36+09:00</updated><author><name>shigepon</name></author><id>tag:blog.shigepon.info,2015-09-24:blog/2015/09/24/use-pg-bulkload-in-ubuntu-12-dot-04/</id><summary type="html">&lt;p&gt;pg_bulkloadを使いたくなるケース&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;大量のデータをインポートしたい&lt;/li&gt;
&lt;li&gt;中にはエラーがあるデータがちょこちょこある&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;に当てはまったので、インストールからやってみた。
やったこと順に列記するので最低限の手順ではないと思う。&lt;/p&gt;
&lt;p&gt;rpmからインストールする方法でなく、ソースからやってみることにした。
Ubuntu12.04でインストールしたけど、他のバージョンでもほぼ同じだと思う。&lt;/p&gt;
&lt;h2&gt;ソースの取得&lt;/h2&gt;
&lt;p&gt;まずは最新のstableをgithubから取ってくる。ブログ執筆時はこんな感じ。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ git clone -b VERSION3_1_STABLE https://github.com/ossc-db/pg_bulkload.git
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;make(失敗)&lt;/h2&gt;
&lt;p&gt;おもむろにmakeしてみると&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ &lt;span class="nb"&gt;cd&lt;/span&gt; pg_bulkload
$ make
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;するとpgxs.xmlが無い！というエラーが出て来た&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Makefile:17: /usr/lib/postgresql/9.4/lib/pgxs/src/makefiles/pgxs.mk: そのようなファイルやディレクトリはありません
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;postgresqlは9.2しか入れてないはずなのに何故か9.4のファイルが無いとか言われた。&lt;/p&gt;
&lt;h2&gt;試行錯誤(失敗)&lt;/h2&gt;
&lt;p&gt;どうもMakefileを調べてみると、ここで出てくるバージョンはpg_configコマンドで取得するバージョンらしい。面倒なので、手動で9.2のファイルを設定するように変更して、さらにpgxs.mkを入れるためにpostgresql-server-dev-9.2をaptitudeでインストールした。&lt;/p&gt;
&lt;p&gt;で、おもむろにmakeすると・・・&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ sudo make
....
/usr/include/postgresql/libpq-fe.h:547:1: エラー: 不明な型名 ‘pg_int64’ です
/usr/include/postgresql/libpq-fe.h:547:50: エラー: 不明な型名 ‘pg_int64’ です
/usr/include/postgresql/libpq-fe.h:551:1: エラー: 不明な型名 ‘pg_int64’ です
/usr/include/postgresql/libpq-fe.h:553:48: エラー: 不明な型名 ‘pg_int64’ です
make&lt;span class="o"&gt;[&lt;/span&gt;1&lt;span class="o"&gt;]&lt;/span&gt;: *** &lt;span class="o"&gt;[&lt;/span&gt;pg_bulkload.o&lt;span class="o"&gt;]&lt;/span&gt; エラー 1
make&lt;span class="o"&gt;[&lt;/span&gt;1&lt;span class="o"&gt;]&lt;/span&gt;: ディレクトリ &lt;span class="sb"&gt;`&lt;/span&gt;/****/pg_bulkload/bin&lt;span class="err"&gt;&amp;#39;&lt;/span&gt; から出ます
make: *** &lt;span class="o"&gt;[&lt;/span&gt;all&lt;span class="o"&gt;]&lt;/span&gt; エラー 2
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;と結局エラーが出てしまった。ググって調べるとどうもlibpqのバージョンが関連するらしい。調べてみると&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ aptitude show libpq-dev
パッケージ: libpq-dev                    
状態: インストール済み
自動的にインストールされた: いいえ
バージョン: 9.4.0-1.pgdg12.4+1
....
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;バージョンが9.4になっていたorz。多分だけど、9.2でpg_bulkloadをインストールするにはlibpqをダウングレードしないといけないっぽい。それは面倒なのでpostgresqlのバージョン9.4をインストールすることでバージョンを合わせることにした&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ sudo aptitude install postgresql-9.4
$ sudo aptitude install postgresql-server-dev-9.4
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;インストールの途中でlibpq-devは削除することになった。&lt;/p&gt;
&lt;h2&gt;make(成功)&lt;/h2&gt;
&lt;p&gt;バージョンを合わせたので、makeしてみると今度はライブラリが足らないというエラーが出た&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ sudo make
....
/usr/bin/ld: cannot find -lpam
/usr/bin/ld: cannot find -ledit
collect2: ld はステータス &lt;span class="m"&gt;1&lt;/span&gt; で終了しました
make&lt;span class="o"&gt;[&lt;/span&gt;1&lt;span class="o"&gt;]&lt;/span&gt;: *** &lt;span class="o"&gt;[&lt;/span&gt;pg_bulkload&lt;span class="o"&gt;]&lt;/span&gt; エラー 1
make&lt;span class="o"&gt;[&lt;/span&gt;1&lt;span class="o"&gt;]&lt;/span&gt;: ディレクトリ &lt;span class="sb"&gt;`&lt;/span&gt;/***/pg_bulkload/bin&lt;span class="err"&gt;&amp;#39;&lt;/span&gt; から出ます
make: *** &lt;span class="o"&gt;[&lt;/span&gt;all&lt;span class="o"&gt;]&lt;/span&gt; エラー 2
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;これはubuntuではlibpam-devとlibedit-devが足らないという意味らしいので、aptitudeからインストールした。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ sudo aptitude install libpam-dev
$ sudo aptitude install libedit-dev
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;以上の作業でpg_bulkloadのmakeに成功した&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ sudo make
$ sudo make install
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;使ってみる&lt;/h2&gt;
&lt;p&gt;pg_bulkloadはbinフォルダ内にある。使い方は&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;設定ファイルを書く&lt;/li&gt;
&lt;li&gt;csvファイルを用意する&lt;/li&gt;
&lt;li&gt;実行する&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;となる。&lt;/p&gt;
&lt;h3&gt;設定ファイルを書く&lt;/h3&gt;
&lt;p&gt;設定ファイルの例はこんな感じ(下のコマンドの場合、example.ctlで保存しておく)、bin/data内にも例があるので参考になる。
この設定は&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;リダイレクトでcsvファイルを入力する。&lt;/li&gt;
&lt;li&gt;リレーションをチェックする。リレーションにミスがある場合はエラーにする&lt;/li&gt;
&lt;li&gt;タブ区切り&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;TYPE = CSV
INPUT = stdin
TABLE = table_name
CHECK_CONSTRAINTS = YES
DELIMITER = &amp;quot;   &amp;quot; #タブの場合
WRITER = DIRECT
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;コマンドはこんな感じ&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ ./pg_bulkload example.ctl --dbname db_name  &amp;lt; csv_name.csv
NOTICE: BULK LOAD START
NOTICE: BULK LOAD END
    &lt;span class="m"&gt;0&lt;/span&gt; Rows skipped.
    &lt;span class="m"&gt;10&lt;/span&gt; Rows successfully loaded.
    &lt;span class="m"&gt;0&lt;/span&gt; Rows not loaded due to parse errors.
    &lt;span class="m"&gt;0&lt;/span&gt; Rows not loaded due to duplicate errors.
    &lt;span class="m"&gt;0&lt;/span&gt; Rows replaced with new rows.
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;csvファイルはpsqlで\d table_nameで表示される順序にしておくこと。でないとパースエラーが出る。&lt;/p&gt;
&lt;h2&gt;順序が変わる場合&lt;/h2&gt;
&lt;p&gt;csvファイル内のフィールド順序をdb内の順序と違うものにしたい場合や、idなど、データを省略したい場合はフィルタを指定出来る。フィルタは&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;db内に関数を作る&lt;/li&gt;
&lt;li&gt;設定ファイルでフィルタを指定&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;で設定する。&lt;/p&gt;
&lt;p&gt;フィルタの例&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;CREATE&lt;/span&gt; &lt;span class="k"&gt;FUNCTION&lt;/span&gt; &lt;span class="n"&gt;sample_filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;integer&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;text&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;text&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;real&lt;/span&gt; &lt;span class="k"&gt;DEFAULT&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;05&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;RETURNS&lt;/span&gt; &lt;span class="n"&gt;record&lt;/span&gt;
    &lt;span class="k"&gt;AS&lt;/span&gt; &lt;span class="err"&gt;$$&lt;/span&gt; &lt;span class="k"&gt;SELECT&lt;/span&gt; &lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;upper&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="err"&gt;$$&lt;/span&gt;
    &lt;span class="k"&gt;LANGUAGE&lt;/span&gt; &lt;span class="k"&gt;SQL&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;設定ファイル&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;TYPE = CSV
INPUT = stdin
TABLE = table_name
CHECK_CONSTRAINTS = YES
DELIMITER = &amp;quot;   &amp;quot; #タブの場合
WRITER = DIRECT
FILTER = sample_filter
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;出来てない点（追記予定）&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;MULTI_PROCESS = YESの時に認証失敗する件&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;参考：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://pgbulkload.projects.pgfoundry.org/pg_bulkload.html#filter"&gt;pg_bulkload&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.atmarkit.co.jp/flinux/rensai/linuxtips/a115makeerror.html"&gt;makeで「/usr/bin/ld: cannot find」と表示されるときは － ＠IT&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://pgfoundry.org/forum/forum.php?thread_id=2851&amp;amp;forum_id=1004&amp;amp;group_id=1000261"&gt;pgFoundry: Forum: help&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ossc-db/pg_bulkload"&gt;ossc-db/pg_bulkload&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</summary><category term="PostgreSQL"></category></entry><entry><title>Django 1.7から1.8にアップデートしてみた</title><link href="http://blog.shigepon.info/blog/2015/08/25/migrate-from-django-1-dot-7-to-1-dot-8/" rel="alternate"></link><updated>2015-08-25T15:39:02+09:00</updated><author><name>shigepon</name></author><id>tag:blog.shigepon.info,2015-08-25:blog/2015/08/25/migrate-from-django-1-dot-7-to-1-dot-8/</id><summary type="html">&lt;p&gt;&lt;a href="http://blog.shigepon.info/blog/2015/03/09/migrate-from-django-1-dot-6-to-1-dot-7/"&gt;1.6の時&lt;/a&gt;と同様にpipでアップデートした。&lt;/p&gt;
&lt;h2&gt;注意点&lt;/h2&gt;
&lt;p&gt;個人的に作っているアプリでアップデートした際にコード変更が必要だった点は以下の通り。他にも色々使えなくなった命令とかあるみたいだけど引っ掛からなかったので省略。詳しくは&lt;a href="https://docs.djangoproject.com/en/1.8/releases/1.8/#features-removed-in-1-8"&gt;Django 1.8 release notes | Django documentation | Django&lt;/a&gt;で見ることが出来る。&lt;/p&gt;
&lt;h3&gt;urls.pyで指定するnamespace&lt;/h3&gt;
&lt;p&gt;urls.pyでapp_nameを指定した場合に必ずnamespaceを指定する必要があるようになった。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# urls.py&lt;/span&gt;
&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;r&amp;#39;^&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;include&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;hoge.urls&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;app_name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;hoge&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)),&lt;/span&gt;&lt;span class="c1"&gt;#これはダメ&lt;/span&gt;
&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;r&amp;#39;^&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;include&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;hoge.urls&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;app_name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;hoge&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;namespace&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;hoge&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)),&lt;/span&gt;&lt;span class="c1"&gt;#これはOK&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;ダメなコード実装してた場合は、reverseでurlを作ってる箇所にも修正が必要になる。&lt;/p&gt;
&lt;h3&gt;transactionについて&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;transaction&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;commit_unless_managed&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="err"&gt;みたいなメソッドが無くなってた。&lt;/span&gt;

&lt;span class="c1"&gt;## migrate関連でのハマりポイント（2015-10-20追記）&lt;/span&gt;

&lt;span class="mf"&gt;1.7&lt;/span&gt;&lt;span class="err"&gt;から&lt;/span&gt;&lt;span class="mf"&gt;1.8&lt;/span&gt;&lt;span class="err"&gt;にバージョンアップすると、マイグレーションでエラーが出る。普通に&lt;/span&gt;

&lt;span class="sb"&gt;``&lt;/span&gt;&lt;span class="err"&gt;`&lt;/span&gt;&lt;span class="n"&gt;sh&lt;/span&gt;
&lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="n"&gt;python&lt;/span&gt; &lt;span class="n"&gt;manage&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;py&lt;/span&gt; &lt;span class="n"&gt;makemigrations&lt;/span&gt;
&lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="n"&gt;python&lt;/span&gt; &lt;span class="n"&gt;manage&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;py&lt;/span&gt; &lt;span class="n"&gt;migrate&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;とするとmigrateコマンドで&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Error creating new content types. Please make sure contenttypes
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;というメッセージが出てコマンドが途中で終わってしまう。調べて結果データベース上で&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;ALTER TABLE django_content_type DROP COLUMN name;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;を実行することで対処できた。要はカラムが一個要らなくなったみたい。&lt;/p&gt;
&lt;p&gt;参考：&lt;a href="http://stackoverflow.com/questions/29917442/error-creating-new-content-types-please-make-sure-contenttypes-is-migrated-befo"&gt;django - Error creating new content types. Please make sure contenttypes is migrated before trying to migrate apps individually - Stack Overflow&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;adminでユーザー追加するとnot null制限に引っ掛かるエラー（2015-10-26追記）&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;admin画面でユーザーを追加すると「last_loginがnot null制限あるのにnullを入れようとした」と怒られた。

対策をググると普通にmigrateコマンドすればおkと書いてあるのに出来なかったのでsqlで対応してみた
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;alter table auth_user alter column last_login drop not null;
```&lt;/p&gt;
&lt;p&gt;これでユーザー追加出来るようになった&lt;/p&gt;
&lt;h2&gt;嬉しい点&lt;/h2&gt;
&lt;p&gt;色々あるみたいだけど、PostgreSQLを使っているので、特にPostgreSQL使ってる場合に、独自のフィールドを使えるようになった点が嬉しい。ArrayFieldとか、わざわざリレーション作りたくない時とか便利そう。&lt;/p&gt;
&lt;p&gt;&lt;a href="https://docs.djangoproject.com/en/1.8/ref/contrib/postgres/fields/"&gt;Djangoドキュメントによる説明&lt;/a&gt;&lt;/p&gt;</summary><category term="django"></category><category term="python"></category></entry><entry><title>Javascript memo</title><link href="http://blog.shigepon.info/blog/2015/08/12/javascript-memo/" rel="alternate"></link><updated>2015-08-12T09:01:59+09:00</updated><author><name>shigepon</name></author><id>tag:blog.shigepon.info,2015-08-12:blog/2015/08/12/javascript-memo/</id><summary type="html">&lt;p&gt;Javascript関連のメモ&lt;/p&gt;
&lt;h2&gt;HighChartで日本時間をx軸に利用&lt;/h2&gt;
&lt;p&gt;チャートを表示するライブラリに&lt;a href="http://www.highcharts.com/"&gt;HighChart&lt;/a&gt;ってのを使ってるけど、横軸の時間がUTCになってしまうので、ちょっとはまった。&lt;/p&gt;
&lt;p&gt;こうすればいいらしい&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nx"&gt;Highcharts&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setOptions&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
    &lt;span class="nx"&gt;global&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;useUTC&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;chart&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;HighChart&lt;/span&gt;&lt;span class="p"&gt;(...);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;グローバルな設定として使うらしい。
参考（ほぼそのまま）&lt;a href="http://mtc.hatenablog.com/"&gt;mtcdotcom's blog&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;HighChartでチャートをクリックするとUncaught TypeError: undefined is not a functionが出る&lt;/h2&gt;
&lt;p&gt;Chromeでのみ確認。Google翻訳の拡張機能を切ればおk&lt;/p&gt;
&lt;p&gt;参考：&lt;a href="http://stackoverflow.com/questions/30498335/highcharts-always-console-error-ablout-bubble-compiled-js"&gt;javascript - highcharts always console error ablout bubble_compiled.js? - Stack Overflow&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;bootstrap3のタブ変更時に何か実行したい&lt;/h2&gt;
&lt;p&gt;タブの中身を表示する時に何か実行させたい時は次のようにすればおk&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;ul&lt;/span&gt; &lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;nav nav-tabs&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
 &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;li&lt;/span&gt; &lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;active&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;a&lt;/span&gt; &lt;span class="na"&gt;href&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;#tab1&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;data-toggle&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;tab&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Tab1&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;a&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;li&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
 &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;li&lt;/span&gt; &lt;span class="p"&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;a&lt;/span&gt; &lt;span class="na"&gt;href&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;#tab2&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;data-toggle&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;tab&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Tab2&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;a&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;li&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;ul&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;tab-content&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
 &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;tab-pane active&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;tab1&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
   Tab1 content
 &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
 &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;tab-pane&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;tab2&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
   Tab2 content
 &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;script&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;a[data-toggle=&amp;quot;tab&amp;quot;]&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;on&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;shown.bs.tab&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
    &lt;span class="p"&gt;...&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;script&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;shown.bs.tabってイベントがあるらしい。&lt;/p&gt;
&lt;p&gt;参考：&lt;a href="http://stackoverflow.com/questions/20705905/bootstrap-3-jquery-event-for-active-tab-change"&gt;Bootstrap 3 jquery event for active tab change - Stack Overflow&lt;/a&gt;&lt;/p&gt;</summary><category term="javascript"></category><category term="memo"></category></entry><entry><title>Vmware Esxiがfatal error 33を出したのでインストールしなおしてついでに色々試した話</title><link href="http://blog.shigepon.info/blog/2015/08/05/esxi-shows-fatal-error-33/" rel="alternate"></link><updated>2015-08-05T16:45:31+09:00</updated><author><name>shigepon</name></author><id>tag:blog.shigepon.info,2015-08-05:blog/2015/08/05/esxi-shows-fatal-error-33/</id><summary type="html">&lt;p&gt;Vmware Esxiがある日&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;error loading /s.v00
fatal error: &lt;span class="m"&gt;33&lt;/span&gt; inconsistent data
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;というメッセージを出して起動しなくなったので、修復方法をメモしておく&lt;/p&gt;
&lt;h2&gt;結論&lt;/h2&gt;
&lt;p&gt;まず結論から言うと、Vmware Esxiを入れ直すことになった。他にも方法があるらしいが、その方法のページが途中で会員登録しないと見れなくなったので、参考にしなかった。&lt;/p&gt;
&lt;p&gt;参考：
&lt;a href="https://communities.vmware.com/thread/342182"&gt;error loading s.v00 fatal error 33 inconsistent... | VMware Communities&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Vmware Esxiの入れ直し&lt;/h2&gt;
&lt;p&gt;USBにインストールしていたので、要はそのままインストールし直すだけなんだけど、以下手順&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Esxiのisoをダウンロード&lt;ul&gt;
&lt;li&gt;&lt;a href="https://my.vmware.com/jp/web/vmware/login"&gt;my vmware&lt;/a&gt;からログイン(ユーザー登録はフォームに記入して・・・という良くある方法なので省略)
-- &lt;a href="https://my.vmware.com/group/vmware/downloads#tab2"&gt;製品ダウンロード&lt;/a&gt;に移動&lt;/li&gt;
&lt;li&gt;VMware vSphere Hypervisor (ESXi)の横の&lt;a href="https://my.vmware.com/group/vmware/info/slug/datacenter_cloud_infrastructure/vmware_vsphere_hypervisor_esxi/6_0"&gt;View Download Components&lt;/a&gt;をクリック&lt;/li&gt;
&lt;li&gt;左にバージョン選択用のコンボボックスがあるので、バージョンを選択して、Downloadリンクをクリック&lt;/li&gt;
&lt;li&gt;Registerのボタンが出てる場合、まずクリックして、ライセンスの登録を行う&lt;/li&gt;
&lt;li&gt;License Informationにlicense keysが出るので保存しておく。(Vmware ESXi Clientでのライセンスキー登録に使う)&lt;/li&gt;
&lt;li&gt;ライセンスの登録が済んだらDownload Packages以下の項目からダウンロードするためのリンクが出るのでダウンロードする&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;em&gt;AdBlockを入れてるとダウンロードが開始しなかったので注意&lt;/em&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;ダウンロードしたisoをCDに焼く&lt;/li&gt;
&lt;li&gt;Esxiのハード要件を全て満たすハード上でCD起動する&lt;/li&gt;
&lt;li&gt;ESXiをインストールする&lt;ul&gt;
&lt;li&gt;Boot MenuでESXi Installerを選択する&lt;/li&gt;
&lt;li&gt;インストールを進めるかどうか聞かれる(Enter)&lt;/li&gt;
&lt;li&gt;ライセンス許諾を聞かれる(F11でおk)&lt;/li&gt;
&lt;li&gt;インストール先を選ぶ(入れたい場所を選ぶ。USB差しておけばUSBも出て選択出来る)&lt;/li&gt;
&lt;li&gt;キーボードレイアウトを選択する&lt;/li&gt;
&lt;li&gt;rootアカウントのパスワードを設定する(タブで移動、2回設定するEnterで完了)&lt;/li&gt;
&lt;li&gt;最後の確認(F11でおk)&lt;/li&gt;
&lt;li&gt;インストール終了後Enterで再起動&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;バージョン5.5、6.0&lt;/h2&gt;
&lt;p&gt;今まで入れてたのがEsxiバージョン5.0だったので、ついでに5.5、6.0を試してみた。インストール方法は入れ直し方法と同じ。&lt;/p&gt;
&lt;p&gt;で、インストール後にクライアントをDLしてホストに接続してみた。どのバージョンでも問題なく出来たが、Windows XPの端末ではこの2つのバージョンは接続出来ないそうな。&lt;/p&gt;
&lt;p&gt;Vmの操作（インベントリへの追加、起動、コンソール表示、終了）は全てのバージョンで同じように出来た。Vmはバージョン5で作ったものだが他のバージョンでの操作も問題ないらしい。これは便利。&lt;/p&gt;
&lt;h2&gt;sshでEsxiホストを操作する&lt;/h2&gt;
&lt;p&gt;linuxやmacからEsxiホストを操作して、vmの起動、終了とかやりたかったので、ついでに試してみた。手順は以下の通り&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;EsxiホストでSSHを有効にする&lt;ul&gt;
&lt;li&gt;初期画面からCustomize Systemへ移動(F2)&lt;/li&gt;
&lt;li&gt;カーソルを上下移動して「Troubleshooting Options」のところでEnter&lt;/li&gt;
&lt;li&gt;Disable ESXi Shellにカーソルを合わせてEnterを押すとEnable ESXi Shellに変わる&lt;/li&gt;
&lt;li&gt;Disable SSHにカーソルを合わせてEnterを押すとEnable SSHに変わる&lt;/li&gt;
&lt;li&gt;Restart Management Agentsにカーソルを合わせてEnterを押す&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;ESXiクライアントでSSHを有効にする&lt;ul&gt;
&lt;li&gt;インベントリが選択されている状態で、構成(Configuration) -&amp;gt; セキュリティプロファイル(Security Profile)の上部、サービス(Services)の「プロパティ(Properties)をクリック&lt;/li&gt;
&lt;li&gt;SSHを選択し、オプション(Options)をクリック&lt;/li&gt;
&lt;li&gt;ホストに連動して開始および停止(Start and stop with host)を選択し、サービスコマンドの開始(Start)ボタンを押す。その後okをクリックしてダイアログを消す。&lt;/li&gt;
&lt;li&gt;同中部、ファイアウォール(Firewall)の「プロパティ(Properties)をクリック&lt;/li&gt;
&lt;li&gt;SSHサーバ(SSH Server)をチェック&lt;/li&gt;
&lt;li&gt;ファイアーウォール(Firewall)ボタンをクリック&lt;/li&gt;
&lt;li&gt;IPアドレスの許可設定を行う。任意のIPアドレスからの接続を許可(Allow connections from any IP address)するのが一番楽。&lt;/li&gt;
&lt;li&gt;okをクリックしていって、ダイアログを閉じる&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;以上で、linuxやmacから&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;ssh root@ESXiのip
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;でインストール時に指定したパスワードを入力するとsshでESXiホストにアクセス出来るようになる。&lt;/p&gt;
&lt;p&gt;参考：&lt;a href="http://www.serenity-networks.com/networking/how-to-enable-ssh-on-vmware-esxi-5-5-5-6-all-other-versions/"&gt;How To Enable SSH on VMware ESXi 5 / 5.5 / 6 &amp;amp; All Other Versions | Serenity-Networks&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;ESXiの管理コマンド(ごく一部。追記予定)&lt;/h2&gt;
&lt;h3&gt;インベントリへのVMの追加、削除&lt;/h3&gt;
&lt;p&gt;追加&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ vim-cmd solo/registervm &lt;span class="o"&gt;[&lt;/span&gt;vmxのパス.vmx&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;vm名&lt;span class="o"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;削除&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ vim-cmd vmsvc/unregister &lt;span class="o"&gt;[&lt;/span&gt;vmのid&lt;span class="o"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;vm一覧&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ vim-cmd vmsvc/getallvms
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;ここで出て来たvmidをvmのidとして色んなコマンド内で使用する。&lt;/p&gt;
&lt;h3&gt;vm起動、シャットダウン&lt;/h3&gt;
&lt;p&gt;起動&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ vim-cmd vmsvc/power.on &lt;span class="o"&gt;[&lt;/span&gt;vmのid&lt;span class="o"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;終了&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ vim-cmd vmsvc/power.shutdown &lt;span class="o"&gt;[&lt;/span&gt;vmのid&lt;span class="o"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;参考：&lt;a href="http://qiita.com/binzume/items/096ce77f73b6e853c342"&gt;VMware ESXiをSSHでがんばるぞい(コマンドライン操作色々) - Qiita&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;ちなみに各コマンドについてはヘルプを出すオプションとか無いみたい。コマンド失敗した時に使用法が出ることもあるが、失敗するまで分からないとか怖いわー。&lt;/p&gt;
&lt;h3&gt;ESXiシャットダウン&lt;/h3&gt;
&lt;p&gt;シャットダウンと同時に電源を切る作業も必要&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ shutdown.sh &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; poweroff
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;でおk。USBにインストールしているせいか分からないが、poweroffが無い場合、SSHの設定が再起動後、元に戻っていた。&lt;/p&gt;
&lt;p&gt;参考：&lt;a href="http://www.nojokeit.com/2013/02/shut-down-esxi-51-guest-vms-and-host.html"&gt;No Joke IT: Shut down ESXi 5.1 guest VMs and the host (free edition) via SSH - the easy way!&lt;/a&gt;&lt;/p&gt;</summary><category term="vmware"></category><category term="linux"></category></entry><entry><title>Djangoで作成済みテーブルに手動でリレーションを追加する</title><link href="http://blog.shigepon.info/blog/2015/07/30/add-relation-to-existing-table-using-django/" rel="alternate"></link><updated>2015-07-30T10:46:15+09:00</updated><author><name>shigepon</name></author><id>tag:blog.shigepon.info,2015-07-30:blog/2015/07/30/add-relation-to-existing-table-using-django/</id><summary type="html">&lt;p&gt;リレーションの理解が悪くて酷いコードを組んでいて、それを直した話。&lt;/p&gt;
&lt;p&gt;article&lt;/p&gt;
&lt;p&gt;|key|title|content|author_key|
|:-|-:|-:|-:|
|1|DjangoでHello World作ってみた|出来なかった！|1|&lt;/p&gt;
&lt;p&gt;author&lt;/p&gt;
&lt;p&gt;|key|name|
|:-|-:|
|1|shigepon|&lt;/p&gt;
&lt;p&gt;こんなテーブルがあって、author.keyとarticle.author_keyが繋がっている場合に
ArticleモデルをDjango使い始めの時はこんな風に作ってた&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# models.py&lt;/span&gt;
&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Article&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Model&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;IntegerField&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;primary_key&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;TextField&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;content&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;TextField&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;author_key&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;IntegerField&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;author&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;Author&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;objects&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;author_key&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Author&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Model&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;IntegerField&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;primary_key&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;TextField&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;いやー改めて見ると酷い。Articleを100個読み込んで、そのAuthorを出力するだけで、100回以上dbにアクセスしないといけない。という訳でこの酷いコードからリレーションを貼って、さらにdbアクセスが少なくなるように修正したらこうなった&lt;/p&gt;
&lt;p&gt;参考：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://docs.djangoproject.com/en/1.8/ref/models/fields/"&gt;Model field reference | Django documentation | Django&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.djangoproject.com/en/1.8/ref/models/querysets/"&gt;QuerySet API reference | Django documentation | Django&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# models.py&lt;/span&gt;
&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Article&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Model&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;IntegerField&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;primary_key&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;TextField&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;content&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;TextField&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;author&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ForeignKey&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Author&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;db_column&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;author_key&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;to_field&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;key&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;related_name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;articles&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Author&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Model&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;IntegerField&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;primary_key&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;TextField&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;こんな感じで適切にForeignKeyフィールドを設定することで、上の構成のテーブルにもリレーションを貼ることが出来た。db_columnでArticle側のリレーションキーになるカラムを指定して、to_fieldでAuthor側のリレーションキーになるカラムを指定する。related_nameは指定しないとエラーが出た。&lt;/p&gt;
&lt;p&gt;んで、dbアクセスがなるべく少なくなるように（sqlでjoinを組んでくれるように）views.pyを書いてみると&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# views.py&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;app.models&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Article&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;index&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;articles&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Article&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;objects&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;select_related&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;author&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;all&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="o"&gt;...&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;みたいにselect_relatedメソッドを使うとjoinしてくれた。prefetch_relatedってメソッドでも同じように出来る（ちょっと役割は違う）らしいが試していない。ざっくりドキュメントを読むと、ForeignKeyと１対１リレーションにはselect_relatedが良く、Many to ManyやMany to Oneにはprefetch_relatedが良いらしい。&lt;/p&gt;</summary><category term="django"></category><category term="python"></category></entry><entry><title>DjangoモデルをDjangoプロジェクトの外から使う</title><link href="http://blog.shigepon.info/blog/2015/07/28/use-django-model-outside-django-project/" rel="alternate"></link><updated>2015-07-28T16:43:55+09:00</updated><author><name>shigepon</name></author><id>tag:blog.shigepon.info,2015-07-28:blog/2015/07/28/use-django-model-outside-django-project/</id><summary type="html">&lt;p&gt;参考：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://d.hatena.ne.jp/shobonengine/20120103/1325535420"&gt;外部から Django プロジェクトのデータベースを操作する - ShobonEngineの日記&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/25537905/django-1-7-throws-django-core-exceptions-appregistrynotready-models-arent-load"&gt;python - Django 1.7 throws django.core.exceptions.AppRegistryNotReady: Models aren't loaded yet - Stack Overflow&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;モデルインポート前に以下の手順が必要&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;プロジェクトをsys.pathに追加&lt;/li&gt;
&lt;li&gt;DJANGO_SETTINGS_MODULE環境変数がプロジェクトのsettings.pyを指すように指定&lt;/li&gt;
&lt;li&gt;applicationのロードが必要? (上2つだけだとModels aren't loaded yetというエラーが出た)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;sys.pathにはフルパスを入れれば確実。必要なコードは下のような感じになる。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# encoding: UTF-8&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;sys&lt;/span&gt;
&lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;/path/to/django/project&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;os&lt;/span&gt;
&lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;environ&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;DJANGO_SETTINGS_MODULE&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;project.settings&amp;#39;&lt;/span&gt;

&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.core.wsgi&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;get_wsgi_application&lt;/span&gt;
&lt;span class="n"&gt;application&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;get_wsgi_application&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;application.models&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;AModel&lt;/span&gt;

&lt;span class="nb"&gt;list&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;AModel&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;objects&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;all&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</summary><category term="django"></category><category term="python"></category></entry><entry><title>なでしこ2でssl使うとthe authentication or decription has failedエラーが出る件</title><link href="http://blog.shigepon.info/blog/2015/07/20/nadesiko2-ssl-error-the-authentication-or-decription-has-failed/" rel="alternate"></link><updated>2015-07-20T20:12:34+09:00</updated><author><name>shigepon</name></author><id>tag:blog.shigepon.info,2015-07-20:blog/2015/07/20/nadesiko2-ssl-error-the-authentication-or-decription-has-failed/</id><summary type="html">&lt;p&gt;結論から言うとmonoの問題だった。&lt;/p&gt;
&lt;p&gt;参考：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://d.hatena.ne.jp/unarist/20110601/1306945858"&gt;MonoでSSL接続しようとしたら怒られた - うなてっくろぐ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://ramorenoc.wordpress.com/2012/12/05/the-authentication-or-decryption-has-failed-mono/"&gt;The authentication or decryption has failed – Mono | Code Adventures&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://ubuntuforums.org/showthread.php?t=1841740"&gt;Problems using SSL in C#&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;なでしこ2でsslにアクセスするとエラーが出る&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;「https://どこかhttpsでアクセスするurl」からHTTPデータ取得してそれを表示
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;エラーメッセージはこんな感じ&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;[SystemError]Error getting response stream (Write: The authentication or decryption has failed.): SendFailure  at System.Net.HttpWebRequest.EndGetResponse (IAsyncResult asyncResult) [0x00000] in &amp;lt;filename unknown&amp;gt;:0 
  at System.Net.HttpWebRequest.GetResponse () [0x00000] in &amp;lt;filename unknown&amp;gt;:0 
  at System.Net.WebClient.GetWebResponse (System.Net.WebRequest request) [0x00000] in &amp;lt;filename unknown&amp;gt;:0 
  at System.Net.WebClient.ReadAll (System.Net.WebRequest request, System.Object userToken) [0x00000] in &amp;lt;filename unknown&amp;gt;:0 
  at System.Net.WebClient.DownloadDataCore (System.Uri address, System.Object userToken) [0x00000] in &amp;lt;filename unknown&amp;gt;:0
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;調べてみると、コードで何とかなるというのがまず出て来たので、試してみたら対処出来た。C#のコードはこんな感じ&lt;/p&gt;
&lt;p&gt;```c#
public Object _dataGet(INakoFuncCallInfo info)
{
    System.Net.ServicePointManager.ServerCertificateValidationCallback += (s,ce,ca,p) =&amp;gt; true;
    ....
}&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;ただし、この対処だと&lt;/span&gt;&lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="err"&gt;アクセスと&lt;/span&gt;&lt;span class="n"&gt;https&lt;/span&gt;&lt;span class="err"&gt;アクセスが大差なくなるみたいなことが書いてあったので、これじゃいかんなともうちょっと調べてみると、要は&lt;/span&gt;&lt;span class="n"&gt;mono&lt;/span&gt;&lt;span class="err"&gt;にルート証明書がインストールされてなかったのが原因らしかった。対処法は参考にしたページほぼそのままで&lt;/span&gt;

&lt;span class="sb"&gt;``&lt;/span&gt;&lt;span class="err"&gt;`&lt;/span&gt;&lt;span class="n"&gt;sh&lt;/span&gt;
&lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="n"&gt;mozroots&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;sync&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;サードパーティーの認証を受入れる場合は&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ certmgr -ssl https://どこかhttpsでアクセスするドメイン
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;この認証本当に受入れていいの？みたいなメッセージが出たら「y」を押せばおk&lt;/p&gt;</summary><category term="nadesiko2"></category><category term="CSharp"></category></entry><entry><title>なでしこ2でradikoの録音をやってみた</title><link href="http://blog.shigepon.info/blog/2015/07/19/record-radiko-with-nadesiko2/" rel="alternate"></link><updated>2015-07-19T17:22:00+09:00</updated><author><name>shigepon</name></author><id>tag:blog.shigepon.info,2015-07-19:blog/2015/07/19/record-radiko-with-nadesiko2/</id><summary type="html">&lt;p&gt;ネット上でラジオを聞けるサービス&lt;a href="http://radiko.jp/"&gt;radiko&lt;/a&gt;の録音ソフトが調子悪くなったので、自分で作ってみるかーとやってみたら出来たのでメモ。OSはUbuntu 12.04で、cui環境で行った。&lt;/p&gt;
&lt;p&gt;参考：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://gist.github.com/matchy2/3956266"&gt;簡易Radiko録音スクリプト&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://d.hatena.ne.jp/zariganitosh/20130124/rtmpdump_radiko_access"&gt;rtmpdumpでradikoにアクセスする手順 - ザリガニが見ていた...。&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://lifeonubuntu.com/ubuntu-missing-add-apt-repository-command/"&gt;Ubuntu Missing add-apt-repository command&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.ubuntugeek.com/how-to-install-swftools-in-ubuntu-12-0411-10-using-ppa.html"&gt;How to install SWFTools in ubuntu 12.04/11.10 using PPA | Ubuntu Geek&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Radiko録音スクリプトをまず参考にしたが、実際に手順を手作業で追いたかったので、参考記事を見ながら再現してみた。するとまずswfextractコマンドが無くてつまずく。ぐぐるとaptのリポジトリを追加してインストールする必要があるらしい。しかもリポジトリ追加用コマンドも無いのでインストールする必要があった。swfextractを使えるようになるまでの手順は以下の通り&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ sudo aptitude install software-properties-common python-software-properties
$ sudo add-apt-repository ppa:guilhem-fr/swftools
$ sudo aptitude update
$ sudo aptitude install swftools
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;あとは参考ページの手順通りで録音出来た。&lt;a href="http://www.dcc-jpl.com/foltia/wiki/radikomemo"&gt;radikomemo - foltia - Trac&lt;/a&gt;で放送局のid（xml取得に使ったりする）をチェックした。&lt;/p&gt;
&lt;p&gt;で、あとは一連の処理をなぞるスクリプトを書くだけ。pythonとかはググればあるので、なでしこ2でやってみた。&lt;/p&gt;
&lt;p&gt;&lt;a href="https://gist.github.com/shigepon/01acb8686e6df6accce2"&gt;record_radiko.nako&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;gistを初めて使うので、こんなやり方で良いのかちょっと分からないけどこんな感じ。wgetとかddとかコマンドをそのまま使ってるので、windowsでは動かないはず。なでしこ2では7/19時点ではpostでヘッダー指定するとか出来ないので、こうせざるを得ない。&lt;/p&gt;
&lt;p&gt;なでしこ2の一例ということで。ちなみにこれ作るのに3時間かかった。うち1時間半がググってインストールして手作業で動作確認に使って、1時間は休憩に使った。エラー処理とかtmpファイルの処理とか全然やってない適当コードですんません＞＜。&lt;/p&gt;</summary><category term="nadesiko2"></category><category term="linux"></category></entry><entry><title>Djangoで複数データベースを使用する</title><link href="http://blog.shigepon.info/blog/2015/07/07/use-multiple-databases-in-django/" rel="alternate"></link><updated>2015-07-07T12:33:37+09:00</updated><author><name>shigepon</name></author><id>tag:blog.shigepon.info,2015-07-07:blog/2015/07/07/use-multiple-databases-in-django/</id><summary type="html">&lt;p&gt;Djangoでは複数データベースを扱える。でも色々コーディングや設定が必要なのでメモしておく。参考：&lt;a href="https://docs.djangoproject.com/en/1.7/topics/db/multi-db/"&gt;Multiple databases | Django documentation | Django&lt;/a&gt;。対応バージョンはDjango 1.7。使ったデータベースはPostgreSQL。&lt;/p&gt;
&lt;h2&gt;settings.py&lt;/h2&gt;
&lt;p&gt;settings.pyで複数データベースの接続設定をする&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# settings.py&lt;/span&gt;
&lt;span class="n"&gt;DATABASES&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;default&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="s1"&gt;&amp;#39;NAME&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;app_data&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s1"&gt;&amp;#39;ENGINE&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;django.db.backends.postgresql_psycopg2&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s1"&gt;&amp;#39;USER&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;postgres_user&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s1"&gt;&amp;#39;PASSWORD&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;s3krit&amp;#39;&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;users&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="s1"&gt;&amp;#39;NAME&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;user_data&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s1"&gt;&amp;#39;ENGINE&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;django.db.backends.mysql&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s1"&gt;&amp;#39;USER&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;mysql_user&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s1"&gt;&amp;#39;PASSWORD&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;priv4te&amp;#39;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;参考ページのをそのまま使った。さらに追加も出来る。&lt;/p&gt;
&lt;h2&gt;ここまでの設定でのマイグレーション&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ python manage.py migrate
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;だとdefault設定のデータベースへのマイグレーション、&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ python manage.py migrate --database&lt;span class="o"&gt;=&lt;/span&gt;users
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;とするとusersで設定したデータベースへのマイグレーションとなる。
何も設定していないと、それぞれのデータベースに全アプリケーションの全てのモデルが反映される。&lt;/p&gt;
&lt;h2&gt;データベースに保存するアプリ、モデルを限定したい&lt;/h2&gt;
&lt;p&gt;ルーティング設定をする。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# settings.py&lt;/span&gt;
&lt;span class="n"&gt;DATABASE_ROUTERS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;myproject.routers.Router&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;settings.pyはこんな感じ。んでmyprojectフォルダにrouters.pyを作成して例えばuserアプリのものだけusersデータベースを使うという設定の場合次のように書く&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# routers.py&lt;/span&gt;
&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Router&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;db_for_read&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;model&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;hints&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="c1"&gt;#ここでランダムに選択すると、dbの負荷分散っぽいことが出来る&lt;/span&gt;
        &lt;span class="c1"&gt;#例：return random.choice[&amp;#39;default&amp;#39;,&amp;#39;users&amp;#39;]&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;model&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_meta&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;app_label&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;user&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;users&amp;quot;&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;default&amp;quot;&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;db_for_write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;model&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;hints&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;model&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_meta&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;app_label&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;user&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;users&amp;quot;&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;default&amp;quot;&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;allow_relation&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;obj1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;obj2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;hints&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="c1"&gt;#Trueはリレーションを認める、Falseは認めない、Noneはこのコードでは関知しないという意味&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;allow_migrate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;model&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="c1"&gt;#userアプリの場合はusers設定のデータベースへmigrate。&lt;/span&gt;
        &lt;span class="c1"&gt;#他のアプリはusers以外のデータベースへmigrateする設定&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;model&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_meta&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;app_label&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;user&amp;quot;&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;users&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;routers.pyをちゃんと書かないと、色々不具合が出る（例：管理用のモデルがmigrateできないとか）ので気をつけた方が良い。&lt;/p&gt;
&lt;p&gt;上に紹介した参考ページには色々コードが書いてあるので、参考になる。&lt;/p&gt;</summary><category term="python"></category><category term="django"></category><category term="PostgreSQL"></category></entry><entry><title>Django1.7でPostgreSQLとBootstrap使ったアプリを作ってみた(1.5):管理ページを作ってみた</title><link href="http://blog.shigepon.info/blog/2015/07/03/make-admin-page-using-django/" rel="alternate"></link><updated>2015-07-03T21:59:10+09:00</updated><author><name>shigepon</name></author><id>tag:blog.shigepon.info,2015-07-03:blog/2015/07/03/make-admin-page-using-django/</id><summary type="html">&lt;p&gt;Django1.6.5でアプリを作ってみたってネタをやってたけど、Django1.7にバージョンアップしたので、タイトルを変えた。ついでにDjango1.7だとINSTALLED_APPにdjango.contrib.authを入れておかないとエラーが出るケースがある（例えば&lt;a href="http://www.django-rest-framework.org/"&gt;Django REST framework&lt;/a&gt;でエラーが出た）ので、エラー出ないように最初に管理ページを用意しておくと良いと思う。&lt;/p&gt;
&lt;p&gt;管理ページを用意する手順はこんな感じ&lt;/p&gt;
&lt;h2&gt;settings.pyに設定を書く&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# settings.py&lt;/span&gt;
&lt;span class="n"&gt;INSTALLED_APPS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;django.contrib.admin&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;django.contrib.auth&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="o"&gt;...&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;MIDDLEWARE_CLASSES&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;django.contrib.auth.middleware.AuthenticationMiddleware&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="o"&gt;...&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;TEMPLATE_CONTEXT_PROCESSORS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;django.contrib.auth.context_processors.auth&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="o"&gt;...&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;migrate&lt;/h2&gt;
&lt;p&gt;マイグレーションしておく&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ python manage.py makemigrations
$ python manage.py migrate
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;マルチデータベースでやろうとして反映されずにハマったりしたけど、それはまた別の記事で書くかも&lt;/p&gt;
&lt;h2&gt;管理アカウントを作る&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ python manage.py createsuperuser
Username: hoge
Email address: hoge@example.com
Password: ********
Password &lt;span class="o"&gt;(&lt;/span&gt;again&lt;span class="o"&gt;)&lt;/span&gt;: ********
Superuser created successfully.
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;って出来るとおk&lt;/p&gt;
&lt;h2&gt;urls.pyを書く&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# urls.py&lt;/span&gt;
&lt;span class="n"&gt;urlpatterns&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;patterns&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;r&amp;#39;^admin/&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;include&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;admin&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;site&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;urls&lt;/span&gt;&lt;span class="p"&gt;)),&lt;/span&gt;
    &lt;span class="o"&gt;...&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;こんな感じで作って&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ python manage.py runserver
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;とすると、127.0.0.1/adminにアクセスすると管理画面へのログイン画面が出る。&lt;/p&gt;</summary><category term="django"></category><category term="python"></category></entry><entry><title>djangoをプロファイリングする</title><link href="http://blog.shigepon.info/blog/2015/07/01/profiling-django/" rel="alternate"></link><updated>2015-07-01T09:06:13+09:00</updated><author><name>shigepon</name></author><id>tag:blog.shigepon.info,2015-07-01:blog/2015/07/01/profiling-django/</id><summary type="html">&lt;p&gt;作ってるWebサービスが条件によってえらい重くなるので、ボトルネックを探すためにプロファイラを動かしてみようと考えてやってみたらそこそこハマった。&lt;/p&gt;
&lt;p&gt;先に結論：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Middleware使ってブラウザに表示させるのが楽だった&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;条件&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;cui環境なので、プロファイル結果は画像作るかブラウザ表示するかのどちらか&lt;/li&gt;
&lt;li&gt;コードに埋めこまない形&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;まず参考にしたのは公式ページの&lt;a href="https://code.djangoproject.com/wiki/ProfilingDjango"&gt;ProfilingDjango – Django&lt;/a&gt;。ざっくりとした結果が知りたかったのでrunprofileserverを試してみることにした。&lt;/p&gt;
&lt;h2&gt;開発サーバでやってみる（runprofileserver）&lt;/h2&gt;
&lt;p&gt;django-extensionの一機能で&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ pip install django-extensions
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;でインストールして、&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# settings.py&lt;/span&gt;
&lt;span class="n"&gt;INSTALLED_APP&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;...&lt;/span&gt;
   &lt;span class="s1"&gt;&amp;#39;django_extensions&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;で設定して&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ python manage.py runprofileserver
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;とすると、よしなに/tmpフォルダ内にプロファイル結果を吐き出してくれる開発用サーバだそうで、これは便利そうと思い、やってみた。&lt;/p&gt;
&lt;h3&gt;結果を画像にしようとしてハマる&lt;/h3&gt;
&lt;p&gt;プロファイル結果からgraphviz通して画像にしたらブラウザから確認出来るし楽なんじゃね？とか良く考えると不毛なことを考えたのが間違いのもと。普通にKCacheGrind使ってろって話なんだけど、やってみた&lt;/p&gt;
&lt;p&gt;ツールとして使ったもの&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/jrfonseca/gprof2dot"&gt;gprof2dot&lt;/a&gt;、プロファイル結果をdotファイルに変換する&lt;/li&gt;
&lt;li&gt;graphviz、dotファイルを画像に変換する&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;話にならなかったもの（良く考えるとこのケースで使えないの当たり前なのに使おうとして失敗したもの）&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;xdebugtoolkit、単純にxdebugの結果でないとそりゃ使えないよねと納得した&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;あまり良く分かってなかったので、KCacheGrind互換で出力しておけば、色んなソフト使ってよしなに出来るんじゃね？と思ってみた。んでKCacheGrind互換出力ってcallgrind形式ってことだよね！と勝手に思い込んでた&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ python manage.py runprofileserver --kcachegrind
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;おもむろにdotファイルに変換!&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ path/to/gprof2dot -o out.dot -f callgrind /tmp/xxx.prof
....
AssertionError
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;うまくいかない。何かの計算値がこうなるはずなのにならないよ！とか怒られてる。って良く考えたらKCacheGrind互換の出力がcallgrind形式って保証がどこにもない！&lt;/p&gt;
&lt;p&gt;ってことで、あれこれドキュメント読んでたら、runprofileserverはhotshot使ってるとか何とか書いてあるから、何も指定しなかったらhotshotでの形式になる・・・ってことは全然説明されてないけど-fのオプションはpstatsで良いんじゃね？&lt;/p&gt;
&lt;p&gt;と勝手に予想して&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ python manage.py runprofileserver
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ path/to/gprof2dot -o out.dot -f pstats /tmp/xxx.prof
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;とやるとout.dotが出来ましたとさ。あとは色んなとこに書いてある（例えば&lt;a href="http://stackoverflow.com/questions/9279144/interpreting-callgrind-data"&gt;ここ&lt;/a&gt;）ように、dotファイルを画像ファイルに変換すると、ちゃんと画像が出来上がった。&lt;/p&gt;
&lt;p&gt;ただ・・・・、まだ設定分かってないからだと思うんだけど、出来上がった画像にはviewやmodelのメソッドが一切書かれておらず、この情報だけからボトルネック探すのかなりキツイんじゃね？ということだけが分かった。&lt;/p&gt;
&lt;h3&gt;同一ドメインのurlを内部で呼び出してハマる&lt;/h3&gt;
&lt;p&gt;何故かURLによってプロファイル作るのが途中で止まって、サーバもレスポンスを返してくれなくなった。問題箇所を調べると、どうも内部で同じrunprofileserverで管理しているurlにアクセスすると止まっちゃう模様。別サーバを立てて、そこにアクセスするようにすれば、問題無く動作した。&lt;/p&gt;
&lt;h2&gt;手間なのでMiddlewareでプロファイルすることにした&lt;/h2&gt;
&lt;p&gt;いちいち開発中の状態なのにサーバ2つ立てて面倒だったり、結局作った画像見ても良く分からなかったので、今度はMiddlewareに埋め込むタイプを試してみた。&lt;/p&gt;
&lt;h3&gt;取りあえず動かなくてハマる&lt;/h3&gt;
&lt;p&gt;Extendedって書いてあるしということで&lt;a href="https://djangosnippets.org/snippets/605/"&gt;djangosnippets: Extended Profiling Middleware&lt;/a&gt;を試してみた。&lt;/p&gt;
&lt;p&gt;手順は&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;↑のページのファイルをダウンロード（コード右上にダウンロードボタンがある）&lt;/li&gt;
&lt;li&gt;適当な名前を付けてimport出来る適当な場所に配置。（オラはmodulesってとこにprofiler.pyという名前を付けて置いてみた）&lt;/li&gt;
&lt;li&gt;settings.pyにmiddlewareを登録する&lt;/li&gt;
&lt;li&gt;プロファイルしたいURLにprof=というパラメータを付けてブラウザでアクセスする&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;って感じ。settings.pyは&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# settings.py&lt;/span&gt;
&lt;span class="n"&gt;MIDDLEWARE_CLASSES&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;modules.profiler.ProfileMiddleware&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;こんな感じ。で、上のようにブラウザでアクセスするとエラー・・・&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;AttributeError: &amp;#39;WSGIRequest&amp;#39; object has no attribute &amp;#39;has_key&amp;#39;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;なので、コード上で&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;has_key&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;となっているところを&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;GET&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;has_key&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;と変更すると上手く動いた。ProfileMiddlewareのページ内コメントを見ると&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;prof&amp;#39;&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;GET&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;と変更しても動くらしい。んで、プロファイルしたいurlにprof=をパラメータとして付けてアクセスすると、ブラウザ上に&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;47793 function calls (42681 primitive calls) in 0.907 seconds

   Ordered by: internal time, call count

   ncalls  tottime  percall  cumtime  percall filename:lineno(function)
        3    0.608    0.203    0.608    0.203 /path/to/python/local/lib/python/site-packages/django/db/backends/utils.py:58(execute)
       30    0.112    0.004    0.112    0.004 /usr/lib/python/socket.py:406(readline)
       12    0.050    0.004    0.050    0.004 /usr/lib/python/socket.py:223(meth)
....
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;という形でプロファイルが表示出来た。もーこれでいーや。ということでやったのはここまで。まだまだだけど、取りあえずプロファイル結果を出すまでだけでハマったし、次回やっても同じようにハマりそうなのでメモしておく。&lt;/p&gt;</summary><category term="python"></category><category term="django"></category></entry><entry><title>Jenkinsでなでしこ2をCIする</title><link href="http://blog.shigepon.info/blog/2015/05/08/nadesiko2-continuous-integration-with-jenkins/" rel="alternate"></link><updated>2015-05-08T09:19:18+09:00</updated><author><name>shigepon</name></author><id>tag:blog.shigepon.info,2015-05-08:blog/2015/05/08/nadesiko2-continuous-integration-with-jenkins/</id><summary type="html">&lt;p&gt;&lt;a href="http://blog.shigepon.info/blog/2015/05/05/nunit-console-test-for-nadesiko2/"&gt;なでしこ2をubuntu cuiでテストする - shigeponが関心のある技術情報など&lt;/a&gt;
までやったので、CIできると便利かなと思ってやってみた。と言いつつ、単にやってみたかっただけ。mono developとかvisual studio使って開発する場合も同じように出来ると思う。例によって環境はUbuntu 12.04&lt;/p&gt;
&lt;p&gt;参考：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://d.hatena.ne.jp/Crest/20121220/1356023823"&gt;.NETとJenkinsで始めるCI開発 - CREST’S WEBLOG&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://blog.bekijkhet.com/2013/01/create-mono-c-buildserver-using-jenkins.html"&gt;Create a Mono C# Buildserver using Jenkins and GitHub ~ BroersA Blog&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;1. Jenkinsインストール&lt;/h2&gt;
&lt;p&gt;(略) 追記するかも？&lt;/p&gt;
&lt;!-- more --&gt;

&lt;h2&gt;2. Jenkins設定&lt;/h2&gt;
&lt;!-- more --&gt;

&lt;h3&gt;一般&lt;/h3&gt;
&lt;p&gt;(略) 追記するかも？&lt;/p&gt;
&lt;h3&gt;C#関連&lt;/h3&gt;
&lt;p&gt;Jenkins &amp;gt; Jenkinsの管理 &amp;gt; プラグインの管理 &amp;gt; 利用可能(タブ)&lt;/p&gt;
&lt;p&gt;からプラグインをインストールする。インストールするプラグインは&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;GIT Plugin&lt;/li&gt;
&lt;li&gt;MSBuild Plugin&lt;/li&gt;
&lt;li&gt;NUnit plugin&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Jenkins &amp;gt; Jenkinsの管理 &amp;gt; システム設定&lt;/p&gt;
&lt;p&gt;から&lt;/p&gt;
&lt;p&gt;MSBuildの項目を編集。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;インストール済みMSBuild...をクリック&lt;/li&gt;
&lt;li&gt;name&lt;/li&gt;
&lt;li&gt;適当（とりあえず「mono」とした）&lt;/li&gt;
&lt;li&gt;Path to MSBuild&lt;/li&gt;
&lt;li&gt;/usr/bin/xbuild  (Warning出るけど気にしない)&lt;/li&gt;
&lt;li&gt;Default Parameters&lt;/li&gt;
&lt;li&gt;なし(Debugでビルドするかとか指定したりするかも。) &lt;/li&gt;
&lt;li&gt;適用ボタンを押す&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Gitの項目は編集したか覚えてないけど&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Path to Git executable&lt;/li&gt;
&lt;li&gt;/usr/bin/git&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;くらいやっとけばいいかも？　&lt;/p&gt;
&lt;h2&gt;3. プロジェクト作成&lt;/h2&gt;
&lt;p&gt;Jenkins &amp;gt; 新規ジョブ作成　から&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ジョブ名&lt;/li&gt;
&lt;li&gt;適当(nadesiko2とか付けてみた)&lt;/li&gt;
&lt;li&gt;フリースタイル・プロジェクトのビルドを選択&lt;/li&gt;
&lt;li&gt;OKボタンを押す&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;4. プロジェクト設定&lt;/h2&gt;
&lt;p&gt;プロジェクトの設定画面に移動するので編集。Jenkins &amp;gt; プロジェクト(今回はnadesiko2) &amp;gt; 設定　からいつでも編集可能。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ソースコード管理&lt;/li&gt;
&lt;li&gt;Gitを選択&lt;/li&gt;
&lt;li&gt;Repository URL&lt;/li&gt;
&lt;li&gt;なでしこ2のリポジトリの場所。今回は&lt;a href="http://blog.shigepon.info/blog/2015/05/01/develop-nadesiko2-on-ubuntu-cui/"&gt;ubuntuのcui環境でなでしこ2をビルドする - shigeponが関心のある技術情報など&lt;/a&gt;の続きなので/home/username/nadesiko2&lt;/li&gt;
&lt;li&gt;Branches to build&lt;/li&gt;
&lt;li&gt;なでしこ2では変更点はpull requestする予定なので、pull requestする時のブランチを指定した。ここは色んな設定がありえる。&lt;/li&gt;
&lt;li&gt;ビルド・トリガ&lt;/li&gt;
&lt;li&gt;SCMをポーリングを選択&lt;/li&gt;
&lt;li&gt;スケジュール&lt;/li&gt;
&lt;li&gt;H/30 * &lt;em&gt; * &lt;/em&gt; (大体30分おき)&lt;/li&gt;
&lt;li&gt;ビルド&lt;/li&gt;
&lt;li&gt;ビルド手順の追加 &amp;gt; Build a Visual Studio project or solution using MSBuild&lt;/li&gt;
&lt;li&gt;Build a Visual Studio project or solution using MSBuildの設定&lt;/li&gt;
&lt;li&gt;MSBuild Version&lt;ul&gt;
&lt;li&gt;monoを選択&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;MSBuild Build File&lt;ul&gt;
&lt;li&gt;cnakoのソリューションファイルとしてNako2_CNako.slnを指定した。プラグインのソリューションファイルでも出来ると思う&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;ビルド手順の追加 &amp;gt; シェルの実行(Windowsだと多分Windowsバッチコマンドの実行)&lt;/li&gt;
&lt;li&gt;シェルの実行&lt;/li&gt;
&lt;li&gt;nunit-console $WORKSPACE/CNako2Test/bin/Debug/CNako2Test.dll -xml cnako2test.xml -noshadow&lt;/li&gt;
&lt;li&gt;ビルド後の処理&lt;/li&gt;
&lt;li&gt;ビルド後の処理の追加 &amp;gt; Publish NUnit test result report&lt;/li&gt;
&lt;li&gt;cnako2test.xml&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;5. 実行&lt;/h2&gt;
&lt;p&gt;Jenkins &amp;gt; プロジェクト(今回はnadesiko2)
で、ビルド実行をクリックすると実行してくれる。あと、gitの指定したブランチでコミットした後もこの設定の場合30分おきにコミットをチェックしてビルドを実行してくれる。まだまだテストが通ってない部分もあるので、結果は失敗になるけど、とりあえずこれで進められる。&lt;/p&gt;</summary><category term="nadesiko2"></category><category term="linux"></category><category term="test1st"></category></entry><entry><title>なでしこ2をubuntu cuiでテストする</title><link href="http://blog.shigepon.info/blog/2015/05/05/nunit-console-test-for-nadesiko2/" rel="alternate"></link><updated>2015-05-05T23:02:32+09:00</updated><author><name>shigepon</name></author><id>tag:blog.shigepon.info,2015-05-05:blog/2015/05/05/nunit-console-test-for-nadesiko2/</id><summary type="html">&lt;p&gt;&lt;a href="http://blog.shigepon.info/blog/2015/05/01/develop-nadesiko2-on-ubuntu-cui/"&gt;ubuntuのcui環境でなでしこ2をビルドする&lt;/a&gt;の続きで、cui環境でなでしこ2のテストを実行してみる。&lt;/p&gt;
&lt;p&gt;cui環境でnunitを実行するには&lt;a href="http://www.nunit.org/index.php?p=nunit-console&amp;amp;r=2.5.10"&gt;nunit-console&lt;/a&gt;を使う。なでしこ2のテストを実行するにはテスト関連のdllをnunitで実行すると良い。コマンドはなでしこ2をインストールしたディレクトリでこんな感じ。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ nunit-console CNako2Test/bin/Debug/CNako2Test.dll
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;プラグインのテスト(NakoPluginTest)プロジェクトでは外部ファイルを利用するので&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ nunit-console NakoPluginTest/bin/Debug/NakoPluginTest.dll
&lt;/pre&gt;&lt;/div&gt;


&lt;!-- more --&gt;

&lt;p&gt;だと、外部ファイルを読み込むテスト（例えばTest_read）で、Could not find fileと怒られる。なので、コマンドにnoshadowオプションを付ける。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ nunit-console -noshadow NakoPluginTest/bin/Debug/NakoPluginTest.dll
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;とすると、外部ファイルを読み込んでくれる。
これでcui環境でなでしこ2をビルドからテストまで出来る。&lt;/p&gt;</summary><category term="nadesiko2"></category><category term="linux"></category></entry><entry><title>ubuntuのcui環境でなでしこ2をビルドする</title><link href="http://blog.shigepon.info/blog/2015/05/01/develop-nadesiko2-on-ubuntu-cui/" rel="alternate"></link><updated>2015-05-01T08:23:00+09:00</updated><author><name>shigepon</name></author><id>tag:blog.shigepon.info,2015-05-01:blog/2015/05/01/develop-nadesiko2-on-ubuntu-cui/</id><summary type="html">&lt;p&gt;今までmono developでなでしこ2をビルド、テストして、cui環境にアップロードしてたんだけど、面倒になってきたのでcui環境で直接ビルド、テストしてみようと思ったのでついでに開発を始める段階からメモしてみる。&lt;/p&gt;
&lt;p&gt;環境はubuntu 12.04とするが、上位バージョンでも問題無いはず&lt;/p&gt;
&lt;h1&gt;mono環境の準備&lt;/h1&gt;
&lt;p&gt;mono-develをインストールしたらmono関連で必要なものは勝手にインストールされたような気がする。ついでに&lt;a href="http://blog.shigepon.info/blog/2014/08/20/vb-not-work-on-ubuntu/"&gt;VisualBasicが動かない件&lt;/a&gt;にあるように、mono-vbnc、あとはnunitのインストール&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ aptitude install mono-devel mono-vbnc nunit
&lt;/pre&gt;&lt;/div&gt;


&lt;!-- more --&gt;

&lt;!-- more --&gt;

&lt;h1&gt;なでしこ2リポジトリを取得&lt;/h1&gt;
&lt;p&gt;&lt;a href="http://it.slashdot.jp/story/15/03/13/0340256/"&gt;Google Codeが2016年1月に閉鎖される&lt;/a&gt;ので、なでしこ2のリポジトリはgithubに移動している。&lt;/p&gt;
&lt;p&gt;なので、リポジトリの取得はgit cloneでいける。kujirahandさんのリポジトリをcloneするなら&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ git clone https://github.com/kujirahand/nadesiko2.git
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;shigeponがfolkしたリポジトリなら&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ git clone https://github.com/shigepon/nadesiko2.git
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;で、カレントディレクトリにnadesiko2ディレクトリが出来て、その下にプロジェクト1式が入っている。中にはソリューションが3つあり、それぞれ&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Nako2_CNako.sln → cui環境で動かすなでしこ2(cnako)関連&lt;/li&gt;
&lt;li&gt;Nako2_Plugins.sln → なでしこ2のプラグイン関連&lt;/li&gt;
&lt;li&gt;Nako2_Plugins_Office.sln → なでしこ2のOffice関係プラグイン&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;のソリューションである。今回は\/home\/usernameディレクトリ上でcloneすると考える&lt;/p&gt;
&lt;h1&gt;おもむろにビルド&lt;/h1&gt;
&lt;p&gt;kujirahandさんのリポジトリをcloneしたとして、とりあえず何もせずにCNakoのソリューションをビルドしてみると&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ xbuild Nako2_CNako.sln
...
NakoPluginArrayTest.cs&lt;span class="o"&gt;(&lt;/span&gt;9,7&lt;span class="o"&gt;)&lt;/span&gt;: error CS0246: The &lt;span class="nb"&gt;type&lt;/span&gt; or namespace name &lt;span class="sb"&gt;`&lt;/span&gt;NUnit&lt;span class="err"&gt;&amp;#39;&lt;/span&gt; could not be found. Are you missing a using directive or an assembly reference?
...
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;みたいなエラーメッセージを出してビルド出来ない。一方でプラグイン関連のソリューションは&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ xbuild Nako2_Plugins.sln
...
    &lt;span class="m"&gt;18&lt;/span&gt; Warning&lt;span class="o"&gt;(&lt;/span&gt;s&lt;span class="o"&gt;)&lt;/span&gt;
     &lt;span class="m"&gt;0&lt;/span&gt; Error&lt;span class="o"&gt;(&lt;/span&gt;s&lt;span class="o"&gt;)&lt;/span&gt;
Time Elapsed 00:00:06.1095450
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;と出て、エラー無くビルド出来る。この違いはそれぞれのソリューションで参照しているテストプロジェクトにnunitへの参照パスが入っているかどうかの違いだったので、NakoPluginTest/NakoPluginTest.csprojを参考にしてCNakoTest/CNakoTest.csprojの&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;lt;Reference Include=&amp;quot;nunit.framework.extensions, ...&amp;quot; /&amp;gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;行に３行追記する&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;   &lt;span class="nt"&gt;&amp;lt;Reference&lt;/span&gt; &lt;span class="na"&gt;Include=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;nunit.framework&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
       &lt;span class="nt"&gt;&amp;lt;HintPath&amp;gt;&lt;/span&gt;..\..\..\..\usr\lib\mono\gac\nunit.framework\2.5.10.0__96d09a1eb7f44a77\nunit.framework.dll&lt;span class="nt"&gt;&amp;lt;/HintPath&amp;gt;&lt;/span&gt;
   &lt;span class="nt"&gt;&amp;lt;/Reference&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;で、再度ビルドするとビルド出来た。shigeponのリポジトリには修正したものをアップしておくのでそのままビルド出来ると思う。パスはリポジトリをcloneするディレクトリによっては変更しないといけないと思う。&lt;/p&gt;</summary><category term="nadesiko2"></category><category term="linux"></category></entry><entry><title>PythonでSparql使ってLinked Open Dataをいじってみた</title><link href="http://blog.shigepon.info/blog/2015/03/19/use-sparql-with-python/" rel="alternate"></link><updated>2015-03-19T22:07:12+09:00</updated><author><name>shigepon</name></author><id>tag:blog.shigepon.info,2015-03-19:blog/2015/03/19/use-sparql-with-python/</id><summary type="html">&lt;p&gt;以前&lt;a href="http://blog.shigepon.info/blog/2014/11/25/kobe-dot-r-no-13/"&gt;Kobe.R no 13に参加してきました - shigeponが関心のある技術情報など&lt;/a&gt;でLinked Open Dataが気になってたので、Pythonでいじれるライブラリを探してみて遊んでみた。&lt;/p&gt;
&lt;p&gt;Sparqlで色々試してみると面白そうなので、pip search sparqlで出た結果とググってみた結果から、SPARQLWrapperが何となく良さげかなと思い、インストールしてみた。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ pip install SPARQLWrapper
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;これだけでおk&lt;/p&gt;
&lt;p&gt;djangoのshellから使ってみる&lt;/p&gt;
&lt;!-- more --&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="n"&gt;python&lt;/span&gt; &lt;span class="n"&gt;manage&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;py&lt;/span&gt; &lt;span class="n"&gt;shell&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;SPARQLWrapper&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;SPARQLWrapper&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;JSON&lt;/span&gt;
&lt;span class="n"&gt;sparql&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;SPARQLWrapper&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;http://dbpedia.org/sparql&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;sparql&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setQuery&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class="s2"&gt;  PREFIX rdfs: &amp;lt;http://www.w3.org/2000/01/rdf-schema#&amp;gt;&lt;/span&gt;
&lt;span class="s2"&gt;  SELECT ?label&lt;/span&gt;
&lt;span class="s2"&gt;  WHERE { &amp;lt;http://dbpedia.org/resource/Asturias&amp;gt; rdfs:label ?label }&lt;/span&gt;
&lt;span class="s2"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;sparql&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setReturnFormat&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;results&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;sparql&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;query&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;convert&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="err"&gt;!&lt;/span&gt;&lt;span class="o"&gt;--&lt;/span&gt; &lt;span class="n"&gt;more&lt;/span&gt; &lt;span class="o"&gt;--&amp;gt;&lt;/span&gt;

&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;results&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;results&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;bindings&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;label][&amp;quot;&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;])&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;とやるとこんな感じの結果が出た&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Asturias
منطقة أستورياس
Asturien
Asturias
Asturies
Asturie
アストゥリアス州
Asturië &lt;span class="o"&gt;(&lt;/span&gt;regio&lt;span class="o"&gt;)&lt;/span&gt;
Asturia
Astúrias
Астурия
阿斯图里亚斯
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;参考：&lt;a href="http://rdflib.github.io/sparqlwrapper/"&gt;SPARQL Endpoint interface to Python&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Sparqlの書き方は&lt;a href="http://kobexr.blogspot.jp/2014/12/kober-13-open-data.html"&gt;Kobe.R: Kobe.R #13 + Open Data&lt;/a&gt;に載っているスライドが参考になる。&lt;/p&gt;
&lt;p&gt;Linked Open Dataで１つ気になるのが、エンドポイントをどうやって探すかなんだけど、今の所ググってみるくらいしかやり方が分からない。ここらへん何か良い方法無いのかなー。&lt;/p&gt;</summary><category term="python"></category><category term="linkedopendata"></category></entry><entry><title>Django 1.6から1.7にアップデートしてみた</title><link href="http://blog.shigepon.info/blog/2015/03/09/migrate-from-django-1-dot-6-to-1-dot-7/" rel="alternate"></link><updated>2015-03-09T22:11:02+09:00</updated><author><name>shigepon</name></author><id>tag:blog.shigepon.info,2015-03-09:blog/2015/03/09/migrate-from-django-1-dot-6-to-1-dot-7/</id><summary type="html">&lt;p&gt;Djangoが去年の9月に1.7にバージョンアップしてて、今更ながらアップデートしてみた。色々教えて頂いた&lt;a href="https://twitter.com/key3"&gt;@key3&lt;/a&gt;さんに感謝！&lt;/p&gt;
&lt;p&gt;※注　アップデートの前に必ずデータとかソースとか色々バックアップしておくこと。&lt;/p&gt;
&lt;h2&gt;Django本体のアップデート&lt;/h2&gt;
&lt;p&gt;Djangoはpipで管理してるので、pipコマンドでアップデート出来る&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ pip install django -U
&lt;/pre&gt;&lt;/div&gt;


&lt;!-- more --&gt;

&lt;p&gt;これで本体はアップデート完了した。&lt;/p&gt;
&lt;!-- more --&gt;

&lt;h2&gt;プロジェクトをDjango1.7で動かす&lt;/h2&gt;
&lt;p&gt;何も変更せずにおもむろに&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ python manage.py runserver
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;とするとエラー出て動かなかった。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;raise AppRegistryNotReady(&amp;quot;Models aren&amp;#39;t loaded yet.&amp;quot;)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Tracebackを見てみるとどうもmodels.pyの中で&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# models.py&lt;/span&gt;
&lt;span class="n"&gt;admin&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;site&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;register&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Model&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;とかやってたのがまずかったみたいで、管理サイトで使うモデル定義などのコードをadmin.pyに移動したら上のエラーは出なくなった。何となくで書いてたらいかんな。ちなみにアップデートには関係無いけど、Django1.7で@admin.register(Model)というデコレーターが使えるようになったので、そっちに変えた方がスマートな気がする。&lt;/p&gt;
&lt;p&gt;次はSouthでマイグレーションやってるプロジェクトだったので、下のようなエラーが出た。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;raise RuntimeError&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;South does not support Django 1.7 or higher. Please use native Django migrations.&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;要はSouthはもうサポートしてないからDjango自身のマイグレーションでやってねということらしい。&lt;/p&gt;
&lt;p&gt;&lt;a href="https://docs.djangoproject.com/en/1.7/topics/migrations/#upgrading-from-south"&gt;Migrations | Django documentation | Django&lt;/a&gt;を見ながらやってみる。ざっくり手順を日本語で書いておく&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;マイグレーションの状態がちゃんと最新になっているか確認する&lt;/li&gt;
&lt;li&gt;settings.pyのINSTALLED_APPSの行から'south'を取り除く&lt;/li&gt;
&lt;li&gt;数字の付いたマイグレーションファイルを全て削除する。ディレクトリと__init__.pyは残す。.pycファイルも削除すること。&lt;/li&gt;
&lt;li&gt;python manage.py makemigrasionsを実行する。Djangoが空のマイグレーションディレクトリに新しい初期マイグレーションを作る。&lt;/li&gt;
&lt;li&gt;python manage.py migrateを実行する。Djangoは初期マイグレーションをチェックして、実行しないで適用済みにする。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;以上やってみたら、エラーは出ずにプロジェクトをDjango1.7に対応できた。めでたしめでたし。&lt;/p&gt;</summary><category term="python"></category><category term="django"></category></entry><entry><title>uwsgiメモ</title><link href="http://blog.shigepon.info/blog/2015/03/05/uwsgi-memo/" rel="alternate"></link><updated>2015-03-05T10:21:54+09:00</updated><author><name>shigepon</name></author><id>tag:blog.shigepon.info,2015-03-05:blog/2015/03/05/uwsgi-memo/</id><summary type="html">&lt;p&gt;uwsgi関連ではまった点などをメモ&lt;/p&gt;
&lt;h2&gt;invalid request block size&lt;/h2&gt;
&lt;p&gt;ajaxでサーバ側からデータを読み込むライブラリを使ってると、条件によって502エラーが出てる(=大体djangoとかのプログラム側のエラーで出る)ので、uwsgiのログを調べると、invalid request block sizeというエラーが出てた。&lt;/p&gt;
&lt;p&gt;んで、調べてみると、uwsgiがリクエストのサイズが大きすぎるとエラーを吐いているらしい。ライブラリ側で勝手にパラメーター付けて送られてリクエストのサイズが大きくなっているので、こりゃ調整しないとなということで調べてみた。起動時にオプション設定するか、iniファイルで設定したらいけるらしい&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ uwsgi --buffer-size&lt;span class="o"&gt;=&lt;/span&gt;xxxx
&lt;/pre&gt;&lt;/div&gt;


&lt;!-- more --&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;...&lt;/span&gt;
&lt;span class="na"&gt;buffer-size&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;xxxx&lt;/span&gt;
&lt;span class="err"&gt;...&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;!-- more --&gt;

&lt;p&gt;参考：&lt;a href="http://stackoverflow.com/questions/15878176/uwsgi-invalid-request-block-size"&gt;uwsgi invalid request block size - Stack Overflow&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;ログローテーション&lt;/h2&gt;
&lt;p&gt;uwsgi.iniに下のように書く&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;[uwsgi]&lt;/span&gt;
&lt;span class="na"&gt;daemonize&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;/path/to/uwsgi/log/hoge-@(exec://date +%%Y-%%m-%%d).log&lt;/span&gt;
&lt;span class="na"&gt;log-reopen&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;true&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;すると/path/to/uwsgi/log/hoge-xxxx-xx-xx.log （xx..は日付）というログファイルが出来る。&lt;/p&gt;
&lt;p&gt;参考：&lt;a href="http://stackoverflow.com/questions/28343262/how-to-create-one-uwsgi-log-file-per-day"&gt;logging - How to create one uwsgi log file per day? - Stack Overflow&lt;/a&gt;&lt;/p&gt;</summary><category term="uwsgi"></category><category term="django"></category><category term="memo"></category><category term="python"></category></entry><entry><title>突然サーバエラーが頻発したので、調べてみたらエラーログが原因だった</title><link href="http://blog.shigepon.info/blog/2015/03/03/error-log-make-php-error/" rel="alternate"></link><updated>2015-03-03T09:56:56+09:00</updated><author><name>shigepon</name></author><id>tag:blog.shigepon.info,2015-03-03:blog/2015/03/03/error-log-make-php-error/</id><summary type="html">&lt;p&gt;参考：&lt;a href="http://zapanet.info/blog/item/2489"&gt;PHPのエラーログが肥大してPHPが動かなくなった話&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;ある日、運用しているサービスがサーバエラーを頻出しだしたので、調べてみた。環境はUbuntu、nginx、php-fpm、postgresql。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;他のサーバへのdbアクセスがおかしくなったのかと思い、他の方法でdbアクセス→問題無し&lt;/li&gt;
&lt;li&gt;サービスを色々再起動してみた。→変化なし&lt;/li&gt;
&lt;li&gt;サーバを再起動。しばらくエラーでないが、しばらくするとエラーががが&lt;/li&gt;
&lt;li&gt;php-fpmを再起動。しばらくエラーでないが、しばらくするとエラーががが&lt;/li&gt;
&lt;li&gt;php周りかなと思ったので、phpのログを開く→開かない！&lt;/li&gt;
&lt;li&gt;良く見たらphp-fpmのログが2GB超えてた。ナンテコッタイ。&lt;/li&gt;
&lt;li&gt;ログを退避して、ローテーション設定して改めてphp-fpmを再起動したら直った。めでたしめでたし。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;メモがてらローテーション設定を書いておく&lt;/p&gt;
&lt;!-- more --&gt;

&lt;p&gt;/etc/logrotate.d/php.conf&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;/path/to/php5-fpm.log {
  daily
  missingok
  rotate 52
  compress
  delaycompress
  notifyempty
  create 0644 group username
  dateext
}
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;エラーチェックテストはこんな感じ&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;logrotate -dv /etc/logrotate.d/php.conf
&lt;/pre&gt;&lt;/div&gt;</summary><category term="rhaco"></category><category term="PHP"></category><category term="linux"></category></entry><entry><title>Kobe.R #15に参加しました</title><link href="http://blog.shigepon.info/blog/2015/03/01/kobe-dot-r-no-15/" rel="alternate"></link><updated>2015-03-01T10:57:17+09:00</updated><author><name>shigepon</name></author><id>tag:blog.shigepon.info,2015-03-01:blog/2015/03/01/kobe-dot-r-no-15/</id><summary type="html">&lt;p&gt;勉強会の話なので丁寧語で。2/28に&lt;a href="https://kobexr.doorkeeper.jp/events/20843"&gt;Kobe.R #15&lt;/a&gt;があったので参加してきました。今回は三宮で開かれました。今回は珍しく（？）Rの話題が多いR勉強会でした。抜けてる点もちょいちょいあると思いますが、覚えている限りの感想を書いておきます。&lt;/p&gt;
&lt;h2&gt;Rによるデータ処理入門&lt;/h2&gt;
&lt;p&gt;Kobe Rの主催者の河原さん（@h_kawahara）による発表でした。 データ読み込み、加工、表示までのRで解析する前に絶対必要な操作をまとめてくれました。大事なことはデータ加工≠データ整形ということかなと。何となく突っ込みどころを箇条書きにします&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;strがstructureの略称とか、stringの略称じゃないんだ！&lt;/li&gt;
&lt;li&gt;何度も言うけどforは遅い&lt;/li&gt;
&lt;li&gt;db接続がodbcだけだとちょっと今後辛い気がする&lt;/li&gt;
&lt;li&gt;大きいファイルはRDataファイルにしておくと容量小さい&lt;/li&gt;
&lt;li&gt;データ加工に便利なのはdplyr(でぃーぷらいやーと読むらしい）&lt;/li&gt;
&lt;li&gt;dplyrのソート命令がarrange！sortとかorderじゃないのか。&lt;/li&gt;
&lt;li&gt;dplyrだとカラムの結合や分解も手軽に出来そう&lt;/li&gt;
&lt;li&gt;自分でちょっといじって、packageとかfunctionを探す方法を掴まないと、関数名に略称とか使ってるケースが結構あって、探しにくいかも。使ってみないと何とも言えないけど&lt;/li&gt;
&lt;li&gt;発表でちょっと気になったけど、同じ書式の演算子でパッケージによって違う意味になったりするの？&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- more --&gt;

&lt;p&gt;データの前処理ってとても大事なので、参考にしてちょっと練習出来たらなと思います。&lt;/p&gt;
&lt;h2&gt;R in Life Science&lt;/h2&gt;
&lt;p&gt;Tomitaさんの発表。生物系の学生さんだそうで、研究で使いそうなヒートマップ表示について教えてくれました。
車のデータを利用して燃費をベースにしてグルーピングしながら、各項目についてヒートマップ表示して傾向が見やすくなってました。
最初バイオ系なのでSDS-PAGEか何かかと思いましたががが。あと、ggplot（だったかな？）でのヒートマップ関数としてheatmap.2ってのを紹介されていましたが、関数名に2とか入るの久しぶりに見ました。これはん〜〜〜〜〜〜、ちょっとな〜〜〜。でも機能は多いみたいです。&lt;/p&gt;
&lt;h2&gt;Incanterチョットシッテル&lt;/h2&gt;
&lt;p&gt;@tnoda_さんの発表
&lt;a href="http://sssslide.com/www.slideshare.net/tnoda/kober-15-incanter"&gt;スライドはこちら&lt;/a&gt;。
Twitterでインなんとかとか言っちゃいましたが、インキャンターです。「ノリを間違えたかも！（意訳）」とおっしゃっていましたが、とても楽しい発表でした。リアルタイムに突っ込み入れたかったのですが、出来なかったので、ここで突っ込みしておきます。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Clojureってカッコだらけだ！Lis(ry (*)&lt;/li&gt;
&lt;li&gt;3D pie chart以外はRと同じことは出来るらしい&lt;/li&gt;
&lt;li&gt;インストールはLeiningen（らいにんげん）からやるらしい。プロジェクト作ったりライブラリ管理とかやってくれるらしい。pipとかmagage.pyみたいなもん？&lt;/li&gt;
&lt;li&gt;Incanterの公式ダウンロードリンクからインストールしてはいけない。インストールしてしまった後のことは知らない。&lt;/li&gt;
&lt;li&gt;Rの話は8ページ目で終了と言ってたけど、dplyr出て来たよ（25ページ目）&lt;/li&gt;
&lt;li&gt;マクロという言葉に拒否感ががが（C的Excel的意味で）。でもきっと慣れると便利なんだろう。きっと。多分。&lt;/li&gt;
&lt;li&gt;Clojureが並列処理に向いているらしいので、並列処理＋統計処理に良さげ&lt;/li&gt;
&lt;li&gt;javaベースなので、javaベースのものと統合しやすいらしい。javaで開発してないからさっぱり分かんないけど。&lt;/li&gt;
&lt;li&gt;Incanterで3D pie chart書きたかったら、RserveってのでIncanterとRをつないだらいいらしい。3D pie chartの為だけにそこまでやるとか変態すぐる&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;分析実践&lt;/h2&gt;
&lt;p&gt;残った時間で実際にやってみましょうということで、弁当屋のデータを元にして売り上げ予測をやるという目的でRを触ってみるということをやっていました。R勉強会とは言え、実際にRをバリバリ使ってる人とかほとんど居ないと思うので、とても良い試みだと思いました。が、私はパソコン持ってなかったので読書しながら他の人がハマっているのを見たりしてました（悪趣味）。どうも文字コード周りでハマるケースが結構あるっぽいです。うむむむむ。ハマりポイントはハッキリさせたいところです。&lt;/p&gt;</summary><category term="R"></category><category term="event"></category></entry><entry><title>djangoのModelFormでMultiWidgetを使って見る</title><link href="http://blog.shigepon.info/blog/2015/01/24/django-modelform-multiwidget/" rel="alternate"></link><updated>2015-01-24T17:23:07+09:00</updated><author><name>shigepon</name></author><id>tag:blog.shigepon.info,2015-01-24:blog/2015/01/24/django-modelform-multiwidget/</id><summary type="html">&lt;p&gt;ModelFormでModelの１つのカラムを複数のフォーム要素（inputとか）で表現したかったので調べてみた。フォーム要素を適当に作って、clean_xxxの時にくっつけるとかそんな実装の仕方も出来るみたいだけど、MultiWidgetを使うと、Modelの１つのカラムに対して複数のinput要素を使うことが出来るみたいなので、使ってみた。名前のカラムに対して姓、名の入力要素を作るとかそんなのが出来るみたい。&lt;/p&gt;
&lt;p&gt;まずはMultiWidgetを継承したクラスを作る&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# models.py&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.forms.widgets&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;MultiWidget&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;NameWidget&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;MultiWidget&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;次にクラスに対して、__init__をオーバーライドし、widgetとしてTextInputのフォームを2つ登録してみた。コードはこんな感じ。&lt;/p&gt;
&lt;!-- more --&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# models.py&lt;/span&gt;
&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;NameWidget&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;MultiWidget&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;attrs&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;widgets&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
                &lt;span class="n"&gt;forms&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;TextInput&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;attrs&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;attrs&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;update&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;placeholder&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;姓&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;})),&lt;/span&gt;
                &lt;span class="n"&gt;forms&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;TextInput&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;attrs&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;attrs&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;update&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;placeholder&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;名&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;}))&lt;/span&gt;
                &lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="nb"&gt;super&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;NameWidget&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;widgets&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;attrs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;widgetsはリストでもタプルでも良さげ？ともかくやることはwidgetのリストかタプルを作って、親クラス(MultiWidget)のinitを呼び出すこと。&lt;/p&gt;
&lt;p&gt;次に、decompress、value_from_datadictメソッドを書く。decompressはカラムの値を複数のフォームに振り分ける手順、value_from_datadictはModelFormの入力データからModelのカラムに入れる値を作る手順を記述する。姓名を半角スペースで繋げて、半角スペースで分割するように作ってみた。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# models.py&lt;/span&gt;
&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;NameWidget&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;MultiWidget&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;attrs&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{}):&lt;/span&gt;
        &lt;span class="n"&gt;attrsSei&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;attrs&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;copy&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="n"&gt;attrsMei&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;attrs&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;copy&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="n"&gt;widgets&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
                &lt;span class="n"&gt;forms&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;TextInput&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;attrs&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;attrsSei&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;update&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;placeholder&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;姓&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;})),&lt;/span&gt;
                &lt;span class="n"&gt;forms&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;TextInput&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;attrs&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;attrsMei&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;update&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;placeholder&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;名&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;}))&lt;/span&gt;
                &lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="nb"&gt;super&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;NameWidget&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;widgets&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;attrs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;decompress&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;names&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39; &amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;names&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;span class="n"&gt;names&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;value_from_datadict&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;files&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;ulist&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;widget&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;value_from_datadict&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;files&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;_{0}&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;widget&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;enumerate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;widgets&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s2"&gt;u&amp;quot;{0} {1}&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ulist&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;u&amp;#39; &amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="n"&gt;ulist&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;u&amp;#39; &amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;あとはこのWidgetを使いたい要素にwidgetとして指定すればおk&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# models.py&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;forms&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;&lt;span class="err"&gt;（上のコードなど）&lt;/span&gt;&lt;span class="o"&gt;...&lt;/span&gt;
&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;HogeForm&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;forms&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ModelForm&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;forms&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CharField&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;max_length&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;label&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;u&amp;#39;名前&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;widget&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;NameWidget&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;このコードだと姓、名のフォームが2行に表示されている。1行にしたい場合はインライン指定とかそんなのを付けたクラスをattrsで指定して後はcssでやっちゃえばいいんじゃないかなと&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# models.py&lt;/span&gt;
    &lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;forms&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CharField&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;max_length&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;label&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;u&amp;#39;名前&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;widget&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;NameWidget&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;attrs&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;class&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;inline&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;}))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;とかそんな感じ&lt;/p&gt;
&lt;p&gt;他にももっと細かくhtmlを記述出来るformat_outputとかあるみたいだけど、試してないので省略。なくても取りあえず出来る。&lt;/p&gt;
&lt;p&gt;参考：&lt;a href="https://docs.djangoproject.com/en/1.7/ref/forms/widgets/#django.forms.MultiWidget"&gt;Django英語ドキュメント&lt;/a&gt;&lt;/p&gt;</summary><category term="python"></category><category term="django"></category></entry><entry><title>pythonのデコレーターをdjangoで使って見る</title><link href="http://blog.shigepon.info/blog/2015/01/06/python-decorator/" rel="alternate"></link><updated>2015-01-06T08:55:46+09:00</updated><author><name>shigepon</name></author><id>tag:blog.shigepon.info,2015-01-06:blog/2015/01/06/python-decorator/</id><summary type="html">&lt;p&gt;pythonのデコレーターを使ってみたらとても便利だなと思ったのでメモ&lt;/p&gt;
&lt;p&gt;参考にしたページを読んでいくと理解できた。要はデコレーターとして使う関数は引数に呼び出し元の関数を貰っておいて、内部で作った関数を返せば良い。内部の関数は適当に作れるみたい（今のとこそういう理解をしている）。djangoのビューで呼び出したかったので、内部の関数で可変長引数を取れるようにして下のようにしたら動いた。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;outer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;func&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;inner&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;hoge&amp;quot;&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;func&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;inner&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;!-- more --&gt;

&lt;p&gt;この時、args[0]にHttpRequestオブジェクトが入ってるので、これをいじると適当に値を追加したり整形したりするのをビューの外部に持っていけるので、使いようによっては共通部分と個別部分の分離や、ビューに直接関係ない処理（ログとか）を分離出来るので便利な感じがする。ただ、やりすぎるとコードが分割されすぎて読みにくくなる気もする。&lt;/p&gt;
&lt;!-- more --&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;outer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;func&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;inner&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;request&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;hoge&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;fuga&amp;quot;&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;func&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;inner&lt;/span&gt;

&lt;span class="nd"&gt;@outer&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;hoge&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;hoge&lt;/span&gt;
    &lt;span class="o"&gt;....&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;とやったりすることが出来る。個人的にはWebサービスでサイドメニューに必要な情報をデコレーターでやって、メインコンテンツに必要な情報をビューでやるとかそんな感じで使ってみようと思う。&lt;/p&gt;
&lt;p&gt;参考：&lt;a href="http://qiita.com/_rdtr/items/d3bc1a8d4b7eb375c368"&gt;Pythonのデコレータを理解するための12Step - Qiita&lt;/a&gt;&lt;/p&gt;</summary><category term="python"></category><category term="django"></category></entry><entry><title>use bootstrap3 in django</title><link href="http://blog.shigepon.info/blog/2014/12/18/use-bootstrap3-in-django/" rel="alternate"></link><updated>2014-12-18T08:24:56+09:00</updated><author><name>shigepon</name></author><id>tag:blog.shigepon.info,2014-12-18:blog/2014/12/18/use-bootstrap3-in-django/</id><summary type="html">&lt;p&gt;そろそろbootstrap3を使ってみたいなと思い、Djangoでbootstrap3を使う方法を調べてみた。django-bootstrap-toolkitのページを見てみるとdjango-bootstrap3を使ってねと書いてあるので、それを使ってみることにした。&lt;/p&gt;
&lt;h2&gt;インストール&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ pip install django-bootstrap3
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;設定&lt;/h2&gt;
&lt;!-- more --&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# settings.py&lt;/span&gt;
&lt;span class="n"&gt;INSTALLED_APPS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
&lt;span class="o"&gt;....&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;bootstrap3&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="o"&gt;....&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;!-- more --&gt;

&lt;h2&gt;テンプレート&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;{% load bootstrap3 %}
{% bootstrap_css %}
{% bootstrap_javascript %}
{% bootstrap_messages %}
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;これで必要ファイルがロードされる。あとはbootstrap3で使うタグで構成すれば良い。bootstrap_formとかそういうタグもあるけどまだ試していない。&lt;/p&gt;
&lt;h2&gt;Bootswatchにあるテーマを試す&lt;/h2&gt;
&lt;p&gt;まずはBootswatchのテーマcssをダウンロード&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ &lt;span class="nb"&gt;cd&lt;/span&gt; /static/css
$ wget http://bootswatch.com/cosmo/bootstrap.min.css
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;/staticはアプリのフォルダ下に作る&lt;/p&gt;
&lt;p&gt;次に設定ファイルに項目を追加&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# settings.py&lt;/span&gt;
&lt;span class="n"&gt;STATIC_URL&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;/static/&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;BOOTSTRAP3&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;css_url&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;/static/css/bootstrap.min.css&amp;#39;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;これだけでテンプレートいじらずに動いてくれる&lt;/p&gt;
&lt;p&gt;bootstrap2だとnavbar表示の時に表示が重なるとか何とかあったけど、bootstrap3だと気にしなくて良いのかな？何も追加css書かなくても特に問題無さそう。これは嬉しい。&lt;/p&gt;
&lt;p&gt;でも&lt;a href="http://qiita.com/Alex_23drum/items/bbf80aff7dbb6fd1a7d9"&gt;Navbarに画像入れると下に偏った配置になる&lt;/a&gt;とかあるみたいなので、調べてみる必要があるかも&lt;/p&gt;</summary><category term="bootstrap"></category><category term="django"></category><category term="python"></category></entry><entry><title>javascriptでカレンダーを書くライブラリを調べてみた</title><link href="http://blog.shigepon.info/blog/2014/12/17/check-table-library/" rel="alternate"></link><updated>2014-12-17T13:37:38+09:00</updated><author><name>shigepon</name></author><id>tag:blog.shigepon.info,2014-12-17:blog/2014/12/17/check-table-library/</id><summary type="html">&lt;p&gt;Django使ったサイトでカレンダーを表示しようとしたんだけど、HTMLCalendarとかだとレスポンシブにならないし、カスタマイズ面倒だしということで、javascriptで生成して、イベントデータはajaxリクエストから取り出すようにしたいと思ってライブラリを調べてみたのと感想を書いておく。結論からすると、FullCalendarが汎用的で使えそう。&lt;/p&gt;
&lt;h2&gt;Zabuto Calendar&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://github.com/zabuto/calendar"&gt;github&lt;/a&gt;
jqueryプラグイン。イベントは数字が表示される。カレンダーの表示は月毎のみ。言語設定に日本語は無い。日本語で日付表示する方法はReadmeに書かれていなかった。&lt;/p&gt;
&lt;h2&gt;Calendario&lt;/h2&gt;
&lt;p&gt;&lt;a href="http://tympanus.net/codrops/2012/11/27/calendario-a-flexible-calendar-plugin/"&gt;ダウンロードページ&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;デモは奇麗に見えるんだけど、そもそもメインのcssが何故かdemo.cssみたいなのをインポートしてて、これは無いんじゃないと思ったのと背景画像無しだとイメージに合わなかった。あと、デモサイトがあるだけで、最初に必要なファイルとかが分かりにくかった。&lt;/p&gt;
&lt;!-- more --&gt;

&lt;!-- more --&gt;

&lt;h2&gt;pickadate&lt;/h2&gt;
&lt;p&gt;&lt;a href="http://amsul.ca/pickadate.js/"&gt;ダウンロードページ&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;カレンダーだけじゃなく、タイムスケジュールの表示もあるライブラリ。でもパッと使ってみただけだとモーダル以外での表示方法が分からなかった。デートピッカーとして使うなら良い？&lt;/p&gt;
&lt;h2&gt;FullCalendar&lt;/h2&gt;
&lt;p&gt;&lt;a href="http://fullcalendar.io/"&gt;Home&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;GoogleCalendarっぽいカレンダーが作れて、カスタマイズ出来て、タイムスケジュールも表示出来るライブラリ。bower使うとか書いてあるけど、zip解凍して出て来たファイルを使うことでとりあえずはいけた。jqueryと&lt;a href="http://momentjs.com/"&gt;Moment&lt;/a&gt;ってライブラリが要る。汎用的だけど、それだけに色々見ないといけないけど、マニュアルあるので分かるようになっている。日本語の言語ファイルは無いが、曜日等のカスタマイズ方法がマニュアルに書いてあるので、日本語化出来る。&lt;/p&gt;
&lt;h2&gt;bootstrap-calendar&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://github.com/Serhioromano/bootstrap-calendar"&gt;github&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;試してない。結構汎用的な感じ？言語ファイルに日本語は無い。曜日を日本語化する方法がReadmeに無くて良くわからん。&lt;/p&gt;</summary><category term="bootstrap"></category><category term="javascript"></category></entry><entry><title>Titanium Mobileのプロジェクトをアドホック配信する時にテストしてもらうユーザーを追加する</title><link href="http://blog.shigepon.info/blog/2014/12/08/add-uuid-to-titanium-mobile-project/" rel="alternate"></link><updated>2014-12-08T01:42:49+09:00</updated><author><name>shigepon</name></author><id>tag:blog.shigepon.info,2014-12-08:blog/2014/12/08/add-uuid-to-titanium-mobile-project/</id><summary type="html">&lt;p&gt;追記：UUIDと書いてたのはUDIDの間違いでした！恥ずかしー。ご指摘いただいた@key3さんありがとうございました！&lt;/p&gt;
&lt;p&gt;いやー色々ぐぐっても大変だったし、これからも結構な頻度でやりそうなのでメモ。&lt;/p&gt;
&lt;p&gt;もともと作ったプロビジョニングファイルにUDIDを追加するには、&lt;/p&gt;
&lt;h2&gt;ぐぐってしっかり情報があった箇所（プロビジョングファイルにUDIDを追加する）&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://developer.apple.com/account/ios/profile/profileList.action"&gt;Apple Developer Center&lt;/a&gt;で左メニューのDevices-&amp;gt;Allをクリック&lt;/li&gt;
&lt;li&gt;右上の＋ボタンからデバイスを追加。名前とUDIDを記入してContinueでおk&lt;/li&gt;
&lt;li&gt;左メニューのProvisioning Profiles-&amp;gt;AllからUDIDを追加したいプロビジョニングファイルを探してクリック-&amp;gt;Editをクリック&lt;/li&gt;
&lt;li&gt;Devicesの一覧で、追加したDevice名をチェックしてGenerateボタンを押す&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- more --&gt;

&lt;h2&gt;ぐぐると古い情報が結構あって混乱した箇所（Xcode使ってローカルのプロビジョニングファイルを最新にする）&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Xcodeを起動して、メニューのXcode-&amp;gt;Preferencesで開いた画面でAccountsのボタン（右からに番目）をクリック-&amp;gt;View Detailsをクリック&lt;/li&gt;
&lt;li&gt;左下のリロードボタンを押す&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;そもそもあまりちゃんと情報が無かった箇所（Titanium Mobileで新しいプロビジョングファイルを使ってipaファイルを作成する）&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Titanium Mobileを起動-&amp;gt;App Explorerを表示-&amp;gt;右上の箱型アイコンをクリック-&amp;gt;Distribute - Ad Hoc/Enterpriseを選択&lt;/li&gt;
&lt;li&gt;Distributeの項目でSelect Provisioning Profileの項目で、作成したprofileを選択-&amp;gt;残りの必要事項を入力してPublish&lt;/li&gt;
&lt;li&gt;DistributeのSpecify locationで指定したフォルダ内にipaファイルが出来ているのでそれを配布すればおk&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;あまり良く分かってないけど、Titanium Mobileで配布する時のプロビジョングファイルと、デバッグ時のRun Configurationで指定するプロビジョングファイルは選択肢として違うものが出てくるので、結構混乱した。&lt;/p&gt;</summary><category term="titanium"></category></entry><entry><title>Southをすでにあるプロジェクトに適用する</title><link href="http://blog.shigepon.info/blog/2014/11/30/use-south-to-existing-project/" rel="alternate"></link><updated>2014-11-30T23:19:26+09:00</updated><author><name>shigepon</name></author><id>tag:blog.shigepon.info,2014-11-30:blog/2014/11/30/use-south-to-existing-project/</id><summary type="html">&lt;p&gt;Southってのを使うとモデルを変更した時に、サクッとDB(PostgreSQL)に反映出来るらしんだけど、今すでに作成中のプロジェクトに反映させたかったので、メモ&lt;/p&gt;
&lt;h2&gt;インストール&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ pip install south
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;設定&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# settings.py&lt;/span&gt;
&lt;span class="n"&gt;INSTALLED_APPS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
&lt;span class="o"&gt;....&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;south&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;!-- more --&gt;

&lt;h2&gt;作成中のアプリをsouthに追加&lt;/h2&gt;
&lt;p&gt;データベースが関連しているモデルが作成されているアプリにコマンドを実行すればおk&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ python manage.py schemamigration アプリ名 --init
$ python manage.py syncdb --all
$ python manage.py migrate アプリ名 --fake
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;syncdbしないでmigrateすると、PostgreSQLだとエラーが出たので、先にsyncdbするのが必要みたい&lt;/p&gt;
&lt;p&gt;実際にモデル変更した時の作業を追記&lt;/p&gt;
&lt;h2&gt;モデル変更&lt;/h2&gt;
&lt;p&gt;モデルを変更したら次のコマンドでデータベースに反映する&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ python manage.py schemamigration アプリ名 --auto
$ python manage.py migrate アプリ名
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;この時にデータベース内の値が変更した制約等に引っ掛かる場合は途中で止まったりするので、制約に合うようにデータを変更するとか修正する。&lt;/p&gt;
&lt;p&gt;参考：&lt;a href="http://yu-write.blogspot.jp/2014/01/django-south.html"&gt;Yura YuWrite: [django] 既存のプロジェクトにsouthを追加する方法&lt;/a&gt;、&lt;a href="http://stackoverflow.com/questions/22236029/trouble-getting-django-set-up-on-heroku-using-south-keep-getting-programminger"&gt;postgresql - Trouble getting Django set up on Heroku using South - keep getting ProgrammingError: relation does not exist - Stack Overflow&lt;/a&gt;&lt;/p&gt;</summary><category term="django"></category><category term="python"></category></entry><entry><title>djangoで国際化やってみた</title><link href="http://blog.shigepon.info/blog/2014/11/27/django-locale/" rel="alternate"></link><updated>2014-11-27T13:02:12+09:00</updated><author><name>shigepon</name></author><id>tag:blog.shigepon.info,2014-11-27:blog/2014/11/27/django-locale/</id><summary type="html">&lt;p&gt;Djangoで他の人が作ったモジュールを使ってると、英語のメッセージが入ってることがあるので、日本語化してみた。とりあえず英語のメッセージを日本語に変換するとこまで。&lt;/p&gt;
&lt;h2&gt;準備&lt;/h2&gt;
&lt;p&gt;gettextが無かったらインストール。Ubuntuの場合&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ sudo aptitude install gettext
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;プロジェクトにlocaleフォルダを作る。無いと後のコマンドでエラーが出た&lt;/p&gt;
&lt;!-- more --&gt;

&lt;h2&gt;poファイル作成&lt;/h2&gt;
&lt;!-- more --&gt;

&lt;p&gt;おもむろにpoファイルを作るコマンドを実行&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;django-admin.py makemessages -l ja
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;するとpath/to/locale/ja/LC_MESSAGES/django.poってファイルが出来るので、それを修正していく。ただ、このコマンドプロジェクト内だけ捜査してファイルを作るみたいで、外部モジュールの場合、上手く読み取ってくれなかった。&lt;/p&gt;
&lt;p&gt;今回はvirtualenvでpipしたdjango-allauthのテンプレートを日本語化したかったので、path/to/virtualenv/dir/lib/python2.7/site-packages/allauth/templates/account/内のファイルを全部path/to/project/templates/account/にコピーしてからコマンド実行すると上手く読み取ってくれた。&lt;/p&gt;
&lt;h2&gt;翻訳&lt;/h2&gt;
&lt;p&gt;出来たpoファイルを編集すればオッケー。ファイル内でmsgid以下に書いてあるのが元の文、その次のmsgstr以下に文章書くと、翻訳文になる。元の英文に何かパラメーター付いてる場合は必ずパラメーターを翻訳文に設定しないとエラーが出る。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;#: path/to/python/module.py:23&lt;/span&gt;
&lt;span class="n"&gt;msgid&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Welcome to my site.&amp;quot;&lt;/span&gt;
&lt;span class="n"&gt;msgstr&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;いらっしゃーい&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;moファイル作成&lt;/h2&gt;
&lt;p&gt;おもむろにコマンドを実行するとmoファイルが出来る&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;django-admin.py compilemessages
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;settings.pyの設定&lt;/h2&gt;
&lt;p&gt;これだけで動くと思ったら動かなかったので色々調べてみたらLOCALE_PATHSを設定しないといけなかった。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# settings.py&lt;/span&gt;
&lt;span class="n"&gt;LOCALE_PATHS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;path/to/locale&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;これ設定しておいたらちゃんと動いた。&lt;/p&gt;
&lt;p&gt;あとは普通にrunserverとかでサーバ起動したら翻訳されてる&lt;/p&gt;
&lt;p&gt;参考：&lt;a href="http://docs.djangoproject.jp/en/latest/topics/i18n/translation.html"&gt;翻訳 — Django 1.4 documentation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;翻訳したい文字列をマークする方法とかはリンク見れば分かる。あと、使いたい言語を選択出来るようにするとかそういう場合はLocaleMiddlewareを使うとかなんとかあるみたいだけどやってない。&lt;/p&gt;</summary><category term="django"></category><category term="python"></category></entry><entry><title>Kobe.R no 13に参加してきました</title><link href="http://blog.shigepon.info/blog/2014/11/25/kobe-dot-r-no-13/" rel="alternate"></link><updated>2014-11-25T23:33:42+09:00</updated><author><name>shigepon</name></author><id>tag:blog.shigepon.info,2014-11-25:blog/2014/11/25/kobe-dot-r-no-13/</id><summary type="html">&lt;p&gt;勉強会の話なので丁寧語で。11/24に&lt;a href="http://kobexr.doorkeeper.jp/events/16989"&gt;Kobe.R #13&lt;/a&gt;があったので参加してきました。&lt;a href="http://blog.shigepon.info/blog/2014/10/28/kobe-dot-r-no-12/"&gt;前回&lt;/a&gt;は大阪だったのですが今回は三宮で開かれました。今回はオープンデータ特集ということで、Rのネタもちょびっとある予定だったのですが、話がいっぱいあって結局オープンデータの話のみとなりました。Rネタだけでなく、データを扱う全般を範囲としているKobe.Rならではです。&lt;/p&gt;
&lt;p&gt;内容盛りだくさんなので、毎度忘れてる人や内容があって申し訳ないですが、感想です。&lt;/p&gt;
&lt;h2&gt;オープンデータとLinked Open Data&lt;/h2&gt;
&lt;p&gt;古崎さん&lt;/p&gt;
&lt;p&gt;Open Dataは今色々イベントやハッカソン、コンテストなどやってますよという話とオープンデータは誰でも自由に使える形で、さらに自分のデータにURI用意したり、他のデータにリンクしたりするともっとデータとしていいよという話でした。あとLinked Open DataはLODと略すそうです。&lt;/p&gt;
&lt;p&gt;リンクというのがあまりイメージ出来なかったけど、次の上田さんの発表で実際に動かしているところを見るとなるほどと思いました。&lt;/p&gt;
&lt;p&gt;ちなみに、12月7日の日曜日にOIHってとこ（グランドフロント大阪内）でLODハッカソン関西があるそうです。見てる人が居るかどうか知らないけど興味がある人は是非。&lt;/p&gt;
&lt;!-- more --&gt;

&lt;p&gt;他にもコンテストとして&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://lod.sfc.keio.ac.jp"&gt;LODチャレンジ2015&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://aigid.jp/?p=825"&gt;アーバンデータチャレンジ2014&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;とか直近でやってるそうです。&lt;/p&gt;
&lt;h2&gt;SPARQLについて&lt;/h2&gt;
&lt;p&gt;@uedayouさん&lt;/p&gt;
&lt;p&gt;Linked Open Dataにすると、SQLっぽい言語で色んな形式で色んな条件でデータが取って来れるよという話でした。何となくイメージはWebが巨大なデータベースになって、そのデータベースにアクセスするような感じがしました。んで、リンクがデータ間のリレーションになってて、リレーショナルデータベースみたいな感じでのアクセスが可能になるんじゃないかとイメージ出来ました。SPARQL知らなかったけど、凄いですね。&lt;/p&gt;
&lt;p&gt;Google様にアクセスしたりするのとは訳が違うので、実際にこういうのを利用したサービスとかアプリとか作る場合はアクセス頻度を気にする必要がありそうですが、それは普通のデータベースでもそうですし、普通のことかなと思いました。&lt;/p&gt;
&lt;p&gt;それよりも&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;PREFIX&lt;/span&gt; &lt;span class="n"&gt;rdfs&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="n"&gt;www&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;w3&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;org&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;2000&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;01&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;rdf&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="k"&gt;schema&lt;/span&gt;&lt;span class="o"&gt;#&amp;gt;&lt;/span&gt;
&lt;span class="k"&gt;PREFIX&lt;/span&gt; &lt;span class="n"&gt;dbpedia&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;ja&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="n"&gt;ja&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dbpedia&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;org&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;resource&lt;/span&gt;&lt;span class="o"&gt;/&amp;gt;&lt;/span&gt; 
&lt;span class="k"&gt;PREFIX&lt;/span&gt; &lt;span class="n"&gt;prop&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;ja&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="n"&gt;ja&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dbpedia&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;org&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;property&lt;/span&gt;&lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;

&lt;span class="k"&gt;SELECT&lt;/span&gt; &lt;span class="k"&gt;DISTINCT&lt;/span&gt; &lt;span class="o"&gt;?&lt;/span&gt;&lt;span class="n"&gt;pref&lt;/span&gt; &lt;span class="o"&gt;?&lt;/span&gt;&lt;span class="n"&gt;label&lt;/span&gt; &lt;span class="k"&gt;WHERE&lt;/span&gt; 
&lt;span class="err"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;dbpedia&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;ja&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="err"&gt;東京都&lt;/span&gt;  &lt;span class="n"&gt;prop&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;ja&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="err"&gt;隣接都道府県&lt;/span&gt;  &lt;span class="o"&gt;?&lt;/span&gt;&lt;span class="n"&gt;pref&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt; 
    &lt;span class="o"&gt;?&lt;/span&gt;&lt;span class="n"&gt;pref&lt;/span&gt;  &lt;span class="n"&gt;rdfs&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;label&lt;/span&gt;  &lt;span class="o"&gt;?&lt;/span&gt;&lt;span class="n"&gt;label&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;
&lt;span class="err"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;こんな感じのクエリを実行すれば、2つの異なるデータソース（エンドポイントと呼ぶらしい）で関連付けされているデータを取って来たり出来るとかすげーなと思いました。実際に例えばUbuntuで使うならどうするかとかは時間が無かったので、自分で調べて使ってみようと思いますです。&lt;/p&gt;
&lt;h2&gt;LOD Challengeについて&lt;/h2&gt;
&lt;p&gt;和田さん&lt;/p&gt;
&lt;p&gt;LOD Challengeというイベントについてのお話でした。ちょっと聞き疲れしてた時間帯だったので、頭を素通りしてしまいました＞＜すいませんです。&lt;/p&gt;
&lt;h2&gt;時系列データ分析・予測の方法（コンペ結果報告）&lt;/h2&gt;
&lt;p&gt;河原さん&lt;/p&gt;
&lt;p&gt;売り上げ予測のコンペ結果の報告をして頂きました。関連度と忘却度のマトリックスを作るという手法は面白そうでした。初心者なので実際にやってみるまでは道のりが長そうですが・・・・&lt;/p&gt;
&lt;h2&gt;OpenDataLabの活動紹介&lt;/h2&gt;
&lt;p&gt;毎度のことですが、最後らへんはどうしても名前を忘れてしまったりしてます。すいません＞＜。&lt;/p&gt;
&lt;p&gt;神戸でOpenDataLabというのをやっているという紹介でした。上手くやっておられるなぁという感じです。デジタルだけじゃないことも出来ることが強みだとおっしゃられていたような気がします。&lt;/p&gt;
&lt;p&gt;最後に、今回でずっと運営の中心をされていた@floretsさんが東京へ行かれるということで、送別会みたいな感じで懇親会へ行ってきました。@floretsさんは勉強会の雰囲気をとても良く作ってくれる方で、Kobe.Rで今後お見かけ出来なくなるのは残念ですが、東京でのご活躍をお祈りしております。&lt;/p&gt;</summary><category term="event"></category><category term="R"></category></entry><entry><title>django-allauthを使ってみた</title><link href="http://blog.shigepon.info/blog/2014/11/25/use-django-allauth/" rel="alternate"></link><updated>2014-11-25T14:55:16+09:00</updated><author><name>shigepon</name></author><id>tag:blog.shigepon.info,2014-11-25:blog/2014/11/25/use-django-allauth/</id><summary type="html">&lt;p&gt;ソーシャルログインだけでなく、通常のログインもやりたかったので、django-allauthを試してみた。&lt;/p&gt;
&lt;h2&gt;インストール&lt;/h2&gt;
&lt;p&gt;pipで&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pip install django-allauth
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;ファイルでの設定&lt;/h2&gt;
&lt;p&gt;settings.pyとurls.pyを設定&lt;/p&gt;
&lt;!-- more --&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# settings.py&lt;/span&gt;
&lt;span class="n"&gt;INSTALLED_APPS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;allauth&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;allauth.account&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;allauth.socialaccount&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;allauth.socialaccount.providers.twitter&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="c1"&gt;#例としてTwitter&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;AUTHENTICATION_BACKENDS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;allauth.account.auth_backends.AuthenticationBackend&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;TEMPLATE_CONTEXT_PROCESSORS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;django.core.context_processors.request&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;django.contrib.auth.context_processors.auth&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;allauth.account.context_processors.account&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;allauth.socialaccount.context_processors.socialaccount&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;SITE_ID&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# urls.py&lt;/span&gt;
&lt;span class="n"&gt;urlpatterns&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;patterns&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="o"&gt;...&lt;/span&gt;
    &lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;^accounts/&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;include&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;allauth.urls&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)),&lt;/span&gt;
    &lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;^accounts/profile/?&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;include&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;profile.urls&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;namespace&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;profile&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)),&lt;/span&gt; &lt;span class="c1"&gt;#ログイン後のリダイレクト先&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;adminページでの設定&lt;/h2&gt;
&lt;p&gt;ソーシャルログインする場合のみ必要。 http://domain/admin/ にアクセスして管理者ログインしてSocial applicationを追加する。
フォーム内では名前を適当に付けて、Twitterの場合Client idにConsumer keyを登録して、Secret keyにConsumer secretを登録すればおk
最後に、利用可能サイトから一番上のサイト(SITE_ID=1と指定してるので)を選択するとおk&lt;/p&gt;
&lt;p&gt;http://domain/accounts にアクセスすればログインフォームが出てくる。出来た。&lt;/p&gt;
&lt;h2&gt;テンプレートを上書きする&lt;/h2&gt;
&lt;p&gt;プロジェクトディレクトリ/templates/account以下にファイルを設定すればおk
例えばログインのテンプレートなら、login.htmlを設置すればおk&lt;/p&gt;
&lt;p&gt;元のファイルはgithubを見れば分かる&lt;/p&gt;
&lt;h2&gt;使える機能&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://github.com/pennersr/django-allauth/blob/master/allauth/account/urls.py"&gt;githubのコード&lt;/a&gt;
見れば大体分かる感じ&lt;/p&gt;
&lt;h2&gt;ユーザー登録時のメール確認後の処理でハマる&lt;/h2&gt;
&lt;p&gt;ユーザー登録すると通常は登録したメールアドレスにメールが届いて、そこに書いてあるURLにアクセスすると登録完了する手順が表示される。そこらへんの文章とかも上のテンプレート上書きでいけて問題ないんだけど、初期状態では登録が最後まで完了すると、そのままログインしてログイン時のリダイレクト先に移動してしまう。完了画面を表示したい場合はこれではまずい。&lt;/p&gt;
&lt;p&gt;ので、&lt;a href="http://django-allauth.readthedocs.org/en/latest/advanced.html"&gt;ここらへん&lt;/a&gt;のCustom Redirectsの項目を参考にしてアダプタを作ってみた&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# settings.py&lt;/span&gt;
&lt;span class="n"&gt;ACCOUNT_ADAPTER&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;project.users.adapter.MyAccountAdapter&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# project/users/adapter.py&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.conf&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;settings&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;allauth.account.adapter&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;DefaultAccountAdapter&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;MyAccountAdapter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;DefaultAccountAdapter&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get_email_confirmation_redirect_url&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;path&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;/account/complete&amp;quot;&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;path&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;でもこれだけでは上手くいかなかった。普通にログイン時のリダイレクト先に移動してしまった。どうもACCOUNT_LOGIN_ON_EMAIL_CONFIRMATIONをFalseにしないとダメみたい&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# settings.py&lt;/span&gt;
&lt;span class="n"&gt;ACCOUNT_LOGIN_ON_EMAIL_CONFIRMATION&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;これでやっと/account/completeにリダイレクトしてくれた。ログインした状態ではダメみたいなので、ログインは再度やってもらわないといけない。うーん今のとこ仕方ないか・・・。&lt;/p&gt;
&lt;h2&gt;django-allauthのサインアップフォームをカスタマイズしたい&lt;/h2&gt;
&lt;h3&gt;あるフィールドにhelp_textを付ける&lt;/h3&gt;
&lt;p&gt;参考：&lt;a href="http://stackoverflow.com/questions/23580771/overwrite-django-allauth-form-field"&gt;Overwrite django-allauth form field - Stack Overflow&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;__init__を上書きして、フィールドに属性を追加する
コードはこんな感じ。例としてユーザー名入力フォームにヘルプテキストとして「required」という文字を追加する&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# appname/forms.py&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;forms&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;SignupForm&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;forms&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Form&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="nb"&gt;super&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;SignupForm&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fields&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;username&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;help_text&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;required&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# settings.py&lt;/span&gt;
&lt;span class="n"&gt;ACCOUNT_SIGNUP_FORM_CLASS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;appname.forms.SignupForm&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;こんな感じ&lt;/p&gt;
&lt;h3&gt;フィールドのバリデーションを追加&lt;/h3&gt;
&lt;p&gt;参考：&lt;a href="http://stackoverflow.com/questions/24175228/how-to-clean-username-with-django-allauth-adapter"&gt;python - How to clean username with Django allauth adapter? - Stack Overflow&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Account Adapterを設定してあげて、そこでclean_xxxを作ると上手くいくみたい&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;```py
# project/users/adapter.py
class MyAccountAdapter(DefaultAccountAdapter):
    ...
    def clean_username(self, username):
        &amp;quot; 適当に処理を入れる
        &amp;quot; エラーの場合はraise Exception
        return username
&lt;/pre&gt;&lt;/div&gt;</summary><category term="django"></category><category term="python"></category></entry><entry><title>Django Memo</title><link href="http://blog.shigepon.info/blog/2014/11/23/django-memo/" rel="alternate"></link><updated>2016-10-27T08:30:00+09:00</updated><author><name>shigepon</name></author><id>tag:blog.shigepon.info,2014-11-23:blog/2014/11/23/django-memo/</id><summary type="html">&lt;p&gt;Djangoやってて忘れっぽいところとかをメモ&lt;/p&gt;
&lt;h2&gt;forms.DateFieldでISO-8601フォーマットの入力を受入れる&lt;/h2&gt;
&lt;p&gt;html5でdatetime-localとか扱おうとすると、入力値がISO-8601形式になって、そのままだとDateFieldが入力をdatetimeの正しい形式として認識してくれない。&lt;/p&gt;
&lt;p&gt;で、input_formatsを設定するといけるらしいんだけど、あまりマニュアルでちゃんと説明してない。Stack Overflowの情報とかをググると設定方法が間違ってるコードとかあって、正しいのが良く分からない。で、結局色々調べたら&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# models.py&lt;/span&gt;
&lt;span class="n"&gt;date&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;forms&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DateField&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;input_formats&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;%Y-%m-&lt;/span&gt;&lt;span class="si"&gt;%d&lt;/span&gt;&lt;span class="s1"&gt;T%H:%M:%S&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;とタプルで渡す必要があるらしい&lt;/p&gt;
&lt;p&gt;参考：&lt;a href="http://labs.uechoco.com/blog/2011/08/django-dateform-inputs_format-wrong.html"&gt;うえちょこ＠ぼろぐ» [Django]forms.DateFieldのinputs_formatではまった&lt;/a&gt;&lt;/p&gt;
&lt;!-- more --&gt;

&lt;h2&gt;ModelForm使ってフォーム出力する時にrequeied属性をテンプレートで参照するとか&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# models.py&lt;/span&gt;
&lt;span class="n"&gt;hoge&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;forms&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CharField&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;max_length&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;widget&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;TextInput&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;attrs&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;required&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;true&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;}))&lt;/span&gt;&lt;span class="err"&gt;↲&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;こんな感じで定義したフィールドの属性取ってきたい場合、&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;\{\% for field in form \%\}
  \{\% if field.field.required \%\}&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;必須&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;\{\% endif \%\}
\{\% endfor \%\}
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;適当だけど、こんな感じでアクセスできる。&lt;/p&gt;
&lt;h2&gt;ModelFormでcleanを使ってデータの検証する時に、updateしようとしてるかcreateしようとしてるか判断する&lt;/h2&gt;
&lt;p&gt;createの時だけチェックしたかったので、色々調べてみたらclean(self)内で、self.instanceでチェックすると良いみたい。例えばプライマリーキーでidがある場合こんな感じ&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# models.py&lt;/span&gt;
&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Hoge&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;forms&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ModelForm&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;clean&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;cleaned_data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cleaned_data&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;instance&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="c1"&gt;#create用の処理&lt;/span&gt;
            &lt;span class="k"&gt;raise&lt;/span&gt; &lt;span class="n"&gt;ValidationError&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;例外出すのはこんな感じ&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="c1"&gt;#update用の処理&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;cleaned_data&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;instanceの型チェックする方が正攻法かも。例外のメッセージは&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# views.py&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;form&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Hoge&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;POST&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;form&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_valid&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
        &lt;span class="c1"&gt;#例外が無かった場合&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;v&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;form&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;errors&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;item&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
            &lt;span class="c1"&gt;#kが例外のフィールド。cleanの場合は__all__&lt;/span&gt;
            &lt;span class="c1"&gt;#vが例外のメッセージ&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;みたいな感じで取り出せる。&lt;/p&gt;
&lt;h2&gt;runserver実行時にコンソールにスタックとレースを出力する&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# settings.py&lt;/span&gt;
&lt;span class="n"&gt;LOGGING&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;version&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;handlers&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:{&lt;/span&gt;
        &lt;span class="s1"&gt;&amp;#39;console&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:{&lt;/span&gt;
            &lt;span class="s1"&gt;&amp;#39;level&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;DEBUG&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="s1"&gt;&amp;#39;class&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;logging.StreamHandler&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;loggers&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:{&lt;/span&gt;
        &lt;span class="s1"&gt;&amp;#39;django.request&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:{&lt;/span&gt;
            &lt;span class="s1"&gt;&amp;#39;handlers&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;console&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
            &lt;span class="s1"&gt;&amp;#39;propagate&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="s1"&gt;&amp;#39;level&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;DEBUG&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;これを書いておけばコンソールにスタックトレースを出力してくれる。apiのコード書いてる時とかajaxで呼び出してる場合とかに便利。&lt;/p&gt;
&lt;p&gt;参考：&lt;a href="http://stackoverflow.com/questions/5886275/print-a-stack-trace-to-stdout-on-errors-in-django-while-using-manage-py-runserve"&gt;python - Print a stack trace to stdout on errors in Django while using manage.py runserver - Stack Overflow&lt;/a&gt;というかここのコード丸コピー&lt;/p&gt;
&lt;h2&gt;Gmail送信&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# settings.py&lt;/span&gt;
&lt;span class="n"&gt;EMAIL_USE_TLS&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;
&lt;span class="n"&gt;EMAIL_HOST&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;smpt.gmail.com&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;EMAIL_HOST_USER&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;mymail@gmail.com&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;EMAIL_HOST_PASSWORD&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;mypassword&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;EMAIL_PORT&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;587&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# views.py&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.core.mail&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;send_mail&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;mail&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;send_mail&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Subject&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;message&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;mymail.gmail.com&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;to@mail.address&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;span class="n"&gt;fail_silently&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;False&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;こんだけ&lt;/p&gt;
&lt;p&gt;参考：&lt;a href="http://d.hatena.ne.jp/yuheiomori0718/20120714/1342266647"&gt;DjangoでGmailを使ってメール送信 - brainstorm&lt;/a&gt;、&lt;/p&gt;
&lt;h2&gt;django+uwsgi+nginxで502エラーが出た原因の１つ&lt;/h2&gt;
&lt;p&gt;djangoはあまり関係無いけどuwsgiの設定の問題だったので、こちらに。django+uwsgi+nginxで502エラーが出て、runserverでは普通に動いたので、しばらくググって解答が得られたのでメモ&lt;/p&gt;
&lt;p&gt;&lt;a href="http://datatables.net/"&gt;DataTables&lt;/a&gt;を使って動的にテーブルデータをロードしようとしたら、runserverでは上手く行くのにuwsgiだと502エラーが出てロード出来なかった。最初にnginxのログを見てみると、uwsgiのとこでエラーと書いてあったので、uwsgiのログをチェックした。すると&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;invalid request block size: xxxxx (max 4096)...
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;みたいなエラーが出ていた。リクエストが大きすぎるのかなと思い、リクエストの一部を削ってみたらエラーが出なかった。んで、対策をググってみたら書いてあったので、そのまま下のコードを実装してみた。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# uwsgi.ini&lt;/span&gt;
&lt;span class="na"&gt;buffer-size&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;65535&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;みたいにバッファーサイズを大きく(例では64k)した。これでエラーが消えたのでめでたしめでたし。&lt;/p&gt;
&lt;p&gt;参考：&lt;a href="http://stackoverflow.com/questions/22697584/nginx-uwsgi-104-connection-reset-by-peer-while-reading-response-header-from-u"&gt;django - Nginx uwsgi (104: Connection reset by peer) while reading response header from upstream - Stack Overflow&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;運用環境と開発環境で設定を切り分ける&lt;/h2&gt;
&lt;p&gt;開発環境用にlocalアプリを作って、local/settings.pyを作成し、開発環境での設定を書いて、プロジェクトのsettings.pyの最後に以下を追加すると良い&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;local.settings&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;
&lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="ne"&gt;ImportError&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;pass&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;参考：&lt;a href="http://surgo.jp/2010/02/django.html"&gt;パーフェクトな Django の設定ファイル -- Kosei Kitahara's Blog&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;テンプレートの読み込まれ順&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;TEMPLATE_DIRSで指定されたディレクトリの順番で、そこを起点にした全てのテンプレート&lt;/li&gt;
&lt;li&gt;INSTALLED_APPSに指定した順にアプリケーション直下のtemplatesディレクトリを調べる &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;hogeアプリでテンプレートを指定した場合に、hogeアプリ直下のtemplatesディレクトリを調べてくれる訳ではないので注意が必要。&lt;/p&gt;
&lt;p&gt;例えば&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;TEMPLATE_DIRS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;/home/hoge/templates&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,]&lt;/span&gt;
&lt;span class="n"&gt;INSTALLED_APPS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;hoge&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;fuga&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;と書いてあり、プロジェクトが/www/a_project/に置いてある場合、&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;/home/hoge/templates&lt;/li&gt;
&lt;li&gt;/www/a_project/hoge/templates&lt;/li&gt;
&lt;li&gt;/www/a_project/fuga/templates&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;の順でテンプレートの存在を調べる&lt;/p&gt;
&lt;p&gt;参考：&lt;a href="http://www.tsuyukimakoto.com/blog/2006/11/22/django-template-loader/"&gt;DjangoのTemplateローダ | tsuyuki.makoto&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;url末尾に必ずスラッシュを入れる&lt;/h2&gt;
&lt;p&gt;url末尾にスラッシュが無い場合、スラッシュ有りにリダイレクトする設定&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# settings.py&lt;/span&gt;
&lt;span class="n"&gt;APPEND_SLASH&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Django rest apiで日時としてタイムスタンプを出力する&lt;/h2&gt;
&lt;p&gt;参考：&lt;a href="http://stackoverflow.com/questions/26083583/serialize-a-datetime-as-an-integer-timestamp"&gt;django rest framework - serialize a datetime as an integer timestamp - Stack Overflow&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;どうもDjango rest frameworkのDateTimeFieldで指定するformatパラメータだとタイムスタンプが指定出来ないみたいなのでこんな感じにすると出来る。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# serialize.py&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;rest_framework&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;serializers&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;time&lt;/span&gt;
&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;HogeSerializer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;serializers&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Serializer&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;date&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;serializers&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DateTimeField&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;timestamp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;serializers&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SerializerMethodField&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get_timestamp&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;mktime&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;obj&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;date&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;timetuple&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;javascriptのタイムスタンプに対応するためにはget_timestampの返り値を1000倍すればおk&lt;/p&gt;
&lt;h2&gt;Paginatorでcount文を実行させずに指定件数分のページングを行う&lt;/h2&gt;
&lt;p&gt;分量が多くて、先頭1000件を100件ずつページング表示させるので十分かなという時に、いちいちcount文を発行させたくない時&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;paginator&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Paginator&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;query&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;paginator&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_count&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1000&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;queryは適当なQuerySet&lt;/p&gt;
&lt;p&gt;参考：&lt;a href="http://stackoverflow.com/questions/7707035/how-to-implement-a-paginator-that-doesnt-call-count"&gt;django - How to implement a paginator that doesn't call count(*) - Stack Overflow&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;メソッドの呼び出し元オブジェクトを取得&lt;/h2&gt;
&lt;p&gt;inspectモジュールってのが使えるらしい&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;inspect&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;frame&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;filename&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;line_number&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;function_name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;lines&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;inspect&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getouterframes&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;inspect&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;currentframe&lt;/span&gt;&lt;span class="p"&gt;())[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;frame&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;filename&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;line_number&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;function_name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;lines&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;参考：&lt;a href="http://stackoverflow.com/questions/3711184/how-to-use-inspect-to-get-the-callers-info-from-callee-in-python"&gt;How to use inspect to get the caller's info from callee in Python? - Stack Overflow&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;プロファイラ使った時に、socket.pyが呼ばれてるのは分かったけど、その呼び出し元がイマイチわからなかった時に使った。&lt;/p&gt;
&lt;h2&gt;urlsでviewにパラメータを送る&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# urls.py&lt;/span&gt;
&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;^$&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;views&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;hoge&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;fuga&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;hage&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;hoge&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# views.py&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;hoge&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;fuga&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="o"&gt;...&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;パラメーターに指定する名前（上の場合はfuga）がviewsとurlsで同じ名前になっていることが必要（でないとエラーが出る）&lt;/p&gt;
&lt;p&gt;参考：&lt;a href="https://docs.djangoproject.com/en/1.8/topics/http/urls/#passing-extra-options-to-include"&gt;URL dispatcher | Django documentation | Django&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Ajaxでpostしたい時&lt;/h2&gt;
&lt;p&gt;csrfフィルタが初期状態で設定されてるし、csrfフィルタはあった方が良いので、次のようになったら良いかも（Jqueryを使う場合）&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;post&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;,{&lt;/span&gt;&lt;span class="nx"&gt;csrfmiddlewaretoken&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;{{csrf_token}}&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;}...);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;参考：&lt;a href="http://stackoverflow.com/questions/5100539/django-csrf-check-failing-with-an-ajax-post-request"&gt;Django CSRF check failing with an Ajax POST request - Stack Overflow&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;AjaxのPOSTで配列を受け取りたい時&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;arr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;hoge&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;fuga&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;post&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;arr&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="nx"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;&lt;span class="nx"&gt;alert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;success&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);});&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;該当するビューでこんな風に書く&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;hoge&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;arr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;POST&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getlist&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;arr&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;ちなみにgetだと[]は要らないらしい。&lt;/p&gt;
&lt;p&gt;参考：[http://stackoverflow.com/questions/12101658/how-to-get-an-array-in-django-posted-via-ajax]
該当するビューでこんな風に書く&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;hoge&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;arr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;POST&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getlist&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;arr&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;ちなみにgetだと[]は要らないらしい。&lt;/p&gt;
&lt;p&gt;参考：&lt;a href="http://stackoverflow.com/questions/12101658/how-to-get-an-array-in-django-posted-via-ajax"&gt;How to get an array in Django posted via Ajax - Stack Overflow&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;intcommaフィルタが効かない(django 1.8)&lt;/h2&gt;
&lt;p&gt;django 1.4からL10Nを見るので、ロケールjaの場合はNUMBER_GROUPINGを明示しないといけないらしい。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# settings.py&lt;/span&gt;
&lt;span class="n"&gt;NUMBER_GROUPING&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;これでおk&lt;/p&gt;
&lt;p&gt;参考：&lt;a href="http://yamayoshi.blogspot.jp/2013/02/django14-intcomma.html"&gt;やまよし＠Google大好き: Django1.4 で intcommaが効かない&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;リダイレクト時にパラメータを渡す&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;redirect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;name&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;param&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Location&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;?hoge=fuga&amp;#39;&lt;/span&gt;
&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;でいける&lt;/p&gt;
&lt;p&gt;参考：&lt;a href="http://stackoverflow.com/questions/3765887/add-request-get-variable-using-django-shortcuts-redirect"&gt;add request.GET variable using django.shortcuts.redirect - Stack Overflow&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;テンプレートのforループで何個おきで表示&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://docs.djangoproject.com/ja/1.10/ref/templates/builtins/#divisibleby"&gt;divisiblebyフィルタ&lt;/a&gt;を使う&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;{% for fuga in hoge %}
  {% if forloop.counter0|divisibleby:4%}4個おき{%endif%}
    {{fuga.hage}}
{% endfor %}
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;参考：&lt;a href="http://stackoverflow.com/questions/8494209/modulus-in-django-template"&gt;python - Modulus % in Django template - Stack Overflow&lt;/a&gt;&lt;/p&gt;</summary><category term="memo"></category><category term="django"></category><category term="python"></category></entry><entry><title>Titanium Mobileメモ</title><link href="http://blog.shigepon.info/blog/2014/11/23/titanium-mobile-memo/" rel="alternate"></link><updated>2014-11-23T09:48:44+09:00</updated><author><name>shigepon</name></author><id>tag:blog.shigepon.info,2014-11-23:blog/2014/11/23/titanium-mobile-memo/</id><summary type="html">&lt;p&gt;Titanium Mobileに関するメモ&lt;/p&gt;
&lt;h2&gt;アプリ固有の設定を登録する&lt;/h2&gt;
&lt;p&gt;アプリを終了して、再起動させた時も保存される設定をしたい時はTitanium.App.Propertiesを使う&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nx"&gt;Ti&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Properties&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setString&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;hoge&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;fuga&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="c1"&gt;//設定&lt;/span&gt;
&lt;span class="nx"&gt;hoge&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;Ti&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Properties&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getString&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;hoge&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="c1"&gt;//取得&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;stringを例にしてるが、ListとかObjectとかBoolとか色々入れられる。&lt;/p&gt;
&lt;!-- more --&gt;

&lt;h2&gt;Titanium MobileのUIで本家以外に参考にしてるサイト&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://code.google.com/p/titanium-mobile-doc-ja/w/list"&gt;Wiki Pages - titanium-mobile-doc-ja - Appcelerator Titanium Mobileに関するドキュメントを日本語でまとめていくプロジェクト - Google Project Hosting&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Android実機で文字が小さくなる&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;# tiapp.xml
&lt;span class="nt"&gt;&amp;lt;android&lt;/span&gt; &lt;span class="na"&gt;xmlns:android=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;http://schemas.android.com/apk/res/android&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;manifest&amp;gt;&lt;/span&gt;
         &lt;span class="nt"&gt;&amp;lt;supports-screens&lt;/span&gt; &lt;span class="na"&gt;android:anyDensity=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;false&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/manifest&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/android&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;もしくは文字サイズをdpで指定&lt;/p&gt;
&lt;p&gt;参考：&lt;a href="http://www.fujimotohajime.net/pukiwiki/index.php?TitaniumMobile%2FAndroid%E3%81%A7%E5%AE%9F%E6%A9%9F%E3%83%86%E3%82%B9%E3%83%88%E3%81%99%E3%82%8B%E3%81%A8%E6%96%87%E5%AD%97%E3%81%8C%E5%B0%8F%E3%81%95%E3%81%84"&gt;TitaniumMobile/Androidで実機テストすると文字が小さい - Wiki&lt;/a&gt;&lt;/p&gt;</summary><category term="titanium"></category><category term="memo"></category></entry><entry><title>DjangoでDateTimeField received a naive datetimeってWarningが出た</title><link href="http://blog.shigepon.info/blog/2014/11/22/django-datetimefield-received-a-naive-datetime/" rel="alternate"></link><updated>2014-11-22T16:19:11+09:00</updated><author><name>shigepon</name></author><id>tag:blog.shigepon.info,2014-11-22:blog/2014/11/22/django-datetimefield-received-a-naive-datetime/</id><summary type="html">&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;RuntimeWarning: DateTimeField received a naive datetime
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;ってWarningが出るのに対する対処&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# settings.py&lt;/span&gt;
&lt;span class="n"&gt;USE_TZ&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;を書けばおk。要はタイムゾーン入れてくれってエラーなので、そんなものはない！と指定すればいいっぽい&lt;/p&gt;
&lt;!-- more --&gt;

&lt;p&gt;参考：&lt;a href="http://stackoverflow.com/questions/18622007/runtimewarning-datetimefield-received-a-naive-datetime"&gt;django - RuntimeWarning: DateTimeField received a naive datetime - Stack Overflow&lt;/a&gt;&lt;/p&gt;</summary><category term="django"></category><category term="python"></category></entry><entry><title>Titanium MobileとDjangoでAjax認証を行う</title><link href="http://blog.shigepon.info/blog/2014/11/20/titanium-ajax-post-to-django/" rel="alternate"></link><updated>2014-11-20T09:42:26+09:00</updated><author><name>shigepon</name></author><id>tag:blog.shigepon.info,2014-11-20:blog/2014/11/20/titanium-ajax-post-to-django/</id><summary type="html">&lt;p&gt;最近Titanium Mobile使ってスマホアプリを作ろうかなと思って色々試してるんだけど、ログイン認証する時にはまったので、メモ&lt;/p&gt;
&lt;p&gt;参考&lt;a href="http://stackoverflow.com/questions/26022797/in-appcelerator-titanium-how-can-i-get-djangos-csrf-token"&gt;In Appcelerator Titanium, how can I get Django's CSRF token?(Stack Overflow)&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Titanium MobileでのPOST&lt;/h2&gt;
&lt;p&gt;HTTPClientを使って、例えば次のように書く。UIの設計部分とかそんなのは省略。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    var &lt;span class="nv"&gt;client&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; Ti.Network.createHTTPClient&lt;span class="o"&gt;({&lt;/span&gt;
        onerror: &lt;span class="k"&gt;function&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;e&lt;span class="o"&gt;){&lt;/span&gt;
            Ti.API.debug&lt;span class="o"&gt;(&lt;/span&gt;e.error&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            alert&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;error&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="o"&gt;}&lt;/span&gt;,
        onload: &lt;span class="k"&gt;function&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;e&lt;span class="o"&gt;){&lt;/span&gt;
            var &lt;span class="nv"&gt;item&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; JSON.parse&lt;span class="o"&gt;(&lt;/span&gt;this.responseText&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;item.status&lt;span class="o"&gt;==&lt;/span&gt;1&lt;span class="o"&gt;){&lt;/span&gt;//例としてstatusを返すという設定にしているのでこんな感じにしてる
                alert&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;ログインしました&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="o"&gt;}&lt;/span&gt;&lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="o"&gt;{&lt;/span&gt;
                alert&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;ログイン失敗しました&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="o"&gt;}&lt;/span&gt;
        &lt;span class="o"&gt;}&lt;/span&gt;
    &lt;span class="o"&gt;})&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    client.open&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;POST&amp;#39;&lt;/span&gt;,&lt;span class="s1"&gt;&amp;#39;http://url/to/login&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    client.send&lt;span class="o"&gt;({&lt;/span&gt;username:&lt;span class="s1"&gt;&amp;#39;hoge&amp;#39;&lt;/span&gt;,password:&lt;span class="s1"&gt;&amp;#39;fuga&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;})&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;!-- more --&gt;

&lt;h2&gt;Djangoでのユーザー認証&lt;/h2&gt;
&lt;p&gt;Djangoでユーザー認証しようとすると例えばこんな感じ(viewだけ)
REST API作るために、&lt;a href="http://www.django-rest-framework.org/"&gt;Django REST framework&lt;/a&gt;を使ってるので、そのままコピペしても使えないけど、@部分を消して、Responseとなっている箇所を自力でJSON出力すれば良いと思う。Django REST frameworkについてはどっかで書く。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# views.py&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;rest_framework&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;viewsets&lt;/span&gt;&lt;span class="err"&gt;↲&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;rest_framework.response&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Response&lt;/span&gt;&lt;span class="err"&gt;↲&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;rest_framework.decorators&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;api_view&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.contrib.auth&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;login&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;authenticate&lt;/span&gt;

&lt;span class="nd"&gt;@api_view&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;GET&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;POST&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;do_login&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;&lt;span class="err"&gt;↲&lt;/span&gt;                                                 
 &lt;span class="n"&gt;status&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="err"&gt;↲&lt;/span&gt;                                    
 &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_authenticated&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;&lt;span class="err"&gt;↲&lt;/span&gt;  
     &lt;span class="n"&gt;status&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="err"&gt;↲&lt;/span&gt;                                                  
 &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="err"&gt;↲&lt;/span&gt;                                                                
     &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;method&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;POST&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="err"&gt;↲&lt;/span&gt;                                 
         &lt;span class="n"&gt;username&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;POST&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;username&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="err"&gt;↲&lt;/span&gt;                          
         &lt;span class="n"&gt;password&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;POST&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;password&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="err"&gt;↲&lt;/span&gt;                      
         &lt;span class="n"&gt;user&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;authenticate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;username&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;username&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;password&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;password&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="err"&gt;↲&lt;/span&gt;     
         &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="err"&gt;↲&lt;/span&gt;                                     
             &lt;span class="n"&gt;status&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="err"&gt;↲&lt;/span&gt;                                      
             &lt;span class="n"&gt;login&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="err"&gt;↲&lt;/span&gt;                       
     &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="err"&gt;↲&lt;/span&gt;                                                      
         &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;Response&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;status&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;status&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;&lt;span class="err"&gt;↲&lt;/span&gt;                 
 &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;Response&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;status&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;status&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;&lt;span class="err"&gt;↲&lt;/span&gt;                                 
&lt;span class="err"&gt;↲&lt;/span&gt;                                                                      


&lt;span class="err"&gt;で、実際やってみるとレスポンスはこんな感じになる&lt;/span&gt;

&lt;span class="sb"&gt;``&lt;/span&gt;&lt;span class="err"&gt;`&lt;/span&gt;&lt;span class="n"&gt;js&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;detail&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;CSRF Failed: CSRF token missing or incorrect.&amp;quot;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;そういえばDjangoでCSRF対策してるんだった。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# settings.py&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;MIDDLEWARE_CLASSES = (
....
    'django.middleware.csrf.CsrfViewMiddleware',
....
)&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;ajax&lt;/span&gt;&lt;span class="err"&gt;でやり取りする部分だけ、&lt;/span&gt;&lt;span class="nt"&gt;MIDDLEWARE_CLASSES&lt;/span&gt;&lt;span class="err"&gt;から削除するって手もあるけど、&lt;/span&gt;&lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;Django&lt;/span&gt; &lt;span class="nx"&gt;API&lt;/span&gt;&lt;span class="err"&gt;リファレンス&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nt"&gt;http&lt;/span&gt;&lt;span class="o"&gt;://&lt;/span&gt;&lt;span class="nt"&gt;docs&lt;/span&gt;&lt;span class="nc"&gt;.djangoproject.jp&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nt"&gt;en&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nt"&gt;latest&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nt"&gt;ref&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nt"&gt;contrib&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nt"&gt;csrf&lt;/span&gt;&lt;span class="nc"&gt;.html&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="err"&gt;に書いてあるように&lt;/span&gt;&lt;span class="nt"&gt;X-CSRFToken&lt;/span&gt; &lt;span class="err"&gt;という独自ヘッダーに&lt;/span&gt; &lt;span class="nt"&gt;CSRF&lt;/span&gt; &lt;span class="err"&gt;トークンの&lt;/span&gt; &lt;span class="err"&gt;値を設定するという対処をやってみた。&lt;/span&gt;

&lt;span class="err"&gt;```&lt;/span&gt;&lt;span class="nt"&gt;js&lt;/span&gt;
&lt;span class="nt"&gt;function&lt;/span&gt; &lt;span class="nt"&gt;getCRSF&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;var&lt;/span&gt; &lt;span class="n"&gt;xhr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Ti&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Network&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;createHTTPClient&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;onload&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;var&lt;/span&gt; &lt;span class="n"&gt;item&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;JSON&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;parse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;responseText&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="n"&gt;Ti&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;App&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Properties&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setString&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;csrf&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;item&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;csrf&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="err"&gt;}&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
    &lt;span class="nt"&gt;xhr&lt;/span&gt;&lt;span class="nc"&gt;.open&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;GET&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;http://url/to/login&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
    &lt;span class="nt"&gt;xhr&lt;/span&gt;&lt;span class="nc"&gt;.send&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
&lt;span class="err"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;これを書いて、getCRSFを先にどこかで実行しておいて
実際のリクエストはさっきのコードをこんな感じで修正する&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="nx"&gt;client&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;POST&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;http://url/to/login&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;client&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setRequestHeader&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;X-CSRFToken&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;Ti&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Properties&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getString&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;csrf&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;&lt;span class="c1"&gt;//これを追加&lt;/span&gt;

    &lt;span class="nx"&gt;client&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;send&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="nx"&gt;username&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;hoge&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;password&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;fuga&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Django側のコードはGETの時にcsrfのトークンを戻すように書き換える&lt;/p&gt;
&lt;p&gt;```py&lt;/p&gt;
&lt;h1&gt;views.py&lt;/h1&gt;
&lt;p&gt;from django.core.context_processors import csrf #を追加&lt;/p&gt;
&lt;h1&gt;上のviews.pyの14行目をこんな感じで修正&lt;/h1&gt;
&lt;p&gt;return Response({"status":status,"csrf":csrf(request)['csrf_token']})↲                 &lt;/p&gt;
&lt;p&gt;これでいけたみたい。&lt;/p&gt;</summary><category term="python"></category><category term="django"></category><category term="titanium"></category></entry><entry><title>Django1.6.5でPostgreSQLとBootstrap使ったアプリを作ってみた(4):djangoで作ったプロジェクトをnginx+uwsgiで使って公開する</title><link href="http://blog.shigepon.info/blog/2014/11/04/use-django-with-uwsgi/" rel="alternate"></link><updated>2014-11-04T21:33:54+09:00</updated><author><name>shigepon</name></author><id>tag:blog.shigepon.info,2014-11-04:blog/2014/11/04/use-django-with-uwsgi/</id><summary type="html">&lt;p&gt;nginxのインストールは省略。ubuntuならaptitudeでインストールすればいい。デフォルトはちょっと古いけど。
djangoで作ったmysiteプロジェクトを/path/to/mysiteに置いているという前提。&lt;/p&gt;
&lt;h2&gt;uwsgiをインストール&lt;/h2&gt;
&lt;p&gt;全てvirtualenv上で行うとよさげ。
&lt;a href="http://docs.djangoproject.jp/en/latest/howto/deployment/wsgi/uwsgi.html"&gt;uWSGI で Django を使う方法 — Django 1.4 documentation&lt;/a&gt;ほぼそのまま&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ &lt;span class="nb"&gt;source&lt;/span&gt; path/to/virtualenv/bin/activate
&lt;span class="k"&gt;$(&lt;/span&gt;virtualenv&lt;span class="k"&gt;)&lt;/span&gt; pip install uwsgi
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;uwsgi.iniを作る&lt;/h2&gt;
&lt;p&gt;djangoのプロジェクトを/path/to/mysiteに置いた場合の設定。pidfile,daemonizeはプロジェクト毎に適当に設定。&lt;/p&gt;
&lt;!-- more --&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# uwsgi.ini&lt;/span&gt;
&lt;span class="k"&gt;[uwsgi]&lt;/span&gt;
&lt;span class="na"&gt;chdir&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;/path/to/mysite&lt;/span&gt;
&lt;span class="na"&gt;module&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;mysite.wsgi:application&amp;#39;&lt;/span&gt;
&lt;span class="na"&gt;master&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;True&lt;/span&gt;
&lt;span class="na"&gt;pidfile&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;/tmp/project-master.pid&lt;/span&gt;
&lt;span class="na"&gt;vacuum&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;True&lt;/span&gt;
&lt;span class="na"&gt;max-requests&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;5000&lt;/span&gt;
&lt;span class="na"&gt;daemonize&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;/var/log/uwsgi/mysite.log&lt;/span&gt;
&lt;span class="na"&gt;socket&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;127.0.0.1:1234 #適当なポート&lt;/span&gt;
&lt;span class="na"&gt;env&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;DJANGO_SETTINGS_MODULE=mysite.settings&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;virtualenvで使う場合、sudoを使わないでuwsgiを起動するので、/var/log/uwsgi/yourproject.logの権限に注意する。
uwsgiの起動や終了のコマンドは以下の通り&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;起動
$ uwsgi --ini uwsgi.ini
再起動
$ uwsgi --reload /tmp/project-master.pid
終了
$ uwsgi --stop /tmp/project-master.pid
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;nginxの設定&lt;/h2&gt;
&lt;p&gt;&lt;a href="http://uwsgi-docs.readthedocs.org/en/latest/tutorials/Django_and_nginx.html"&gt;Setting up Django and your web server with uWSGI and nginx — uWSGI 2.0 documentation&lt;/a&gt;を参考にした。&lt;/p&gt;
&lt;h3&gt;uwsgi_params&lt;/h3&gt;
&lt;p&gt;uwsgi_paramsは/etc/nginx/uwsgi_paramsに入ってるけど、修正する可能性もあるので、/path/to/mysite/uwsgi_paramsにコピーして、それを修正する。&lt;/p&gt;
&lt;h3&gt;nginx.conf&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;upstream&lt;/span&gt; &lt;span class="nt"&gt;django&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;server&lt;/span&gt; &lt;span class="m"&gt;127&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="m"&gt;1234&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="m"&gt;#uwsgi&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ini&lt;/span&gt;&lt;span class="err"&gt;で設定したポート番号&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nt"&gt;server&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;server_name&lt;/span&gt; &lt;span class="n"&gt;hoge&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;example&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;com&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="n"&gt;substitute&lt;/span&gt; &lt;span class="n"&gt;your&lt;/span&gt; &lt;span class="n"&gt;machine&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="n"&gt;IP&lt;/span&gt; &lt;span class="n"&gt;address&lt;/span&gt; &lt;span class="n"&gt;or&lt;/span&gt; &lt;span class="n"&gt;FQDN&lt;/span&gt;
        &lt;span class="n"&gt;charset&lt;/span&gt;     &lt;span class="n"&gt;utf&lt;/span&gt;&lt;span class="m"&gt;-8&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="n"&gt;max&lt;/span&gt; &lt;span class="n"&gt;upload&lt;/span&gt; &lt;span class="nb"&gt;size&lt;/span&gt;
    &lt;span class="n"&gt;client_max_body_size&lt;/span&gt; &lt;span class="m"&gt;75&lt;/span&gt;&lt;span class="n"&gt;M&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;   &lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="n"&gt;adjust&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;taste&lt;/span&gt;
&lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="n"&gt;Django&lt;/span&gt; &lt;span class="n"&gt;media&lt;/span&gt;
&lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="n"&gt;Finally&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;send&lt;/span&gt; &lt;span class="n"&gt;all&lt;/span&gt; &lt;span class="n"&gt;non&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;media&lt;/span&gt; &lt;span class="n"&gt;requests&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;Django&lt;/span&gt; &lt;span class="n"&gt;server&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;
    &lt;span class="n"&gt;location&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="err"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;uwsgi_pass&lt;/span&gt;  &lt;span class="n"&gt;django&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="n"&gt;include&lt;/span&gt;     &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;to&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;mysite&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;uwsgi_params&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;uwsgi_params&lt;/span&gt; &lt;span class="n"&gt;file&lt;/span&gt; &lt;span class="n"&gt;you&lt;/span&gt; &lt;span class="n"&gt;installed&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="err"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;これを作成して、/etc/nginx/sites-enabledへシンボリックリンクを貼っておけば良い&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ service nginx restart &lt;span class="c1"&gt;#reloadでもいい？&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;でWebアクセスできるようになる。はず。&lt;/p&gt;
&lt;h2&gt;静的ファイルの設定手順&lt;/h2&gt;
&lt;p&gt;nginx+uwsgiでプロジェクトを公開した場合、manage.py runserverの場合と違い、静的ファイルの置場を設定しないといけないっぽい&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;location ~ ^/static/ {
root /path/to/mysite;
break;
}
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;settings.pyにSTATIC_URL, STATIC_ROOTを追加&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# settings.py&lt;/span&gt;
&lt;span class="n"&gt;STATIC_URL&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;/static/&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;STATIC_ROOT&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;/path/to/mysite/static&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;テンプレでは次のように静的ファイルにアクセスする&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;script&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;text/javascript&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;src&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;{{ STATIC_URL }}js/hoge.js&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;script&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;この設定だけでは静的ファイルが/path/to/mysite/staticに入ってないので、collectstaticコマンドを使ってファイルを集める&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ python manage.py collectstatic
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;これで各アプリに入ってる静的ファイルとadmin関連の静的ファイル全て持って来てくれる&lt;/p&gt;
&lt;h2&gt;設定反映&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ sudo service nginx reload &lt;span class="c1"&gt;#ubuntuの場合&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;deploy時に良く使うメモ&lt;/h2&gt;
&lt;p&gt;mysite/settings.pyを以外を設定ファイルとして読み込む場合はmanage.pyに以下のオプションを付ける
uwsgi.iniのenvも変更しておく&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;--settings&lt;span class="o"&gt;=&lt;/span&gt;mysite.settings_deploy
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;設定ファイルは例えばこんな感じで書いて、元のsettings.pyを上書きする&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;pystock.settings&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;
&lt;span class="n"&gt;DATABASES&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="o"&gt;.......&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</summary><category term="python"></category><category term="django"></category></entry><entry><title>Kobe.R #12に参加しました</title><link href="http://blog.shigepon.info/blog/2014/10/28/kobe-dot-r-no-12/" rel="alternate"></link><updated>2014-10-28T08:13:51+09:00</updated><author><name>shigepon</name></author><id>tag:blog.shigepon.info,2014-10-28:blog/2014/10/28/kobe-dot-r-no-12/</id><summary type="html">&lt;p&gt;勉強会の話なので丁寧語で。10/26に&lt;a href="http://kobexr.doorkeeper.jp/events/16101"&gt;Kobe.R #12&lt;/a&gt;があったので参加してきました。神戸で定期的に開催されているRの勉強会です。今回はたまたま大阪で開かれました。前回と同様誰がされたか名前を記憶していなかったりするので、とりあえず内容だけ紹介します。&lt;/p&gt;
&lt;h2&gt;回帰分析の基礎&lt;/h2&gt;
&lt;p&gt;@florets1さん&lt;/p&gt;
&lt;p&gt;Rのコマンドを叩いて結果を確認しながら回帰分析の基礎を学べる発表でした。回帰分析はある程度知っていても、Rで実際にやるとこんな感じというのが分かって面白かったです。あと、基礎の部分も何となくで素通りしていた部分を改めて説明してもらえたりするので、とても為になる発表でした。&lt;/p&gt;
&lt;p&gt;Rは結果をプロットなどで確認しやすかったり、要約を出してくれたりするのがとても便利です。評価はRで行って、定期的な処理になったらPythonで実装するというやりかたもアリかなと妄想しました。&lt;/p&gt;
&lt;h2&gt;クラスタリングについて&lt;/h2&gt;
&lt;p&gt;Twitter ID @Wakamatzさん&lt;/p&gt;
&lt;!-- more --&gt;

&lt;p&gt;色んなデータをどうやってグループ分け（クラスタリング）するかという手法についての発表でした。基本は何グループに分けるかを指定して、その数に収束するまでクラスタリングするみたいですが、グループ数を決められない場合には自動的に決定する手法もあるそうです。が、なかなか難しい手法みたいです。&lt;/p&gt;
&lt;h2&gt;Rのこれから&lt;/h2&gt;
&lt;p&gt;不明(別のR勉強会を主催されていた方)&lt;/p&gt;
&lt;p&gt;スマホでもサーバクライアント型のサービスが増えてくるだろうから、サーバ内での解析にRが使えるんじゃないかという話でした。RDBやNOSQLとの接続が楽に出来るようになるとそうなるかも。Rをスマホにインストールするのは難しいとお話があったのですが、インストールはやろうと思えば出来るのでしょうか？脱獄したら出来るでしょうが。&lt;/p&gt;
&lt;h2&gt;カフェをなんとか盛り上げたい&lt;/h2&gt;
&lt;p&gt;不明(神戸で英会話カフェを主催されている方)&lt;/p&gt;
&lt;p&gt;神戸で毎週土曜日AM11:00〜PM2:00まで英会話の機会に使えるカフェを運営しているというお話と、カフェの問題点を紹介してくれました。今後何かRで分析する話になるかも？？？&lt;/p&gt;
&lt;h2&gt;Rで時系列データを取り扱う&lt;/h2&gt;
&lt;p&gt;Rで時系列データを扱い、時間に対して周期性があるデータから未来予測したりというライブラリの紹介とデモを見せて頂きました。Rのライブラリ紹介と実際に使った結果を見ることが出来ると理解が深まってとてもありがたいです。&lt;/p&gt;
&lt;p&gt;前回今回と大阪で参加しているのですが、今度は神戸で開催される時も参加してみようかと思います。&lt;/p&gt;</summary><category term="event"></category><category term="R"></category></entry><entry><title>PhantomJSとSeleniumをpythonから使ってみる</title><link href="http://blog.shigepon.info/blog/2014/10/10/phantomjs/" rel="alternate"></link><updated>2014-10-10T13:33:48+09:00</updated><author><name>shigepon</name></author><id>tag:blog.shigepon.info,2014-10-10:blog/2014/10/10/phantomjs/</id><summary type="html">&lt;p&gt;スクレーピングするのに便利な方法を調べてる内に、PhantomJSが良さげだなと思ったので、軽く使ってみた。参考&lt;a href="http://blog.kzfmix.com/entry/1379417397"&gt;Python+Selenium+PhantomJSが快適すぎる&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;PhantomJSのインストール&lt;/h2&gt;
&lt;p&gt;Ubuntuを使ってるので&lt;a href="http://phantomjs.org/build.html"&gt;PhantomJSのページ&lt;/a&gt;を参考に&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ sudo aptitude update
$ sudo aptitude install build-essential chrpath git-core libssl-dev libfontconfig1-dev libxft-dev
$ git clone git://github.com/ariya/phantomjs.git
$ &lt;span class="nb"&gt;cd&lt;/span&gt; phantomjs
$ git checkout 1.9
$ ./build.sh
&lt;/pre&gt;&lt;/div&gt;


&lt;!-- more --&gt;

&lt;p&gt;あとは./bin/にphantomjsが入っているので、./bin/にパスを通しておしまい&lt;/p&gt;
&lt;h2&gt;Seleniumをpythonから使えるようにする&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ pip install selenium
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;これだけでおk&lt;/p&gt;
&lt;h2&gt;SeleniumでPhantomJSのドライバを使う&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;selenium&lt;/span&gt; &lt;span class="nn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;webdriver&lt;/span&gt;

&lt;span class="n"&gt;driver&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;webdriver&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;PhantomJS&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;driver&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;http://www.yahoo.co.jp&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;driver&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;current_url&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;こんな感じ。何が出来るかは&lt;a href="http://selenium-python.readthedocs.org/en/latest/api.html"&gt;Selenium Python BindingsのWebDriver API&lt;/a&gt;を見ると良い。&lt;/p&gt;
&lt;p&gt;Javascriptをちゃんと評価してくれるので、すんげーやりやすい。昔ながらのフレームや、新規ウィンドウが出るようなものも上手く再現してくれる。すげーすげー&lt;/p&gt;</summary><category term="python"></category></entry><entry><title>Kobe.R #9に参加しました</title><link href="http://blog.shigepon.info/blog/2014/09/22/kobe-dot-r-number-9/" rel="alternate"></link><updated>2014-09-22T20:42:57+09:00</updated><author><name>shigepon</name></author><id>tag:blog.shigepon.info,2014-09-22:blog/2014/09/22/kobe-dot-r-number-9/</id><summary type="html">&lt;p&gt;勉強会の話なので丁寧語で。9/20に&lt;a href="http://kobexr.doorkeeper.jp/events/14808"&gt;Kobe.R #9&lt;/a&gt;があったので参加してきました。大阪で定期的に開催されているRの勉強会です。内容はRに限らず、統計処理をやる上で大事なことを扱うという感じでした。発表は誰がされたか名前を記憶していなかったりするので、とりあえず内容だけ照会します。&lt;/p&gt;
&lt;h2&gt;Statistical Disclosure Controlの紹介&lt;/h2&gt;
&lt;p&gt;Twitter ID @Wakamatzさん&lt;/p&gt;
&lt;p&gt;個人情報を含むデータや、他の情報と組み合わせると個人情報になるデータをどのように匿名化するかという話でした。どうしても匿名化すると、実際に欲しいデータの精度とのトレードオフになるので、それをどう評価するかが重要なようです。
オォっと思った点を羅列します。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;開示リスク（どの程度特定されやすいデータになっているか?）を評価出来るライブラリがRにある。Rすげー。&lt;/li&gt;
&lt;li&gt;匿名化には適当なデータを混ぜたりクラスタリングする手法があるのかー。なるほどー。確かに適当なデータを混ぜると集計精度が落ちそう&lt;/li&gt;
&lt;li&gt;評価手法は何種類かあるけど、とりあえずIL1sという評価法を紹介してもらった。実際計算してみないとなんともいえないかな。&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- more --&gt;

&lt;h2&gt;カードで説明する統計的独立&lt;/h2&gt;
&lt;p&gt;@florets1さん&lt;/p&gt;
&lt;p&gt;トランプのカードを例にして、独立とは何かを説明してくれました。なんとなくで済ませてたところを例を入れて分かりやすく説明してくれました。
どっかの書籍で「○○が独立な場合に△△」とか書かれてイメージはしにくいのが、ざっくりですが、「計算しやすいので△△」くらいに読み替えてよさそうというのが分かった感じです。&lt;/p&gt;
&lt;h2&gt;Powershellいいよって話（タイトル忘れた）&lt;/h2&gt;
&lt;p&gt;Windows8から、常にインストールされているPowershellを使いこなすと、スクリプトで.Net使えたりして便利って話&lt;/p&gt;
&lt;h2&gt;他&lt;/h2&gt;
&lt;p&gt;Rでパイプ使う時はpipe Rが便利とかsql使ってdbアクセスするライブラリとかforループを速く便利にする方法とか教えてもらいました。まだ実際に試してないので、試してみないといかんす。&lt;/p&gt;
&lt;p&gt;次回参加は無理ですが、ちょこちょこ参加したいなと思いました（小並感）。&lt;/p&gt;</summary><category term="event"></category><category term="R"></category></entry><entry><title>ubuntuのmonoでMicrosoft.VisualBasicが動かない件</title><link href="http://blog.shigepon.info/blog/2014/08/20/vb-not-work-on-ubuntu/" rel="alternate"></link><updated>2014-08-20T13:38:34+09:00</updated><author><name>shigepon</name></author><id>tag:blog.shigepon.info,2014-08-20:blog/2014/08/20/vb-not-work-on-ubuntu/</id><summary type="html">&lt;p&gt;なでしこ2にコミットしたりしつつ、実際にUbuntu 12.04で使ってみたりしているが、vb系のインポートが出来ないとか何とか言われたのでメモ&lt;/p&gt;
&lt;p&gt;参考：&lt;a href="http://stackoverflow.com/questions/10071836/vb-net-not-working-on-ubuntu-10-04-with-mono"&gt;.net - VB.NET Not working on Ubuntu 10.04 With Mono - Stack Overflow&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;要は普通にmonoをインストールしただけ&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ sudo aptitude install mono-devel
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;だとVB系のライブラリはインストールされないらしい。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ sudo aptitude install mono-vbnc
&lt;/pre&gt;&lt;/div&gt;


&lt;!-- more --&gt;

&lt;p&gt;を追加インストールしておこうということだった。情報無かったので結構はまった。&lt;/p&gt;</summary><category term="linux"></category><category term="nadesiko2"></category></entry><entry><title>djangoで出てくるエラーメッセージメモ</title><link href="http://blog.shigepon.info/blog/2014/08/06/django-error/" rel="alternate"></link><updated>2014-08-06T15:42:43+09:00</updated><author><name>shigepon</name></author><id>tag:blog.shigepon.info,2014-08-06:blog/2014/08/06/django-error/</id><summary type="html">&lt;p&gt;Djangoでエラーメッセージが出た時に、どこから当たりを付けていくか
イチイチググってるので、まとめておく。逐次追記。&lt;/p&gt;
&lt;h2&gt;other_dict must be a mapping (dictionary-like) object&lt;/h2&gt;
&lt;p&gt;returnで返す時のdictionaryが&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;{&amp;#39;a&amp;#39;,&amp;#39;b&amp;#39;}
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;となってないかチェック。正しくは&lt;/p&gt;
&lt;!-- more --&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;{&amp;#39;a&amp;#39;:&amp;#39;b&amp;#39;}
&lt;/pre&gt;&lt;/div&gt;


&lt;!-- more --&gt;

&lt;h2&gt;Django ImportError when importing xxx&lt;/h2&gt;
&lt;p&gt;ライブラリをインストールしていない場合、&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ pip install xxx
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;ライブラリ入れてる場合、xxxと同じファイル名のpythonファイル（とキャッシュ）が無いかチェックして、名前を変更するか、消す&lt;/p&gt;
&lt;h2&gt;locale.Error: unsupported locale setting&lt;/h2&gt;
&lt;p&gt;localeの設定名がおかしい。例えばこんな風だとエラー&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;locale&lt;/span&gt;
&lt;span class="n"&gt;locale&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setlocale&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;locale&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;LC_ALL&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;ja_JP&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;こうするとオッケー&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;locale&lt;/span&gt;
&lt;span class="n"&gt;locale&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setlocale&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;locale&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;LC_ALL&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;ja_JP.utf8&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;IndexError: list index out of range&lt;/h2&gt;
&lt;p&gt;リストのインデックスが範囲外なので、該当する箇所のリストの添字をチェック。そもそもリストになっているかどうかもチェック。&lt;/p&gt;</summary><category term="python"></category><category term="django"></category><category term="memo"></category></entry><entry><title>まっちゃ139勉強会に参加しました</title><link href="http://blog.shigepon.info/blog/2014/07/29/matcha-139/" rel="alternate"></link><updated>2014-07-29T00:36:54+09:00</updated><author><name>shigepon</name></author><id>tag:blog.shigepon.info,2014-07-29:blog/2014/07/29/matcha-139/</id><summary type="html">&lt;p&gt;まっちゃ勉強会はITカレンダーで結構気になってたんですが、なかなか日が合わずに参加出来なかったのですが、&lt;a href="http://www.matcha139.jp/workshop/28thworkshop"&gt;あまりに面白そうな内容&lt;/a&gt;だったので初参加してきました。&lt;/p&gt;
&lt;h2&gt;ネット違法有害情報規制の最新状況－児童ポルノ法改正を中心に&lt;/h2&gt;
&lt;p&gt;会場に着いた時にはもうすでに始まっていました。
とても楽しい？怖い？濃い？話ばかりだったんですが、セッション内容は公開できないそうなので、一言だけ。&lt;/p&gt;
&lt;p&gt;奥村弁護士、園田弁護士は&lt;em&gt;児童ポルノに詳しい人&lt;/em&gt;ではなくて&lt;em&gt;児童ポルノ法に詳しい人&lt;/em&gt;なのでTVで紹介されても勘違いしないで下さい。&lt;/p&gt;
&lt;p&gt;もう一言だけ、セッションとは関係ないですが、岡村先生、JPCERT/CC理事就任おめでとうございます！&lt;/p&gt;
&lt;h2&gt;ライトニングトーク&lt;/h2&gt;
&lt;!-- more --&gt;

&lt;p&gt;メモとってないので、うろ覚えみたいになって申し訳ないですが、ざっくりこんな感じでした。抜けてるLTがあったら申し訳ありません。鳥頭です＞＜。&lt;/p&gt;
&lt;!-- more --&gt;

&lt;h3&gt;はなずきん♪さん&lt;/h3&gt;
&lt;p&gt;利用規約読んでる？って話でした。私はどうしても使わないといけないもの以外は読んでます。変な規約載せてるサイト時々ありますしね。&lt;/p&gt;
&lt;h3&gt;dragon_TAさん&lt;/h3&gt;
&lt;p&gt;和服い〜よって話からセキュリティに持っていくという力技のLT？でした。和服はインパクトあります。&lt;/p&gt;
&lt;h3&gt;黒林檎さん&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://atnd.org/events/52714"&gt;私立プログラミングキャンプ2014&lt;/a&gt;参加者募集の話でした。参加出来る人はぜひ！&lt;/p&gt;
&lt;h3&gt;ここから名前覚えてない＞＜申し訳ないです　の人&lt;/h3&gt;
&lt;p&gt;LibreOfficeの話がありました。オープンソースだし、コミュニティに参加しよう！って感じでした。LibreOfficeは使ってます。&lt;/p&gt;
&lt;p&gt;もう一つ急いでプレゼン資料作ってた方（確かすがわらさん）、今後のセキュリティ関連のイベントについてお話していました。色々あるということしか頭に残ってない・・・申し訳ないです。&lt;/p&gt;
&lt;p&gt;また、この勉強会は休憩時間にお菓子が食べれるとか、学生の方に交通費をカンパするとか色々凄いなと思いました（小並感）。これからも時間が合えば参加したいな〜と思えるイベントでした。&lt;/p&gt;
&lt;p&gt;ちなみに懇親会で渡した名刺とメインで使ってるtwitterアカウントが違ってたりします。メインは&lt;a href="https://twitter.com/shigepon"&gt;@shigepon&lt;/a&gt;です。以後よろしくです。&lt;/p&gt;</summary><category term="event"></category></entry><entry><title>Djangoでpython-social-authを使うための最低限の設定</title><link href="http://blog.shigepon.info/blog/2014/07/23/use-python-social-auth-in-django/" rel="alternate"></link><updated>2014-07-23T09:40:36+09:00</updated><author><name>shigepon</name></author><id>tag:blog.shigepon.info,2014-07-23:blog/2014/07/23/use-python-social-auth-in-django/</id><summary type="html">&lt;p&gt;「djangoでfacebook, twitter, mixiでの認証使うにはどうしたらいいんだろ？」&lt;a href="http://twitter.com/shigepon/status/491397829215006720"&gt;URL&lt;/a&gt;と質問したら、@key3さんから「@shigepon python-social-authおすすめ &lt;a href="https://t.co/uWqOX8Xh94"&gt;https://t.co/uWqOX8Xh94&lt;/a&gt;」&lt;a href="http://twitter.com/key3/status/491404335335477248"&gt;URL&lt;/a&gt;と教えて貰ったので試してみた。&lt;/p&gt;
&lt;p&gt;一日試してみて、認証出来たんだけど、&lt;a href="http://psa.matiasaguirre.net/docs/index.html"&gt;ドキュメント&lt;/a&gt;見ても、どれが最低限必要な設定なのか良く分からなかったのでブログに残しておく。&lt;/p&gt;
&lt;h2&gt;python-social-authをインストール&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ pip install python-social-auth
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;設定&lt;/h2&gt;
&lt;!-- more --&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# settings.py&lt;/span&gt;
&lt;span class="n"&gt;INSTALLED_APPS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;
        &lt;span class="s1"&gt;&amp;#39;social.apps.django_app.default&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;AUTHENTICATION_BACKENDS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;
        &lt;span class="s1"&gt;&amp;#39;social.backends.twitter.TwitterOAuth&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="c1"&gt;#Twitterでの認証をする場合。他の認証がある場合は該当するバックエンドを追加&lt;/span&gt;
        &lt;span class="s1"&gt;&amp;#39;django.contrib.auth.backends.ModelBackend&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;
        &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;SOCIAL_AUTH_TWITTER_KEY&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="c1"&gt;#これと次の行はTwitter認証用。別の認証を用いる場合は別の設定が必要&lt;/span&gt;
&lt;span class="n"&gt;SOCIAL_AUTH_TWITTER_SECRET&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;SOCIAL_AUTH_LOGIN_REDIRECT_URL&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;/&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;SOCIAL_AUTH_LOGIN_URL&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;/login/&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;!-- more --&gt;

&lt;p&gt;注意：
AUTH_USER_MODEL
を加えるとエラー出たので注意(Django 1.6)&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# urls.py&lt;/span&gt;
    &lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;include&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;social.apps.django_app.urls&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;namespace&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;social&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)),&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;設定後&lt;/h2&gt;
&lt;p&gt;syncdbしておく&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ python manage.py syncdb
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;これで例えばtwitter認証の場合に&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;http://host/login/twitter
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;にアクセスすると認証を行ってくれるようになった。
テンプレートにリンクを作りたい場合は&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;a&lt;/span&gt; &lt;span class="na"&gt;href&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;\{\% url &amp;#39;social:base&amp;#39; &amp;#39;twitter&amp;#39; \%\}&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;login&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;a&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;とかやると作れる。
「twitter」の部分は認証の種類によって変えるが、どういうルールで名前を決めるのかイマイチ分かってない。試行錯誤が要るかも。&lt;/p&gt;</summary><category term="python"></category><category term="django"></category></entry><entry><title>Groongaアンケート？</title><link href="http://blog.shigepon.info/blog/2014/07/05/groonga-qa/" rel="alternate"></link><updated>2014-07-05T13:52:55+09:00</updated><author><name>shigepon</name></author><id>tag:blog.shigepon.info,2014-07-05:blog/2014/07/05/groonga-qa/</id><summary type="html">&lt;p&gt;今回は他の人からの話があるので丁寧語で。
@ktouさんからGroongaについて「Groongaについてのいくつかの質問について答えて欲しい」との話がありましたので、ブログに載せておきます。&lt;/p&gt;
&lt;p&gt;質問は以下の3点&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Groongaを選んだ決め手&lt;/li&gt;
&lt;li&gt;実際にGroongaを使っていてよいと思っているところ&lt;/li&gt;
&lt;li&gt;Groongaがこうなるともっとうれしいと思うところ&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Groongaを選んだ決め手&lt;/h2&gt;
&lt;p&gt;現在運営しているサービス&lt;a href="http://thoz.org"&gt;とある法律判例の全文検索&lt;/a&gt;を作り始める時に、全文検索をサービスに入れるのを前提に考えてましたので、全文検索エンジンについて調べました。DBとしてはPostgreSQLをメインで使っているので、当時は選択肢として次のようなものがありました。&lt;/p&gt;
&lt;!-- more --&gt;

&lt;ul&gt;
&lt;li&gt;Groonga（まだバージョン1になってなかったような）&lt;/li&gt;
&lt;li&gt;Senna&lt;/li&gt;
&lt;li&gt;tsvector&lt;/li&gt;
&lt;li&gt;namazu&lt;/li&gt;
&lt;li&gt;Hyper Estraier&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;最初は何もアプリを入れなくていいのでtsvectorを使った全文検索を試してみたんですが、bigramで日本語が使えない。使うならソースからコンパイルというのが当時面倒だったので辞めました（当時からVagrantとかDockerとかあって、色々試せたらbigramでいってたかも）。&lt;/p&gt;
&lt;p&gt;なので、他4つを比較した訳なんですが、作るサービスは個人サービスだし、なるべく新しいもので、かつ日本人が作っているものを利用してみようと思い、Groongaを選択しました。あと、Groongaが「Sennaの後継」という立場だったのも大きかったと思います。Sennaの後継なら新しいアプリだとしても、それなりに信用があるだろう。すぐにメンテされなくなるようなものでも無いだろうという判断をしました。&lt;/p&gt;
&lt;h2&gt;実際にGroongaを使っていてよいと思っているところ&lt;/h2&gt;
&lt;p&gt;まずサーバ1個でかなり無茶な使い方してもちゃんと動いてくれるところです。Groonga勉強会では「データ量がメモリを超えだしたら分散を考えて」みたいな話が出たのですが、結構超えてても何の問題もなく動いてくれます。&lt;/p&gt;
&lt;p&gt;次は言語バインディングとかあまり考えなくてもHTTPでアクセス出来る方法を用意してくれているので、HTTPアクセスさえ出来ればどんな言語からでも利用出来る点が良いと思います。Mroongaは全く使っていませんし、Rroongaもデータのバックアップ用途以外は全く使ってません。HTTPアクセス出来る場合は、管理もHTTPで出来ます。これも便利だと思います。&lt;/p&gt;
&lt;p&gt;ドリルダウン、タグ検索、補完補正など、全文検索以外にも使える機能が沢山あります。沢山ありすぎて利用できていない機能が多々ありますがorz。&lt;/p&gt;
&lt;p&gt;機能とは関係ありませんが、TwitterでGroongaについてボヤくと@ktouさんがフォローしてくれるのがいつもとても助かっています＞＜。そういう人が居ると、使う時にとても心強いです。&lt;/p&gt;
&lt;p&gt;名前が好きです。Elasticなんたらは何かエラそうですが、Groongaはグルグルしてるっぽいのがいいです。&lt;/p&gt;
&lt;h2&gt;Groongaがこうなるともっとうれしいと思うところ&lt;/h2&gt;
&lt;p&gt;現在もとてもありがたいのですが、こうなると嬉しい点を箇条書きします。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;現在使っている機能以外でもっと色々出来るようなのですが、情報が少ない気がします。ドキュメントが充実してくるととても嬉しいです。ドキュメントが充実すればきっとTwitterでボヤく率も減る・・・かも。&lt;/li&gt;
&lt;li&gt;Rroonga使わないでGroonga単体の機能として、大容量データのバックアップを取れると嬉しいです。&lt;/li&gt;
&lt;li&gt;難しいと思いますが、複数カラム（カラムA,B)での全文検索で、CとDを検索したい時、カラムAにCが、カラムBにDが入ってる時に、検索結果として出力出来るフラグみたいなのを入れて欲しいです。&lt;/li&gt;
&lt;li&gt;もしかしたら出来るのかもしれませんが、ソースからビルドした場合にgroonga-server系の機能が使えるようにしてもらえるとHTTPから使っている身としては嬉しいです。&lt;/li&gt;
&lt;li&gt;cliでのヒストリーは特に何もアプリ入れなくても出来るようにしてくれるとまた嬉しいです。&lt;/li&gt;
&lt;li&gt;sqlのinsert文みたいな形でloadが出来ると、RDBで使っていたテーブルを丸々移動とか手軽に出来そうなので、そういうのが出来ると嬉しいです。もしくはcsvでloadが出来るとか。まぁsql使うならMroonga使えって話ですが・・・単体でも特にloadについてRDBから書き出せる形式のものを読み込めると嬉しいなーなんて思いました。&lt;/li&gt;
&lt;li&gt;勉強会の時に「ぐるーんが」なのか「むるーんが」なのか「るるーんが」なのかが発音でハッキリしませんでしたが、私の耳が悪いんですねきっと。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;以上追記するかもしれませんが、こんな感じで〜&lt;/p&gt;</summary><category term="event"></category><category term="groonga"></category></entry><entry><title>Django1.6.5でPostgreSQLとBootstrap使ったアプリを作ってみた(3):データの一覧とページングを用意する</title><link href="http://blog.shigepon.info/blog/2014/07/02/django-show-list-with-paging/" rel="alternate"></link><updated>2014-07-02T11:51:44+09:00</updated><author><name>shigepon</name></author><id>tag:blog.shigepon.info,2014-07-02:blog/2014/07/02/django-show-list-with-paging/</id><summary type="html">&lt;h2&gt;データの一覧表示&lt;/h2&gt;
&lt;p&gt;あとで参考ページとか追記する予定。
データの一覧表示には何種類かファイルが必要（モデル、ビュー、テンプレート、URLディスパッチャー）。
それぞれこんな感じで用意する。&lt;/p&gt;
&lt;h3&gt;モデル&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# models.py&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.db&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;
&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Bocho&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Model&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;TextField&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;court&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;TextField&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;date&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DateField&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="o"&gt;....&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;!-- more --&gt;

&lt;p&gt;モデルではフィールドとその属性を決める。このコードではクラスの中でMetaクラスを定義すると、モデルのテーブル名とかそういうのを色々定義出来るみたい。定義出来るフィールドの種類はDjangoのマニュアルに書いてあるのですぐ分かる。&lt;/p&gt;
&lt;h3&gt;ビュー&lt;/h3&gt;
&lt;p&gt;データをテンプレートに設定する部分。リクエストパラメータから、必要なデータを取得する部分。多分。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# views.py&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.shortcuts&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;render&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.core.paginator&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Paginator&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;PageNotAnInteger&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;EmptyPage&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;bocho.models&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Bocho&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;index&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="c1"&gt;#requestはHttpRequestオブジェクト&lt;/span&gt;
    &lt;span class="n"&gt;objects&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Bocho&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;objects&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;order_by&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;-date&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;paginator&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Paginator&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;objects&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;#10行毎にページング&lt;/span&gt;
    &lt;span class="n"&gt;page&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;GET&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;page&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;#GETパラメータからページ番号を取得(初期値は1)&lt;/span&gt;
    &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;object_list&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;paginator&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;page&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;page&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;#ここでページング&lt;/span&gt;
    &lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="n"&gt;PageNotAnInteger&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;object_list&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;paginator&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;page&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;#変なページ番号なら1ページ目&lt;/span&gt;
    &lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="n"&gt;EmptyPage&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;object_list&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;paginator&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;page&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;paginator&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;num_pages&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;#存在しないページ番号なら最後のページ&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;render&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;list.html&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;object_list&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;object_list&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;参考&lt;a href="http://www.djangoproject.jp/doc/ja/1.0/ref/request-response.html"&gt;リクエストオブジェクトとレスポンスオブジェクト — Django v1.0 documentation&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;テンプレート&lt;/h3&gt;
&lt;p&gt;bocho/templates/list.htmlを作る。中身は一部だけ。{{ 変数名 }}でビューで割り当てた変数を表示する。
あと、色々テンプレート用のタグがある。これもDjangoマニュアルを見ると分かる。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;# list.html
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;table&lt;/span&gt; &lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;table&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;thead&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;th&lt;/span&gt; &lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;span2&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;日付&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;th&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;th&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;名称&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;th&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;th&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;裁判所&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;th&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;thead&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
{% for object in object_list %}
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;tr&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;td&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;{{ object.date|date:&amp;quot;Y-m-d&amp;quot; }}&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;td&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;td&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;{{ object.name }}&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;td&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;td&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;{{ object.court }}&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;td&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;tr&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
{% endfor %}
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;table&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;URLディスパッチャー&lt;/h3&gt;
&lt;p&gt;ドメイン名/bocho/で一覧表示出来るように正規表現使ってviewsに割り当てる。&lt;/p&gt;
&lt;p&gt;myproject/urls.py&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# urls.py&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.conf.urls&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;patterns&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;include&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;url&lt;/span&gt;
&lt;span class="n"&gt;urlpatterns&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;patterns&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="c1"&gt;# Examples:&lt;/span&gt;
    &lt;span class="c1"&gt;# url(r&amp;#39;^$&amp;#39;, &amp;#39;pycourt.views.home&amp;#39;, name=&amp;#39;home&amp;#39;),&lt;/span&gt;
    &lt;span class="c1"&gt;# url(r&amp;#39;^blog/&amp;#39;, include(&amp;#39;blog.urls&amp;#39;)),&lt;/span&gt;
    &lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;r&amp;#39;bocho/^&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;include&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;bocho.urls&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;namespace&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;bocho&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)),&lt;/span&gt; &lt;span class="c1"&gt;#url(正規表現, 別のurlsに投げる設定。ここではbocho/urls.pyに投げる)&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;bocho/urls.pyは無いので作る。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# urls.py&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.conf.urls&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;patterns&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;include&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;url&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;bocho&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;views&lt;/span&gt;
&lt;span class="n"&gt;urlpatterns&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;patterns&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;r&amp;#39;^$&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;views&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;index&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="c1"&gt;#url(正規表現, 割り当てるビュー, URL作ったりリダイレクトする時に付けておくと便利な名前)&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;一覧はどうせページングするので、views.pyはこの形で覚えておくと良いかも&lt;/p&gt;
&lt;h2&gt;ページング&lt;/h2&gt;
&lt;p&gt;どうせbootstrapを使うのでdjango-bootstrap-toolkitを使う方法を載せる。
ページ分けする対象をobject_list、ページ送りのURLにpage=以外に設定するパラメータをreqとすると、&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;# list.html
{% load bootstrap_toolkit %}↲
{% bootstrap_pagination object_list align=&amp;quot;center&amp;quot; extra=req %}
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;と設定しておけば良い。&lt;/p&gt;
&lt;h2&gt;ページングにパラメータを付ける&lt;/h2&gt;
&lt;p&gt;ついでにメモ
例えば"date=2001-01-01"みたいなパラメータを設定したいんだけど、割り当ててる変数？は日付オブジェクトの場合&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;# list.html
{% bootstrap\_pagination object\_list align=&amp;quot;center&amp;quot; extra=date|date:&amp;quot;Y-m-d&amp;quot;|s    tringformat:&amp;quot;%date=%s&amp;quot;|slice:&amp;quot;1:&amp;quot; %}
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;こんな感じで文字列をくっつけてパラメータにすることが出来る。かなり強引&lt;a href="https://www.google.com/url?q=http://d.hatena.ne.jp/feiz/20110414/1302771447&amp;amp;usd=2&amp;amp;usg=AFQjCNFN9kzyrEJj_WZEatK2wIL07eaD0w"&gt;参考&lt;/a&gt;&lt;/p&gt;</summary><category term="django"></category><category term="bootstrap"></category><category term="python"></category></entry><entry><title>ansible memo</title><link href="http://blog.shigepon.info/blog/2014/07/01/ansible-memo/" rel="alternate"></link><updated>2014-07-01T16:56:06+09:00</updated><author><name>shigepon</name></author><id>tag:blog.shigepon.info,2014-07-01:blog/2014/07/01/ansible-memo/</id><summary type="html">&lt;p&gt;ansibleで自分が欲しい情報が色んなページに散らばっていたので、メモ&lt;/p&gt;
&lt;!-- more --&gt;

&lt;h3&gt;ansible-playbookのオプション&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;-K: sudoのパスワード入力&lt;/li&gt;
&lt;li&gt;-C (--check): 実際に実行しないでチェックしてくれる&lt;/li&gt;
&lt;li&gt;-l name: hostsファイルに[name]と書かれたホストにのみ実行&lt;/li&gt;
&lt;li&gt;-i hostsfile: 初期状態では/etc/ansible/hostsを見に行くので、自分で指定したい場合に&lt;/li&gt;
&lt;li&gt;--syntax-check: playbookの書式チェック。書いて最初にやるといい&lt;/li&gt;
&lt;li&gt;--list-tasks: playbookで行う内容をリストアップ&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;ansibleで鍵認証のsshで処理したい&lt;/h2&gt;
&lt;p&gt;-c paramikoでなく-c sshを使うとssh_configの値を使うことが出来る　&lt;/p&gt;
&lt;h2&gt;ansibleで鍵認証のsshで処理したい&lt;/h2&gt;
&lt;p&gt;-c paramikoでなく-c sshを使うとssh_configの値を使うことが出来る。　&lt;/p&gt;
&lt;p&gt;参考：&lt;a href="https://github.com/ansible/ansible/issues/1172"&gt;ansible is not using .ssh/config · Issue #1172 · ansible/ansible&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;チェック時の注意点&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;何かをaptとかでインストールしてそのアプリを使って何かインストールしようとするとエラーが出る&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;aptにリポジトリ追加して、アップデートして何かインストールしようとするとエラーが出る&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;どちらも実際に動かすとエラーは出ない&lt;/p&gt;
&lt;h2&gt;postgresqlのデータベースロケール設定&lt;/h2&gt;
&lt;p&gt;ロケール設定してから一旦サービスを再起動する&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    - name: Install language-pack-ja 
      apt: name=language-pack-ja
    - name: set locale
      locale_gen: name=ja_JP.UTF-8 state=present
    - name: first restart
      service:
        name: &amp;#39;postgresql&amp;#39;
        state: &amp;#39;restarted&amp;#39;
    - name: drop database stock if exist
      sudo_user: postgres
      postgresql_db: name=stock state=absent
    - name: create database stock
      sudo_user: postgres
      postgresql_db: &amp;gt;
        name=stock-
        encoding=&amp;#39;UTF-8&amp;#39;
        lc_collate=&amp;#39;ja_JP.UTF-8&amp;#39;
        lc_ctype=&amp;#39;ja_JP.UTF-8&amp;#39;
        template=&amp;#39;template0&amp;#39;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;参考：&lt;a href="http://serverfault.com/questions/491237/postgresql-9-2-invalid-locale-name-on-ubuntu-12-04"&gt;Postgresql 9.2 "invalid locale name" on Ubuntu 12.04 - Server Fault&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;replaceとlineinfile&lt;/h2&gt;
&lt;p&gt;単純な置換、削除ならreplaceが直感的なので良い。
追加とかある場合はlineinfileが色々できて良い。&lt;/p&gt;
&lt;h2&gt;virtualenv関連&lt;/h2&gt;
&lt;p&gt;virtualenvのインストールだけならpipでいけるが、virtualenvの環境を初期化しておきたいのでこんな感じ&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    - name: install virtualenv
      pip: name=virtualenv state=latest
    - name: initialize virtualenv
      command: virtualenv /path/to/env creates=&amp;quot;/path/to/env&amp;quot;
    - name: install request on vertualenv
      pip:
        name=requests
        virtualenv=/path/to/env
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;requestsは最低でも入れておかないとssl関連のwarningが出る&lt;/p&gt;
&lt;p&gt;参考：&lt;a href="http://stackoverflow.com/questions/29991041/why-am-i-getting-insecureplatformwarning-on-mac"&gt;python - Why am I getting InsecurePlatformWarning on mac? - Stack Overflow&lt;/a&gt;、&lt;a href="http://stackoverflow.com/questions/26402123/ansible-creating-a-virtualenv"&gt;python - Ansible creating a virtualenv - Stack Overflow&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;GATHERING FACTSで止まる時&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;まずsudoを外して-Cで動くかチェック&lt;/li&gt;
&lt;li&gt;いけるなら、host側のsudoパスワードが入力出来ていないのが原因なので、--ask-sudo-passを使う。&lt;/li&gt;
&lt;/ul&gt;</summary><category term="memo"></category><category term="ansible"></category><category term="python"></category></entry><entry><title>Python memo</title><link href="http://blog.shigepon.info/blog/2014/06/30/python-memo/" rel="alternate"></link><updated>2014-06-30T20:38:44+09:00</updated><author><name>shigepon</name></author><id>tag:blog.shigepon.info,2014-06-30:blog/2014/06/30/python-memo/</id><summary type="html">&lt;p&gt;Djangoやり始めたので、その過程で記録しておきたいことをメモ。&lt;/p&gt;
&lt;h2&gt;pip freezeでWarning: cannot find svn location for distribute==0.6.24dev-r0&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ sudo pip install --upgrade distribute
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;でおk&lt;/p&gt;
&lt;h2&gt;pipで一気にインストールする&lt;/h2&gt;
&lt;p&gt;pip freezeで出てくる出力をファイルに書き出したものを使うと、別の環境で同じ状態にもっていける。ファイルからバージョン情報を消すと最新の状態でインストール出来る。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ pip install -r freezed.txt
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;for文でループカウント取得&lt;/h2&gt;
&lt;p&gt;参考&lt;a href="http://fujishinko.exblog.jp/7669024"&gt;Python 配列をfor文でまわしているときのループカウント取得 : fujishinko 雑記帳&lt;/a&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;item&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;enumerate&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;a&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;b&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;c&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]):&lt;/span&gt;
  &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;item&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;!-- more --&gt;

&lt;h2&gt;日本語のコマンドライン引数取得&lt;/h2&gt;
&lt;p&gt;参考&lt;a href="http://www.yukun.info/blog/2008/07/python-command-line-arguments.html"&gt;Python: コマンドライン引数の取得 – sys.argv変数&lt;/a&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;#hoge.py&lt;/span&gt;
&lt;span class="c1"&gt;# -\*- encoding: utf-8 -\*-&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;sys&lt;/span&gt;
&lt;span class="n"&gt;argv&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;argv&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;decode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;utf-8&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ python hoge.py あいうえお
あいうえお
$
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;コマンド実行して実行結果を取得&lt;/h2&gt;
&lt;p&gt;参考&lt;a href="http://qiita.com/mokemokechicken/items/a84b0aa96b94d1931f08"&gt;Python の subprocess で出力を受け取るときは communicate() を使おう - Qiita&lt;/a&gt;
subprocessを使う。何か昔は別の手法だったらしい。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;subprocess&lt;/span&gt;
&lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;subprocess&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Popen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;echo &amp;#39;hoge&amp;#39;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;shell&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;stdout&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;subprocess&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;PIPE&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;stderr&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;subprocess&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;PIPE&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;wait&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;stdout_data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;stderr_data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;communicate&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;stdout_data&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;decode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;utf-8&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;strip&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;親クラスのメソッド呼び出し&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Hoge&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;aaa&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;param&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;param&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Fuga&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Hoge&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;bbb&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;param&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;hage&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;super&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Fuga&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;aaa&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;param&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;f&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Fuga&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;bbb&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;test&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;こんな感じ。お作法を忘れがち。&lt;/p&gt;
&lt;h2&gt;正規表現オブジェクトのパターンをチェックする方法&lt;/h2&gt;
&lt;p&gt;他のライブラリで正規表現が設定されてて、その内容をチェックしたかったので調べてみたら、patternプロパティを見れば良いらしい&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;re&lt;/span&gt;
&lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;re&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;compile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;^hoge&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;re&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pattern&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;参考：&lt;a href="http://compgroups.net/comp.lang.python/how-to-print-sre_pattern-regexp-object-text/309372"&gt;How to print SRE_Pattern (regexp object) text for debugging purposes? - comp.lang.python&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;1ヶ月前の日付を求める&lt;/h2&gt;
&lt;p&gt;timedeltaを使うとweeksとかdaysしか指定出来ないので、1ヶ月前の日付を取得しようと思ったら、別の方法が必要になる&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;time&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;datetime&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;date&lt;/span&gt;

&lt;span class="n"&gt;base_date&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;date&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2015&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;one_month_ago&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;date&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fromtimestamp&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;mktime&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;base_date&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;year&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;base_date&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;month&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;base_date&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;day&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;こんな感じで出来る。
参考：&lt;a href="http://blog.kjirou.net/p/381"&gt;[Python] 月の加減算処理ができない？ | それなりブログ&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;日付表示で良く使うフォーマット&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;datetime&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;date&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;date&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2002&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;isoformat&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;としておくと、2002-12-04と表示される&lt;/p&gt;
&lt;h2&gt;lxmlをインストールしようとしたら、fatal error: libxml/xmlversion.h: No such file or directory&lt;/h2&gt;
&lt;p&gt;ライブラリが足らないのでインストールすればおk
&lt;a href="http://stackoverflow.com/questions/15759150/src-lxml-etree-defs-h931-fatal-error-libxml-xmlversion-h-no-such-file-or-di"&gt;python 2.7 - src/lxml/etree_defs.h:9:31: fatal error: libxml/xmlversion.h: No such file or directory - Stack Overflow&lt;/a&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ sudo aptitude install libxml2-dev libxslt1-dev
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;pythonでsudoを付けたコマンドを実行する&lt;/h2&gt;
&lt;p&gt;パスワードをリダイレクトすればおk
&lt;a href="http://stackoverflow.com/questions/13045593/using-sudo-with-python-script"&gt;shell - Using sudo with Python script - Stack Overflow&lt;/a&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;os&lt;/span&gt;
&lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;system&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;echo pass | sudo -S ...&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;popen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;sudo -S ...&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;w&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;pass&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;django rest frameworkでBasic認証のあるサイトを扱う&lt;/h2&gt;
&lt;p&gt;basic認証のあるサイトでdjango rest frameworkを使ったjson apiみたいなのを作ろうと思った時に、認証してアクセスしても&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;{&amp;quot;detail&amp;quot;: &amp;quot;Invalid username/password&amp;quot;}
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;みたいなメッセージが帰ってきてうまく情報を取って来れなかった。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# settings.py&lt;/span&gt;
&lt;span class="n"&gt;REST_FRAMEWORK&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;DEFAULT_AUTHENTICATION_CLASSES&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;と認証を削除するといけた
&lt;a href="http://stackoverflow.com/questions/19693433/django-rest-framework-behind-http-basic-authentication"&gt;nginx - Django Rest Framework behind HTTP Basic Authentication - Stack Overflow&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;リストの文字列をリストに変換する&lt;/h2&gt;
&lt;p&gt;リクエストでリストの文字列をパラメーターにして送って、それをリストとして評価したかったので、調べてみた。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;ast&lt;/span&gt;
&lt;span class="n"&gt;hoge&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;u&amp;#39;[&amp;quot;A&amp;quot;,&amp;quot;B&amp;quot;,&amp;quot;C&amp;quot;]&lt;/span&gt;
&lt;span class="n"&gt;fuga&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ast&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;literal_eval&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;hoge&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;a href="https://docs.python.org/2/library/ast.html#ast.literal%5Feval"&gt;32.2. ast — Abstract Syntax Trees — Python 2.7.10 documentation&lt;/a&gt;見ると&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;This can be used for safely evaluating strings containing Python values from untrusted sources without the need to parse the values oneself.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;と、あるので、変換だけならチェックしなくても問題ない・・・かも？&lt;/p&gt;
&lt;p&gt;参考：&lt;a href="http://stackoverflow.com/questions/1894269/convert-string-representation-of-list-to-list-in-python"&gt;convert string representation of list to list in python - Stack Overflow&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;lxmlで&amp;nbsp;が入った文章をxmlでパース出来ない&lt;/h2&gt;
&lt;p&gt;xmlに&amp;nbsp;（空白）が入っている場合に、xmlとしてパースした場合に&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;lxml.etree.XMLSyntaxError: Entity &amp;#39;nbsp&amp;#39; not defined
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;みたいなメッセージを出されちゃうことがある。解決策としては&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;htmlとしてパースする&lt;/li&gt;
&lt;li&gt;xml定義をしっかりやっておく&lt;/li&gt;
&lt;li&gt;＆の部分を適当に置換&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;くらいがある。&lt;/p&gt;
&lt;h4&gt;htmlとしてパース&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;lxml&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;etree&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;StringIO&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;StringIO&lt;/span&gt;
&lt;span class="n"&gt;parser&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;etree&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;HTMLParser&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;parsed&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;etree&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;HTML&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;StringIO&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;source&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;parser&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;xml定義をしっかり書く&lt;/h4&gt;
&lt;p&gt;xmlとしてしっかり書いて、パーサーのパラメータとしてresolve_entities=Falseと指定すれば良いらしい&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;lxml&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;etree&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;StringIO&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;StringIO&lt;/span&gt;
&lt;span class="n"&gt;source&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&amp;quot;&amp;quot;&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;utf-8&amp;quot;?&amp;gt;&lt;/span&gt;
&lt;span class="s2"&gt;&amp;lt;!DOCTYPE html PUBLIC &amp;quot;-//W3C//DTD HTML 4.01 Transitional//EN&amp;quot; &amp;quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&amp;quot;&amp;gt;&lt;/span&gt;
&lt;span class="s2"&gt;&amp;lt;hoge&amp;gt;&amp;amp;nbsp;fuga&amp;lt;/hoge&amp;gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class="n"&gt;parser&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;etree&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;XMLParser&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;resolve_entities&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;False&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;parsed&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;etree&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;parse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;StringIO&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;source&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;parser&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;etree&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;tostring&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;parsed&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;＆を適当に置換&lt;/h4&gt;
&lt;p&gt;一個一個特殊文字をユニコードに変えるという手もあるけど、とても手間なので&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;source&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;source&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&amp;amp;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&amp;amp;amp;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;とやってからパースすれば通る&lt;/p&gt;
&lt;h2&gt;except時にトレースバックを表示&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;traceback&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;hoge&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="o"&gt;...&lt;/span&gt;
    &lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="ne"&gt;Exception&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;traceback&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;print_exc&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;こんな感じで、tracebackを使えば良い&lt;/p&gt;
&lt;p&gt;参考：&lt;a href="https://doughellmann.com/blog/2009/06/19/python-exception-handling-techniques/"&gt;Python Exception Handling Techniques | Doug Hellmann&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;datetimeからタイムスタンプへの変換（逆も)&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;datetime&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;time&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;datetime_to_timestamp&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;dt&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;timestamp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;mktime&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;dt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;timetuple&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;timestamp&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;timestamp_to_datetime&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;timestamp&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;dt&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fromtimestamp&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;timestamp&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;dt&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;こんな感じ&lt;/p&gt;
&lt;p&gt;参考：&lt;a href="http://uokada.hatenablog.jp/entry/20120217/1329444315"&gt;pythonでdatetimeとtimestampを相互変換するコード - uokadaの見逃し三振は嫌いです&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;パイプで渡されたデータを受け取る&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# encoding: UTF-8&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;sys&lt;/span&gt;
&lt;span class="n"&gt;lines&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;stdin&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;readlines&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;lines&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;こんな感じ。ちょっとしたコマンド作る時に使えるのでメモ&lt;/p&gt;
&lt;p&gt;参考；&lt;a href="http://studiot.jp/blog/?p=321"&gt;[Python]シェルからパイプで渡されたデータをPythonで受け取る « StudioT::DevLog&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;変数が文字列かチェックする&lt;/h2&gt;
&lt;p&gt;文字列が来てる場合はstrptimeやって、他の場合は普通に代入とかそんな場合に、文字列かチェックする必要があるのでメモ&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;hoge&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;fuga&amp;quot;&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;instanceof&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;hoge&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;basestring&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;pass&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;こんな感じ。整数ならbasestringをintにするとかやればおk&lt;/p&gt;
&lt;p&gt;参考：&lt;a href="http://stackoverflow.com/questions/4843173/how-to-check-if-type-of-a-variable-is-string-in-python"&gt;How to check if type of a variable is string in python? - Stack OverflowHow to check if type of a variable is string in python? - Stack Overflow&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;formatにリストを渡す&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;l&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;hoge&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;fuga&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;hage&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;{0},{1},{2}&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;tuple&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

&lt;span class="n"&gt;hoge&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;fuga&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;hage&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;こんな感じ。&lt;/p&gt;
&lt;h2&gt;forループ色々&lt;/h2&gt;
&lt;h3&gt;dict&lt;/h3&gt;
&lt;p&gt;iteritemsを使う&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;isinstance&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;dict&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;vakue&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;iteritems&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
        &lt;span class="k"&gt;pass&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;listとかtuple&lt;/h3&gt;
&lt;p&gt;enumerateを使う。直接listの番号を取ってる訳じゃないけど&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;isinstance&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;list&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;tuple&lt;/span&gt;&lt;span class="p"&gt;)):&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;enumerate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;pass&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;object&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;isinstance&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;o&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;vars&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;o&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;iteritems&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
        &lt;span class="k"&gt;pass&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;psycopg2をインストールする&lt;/h2&gt;
&lt;p&gt;依存ライブラリとしてlibpg-devが必要。postgresql-server-dev-x.xが必要とか言われるけど、こっちで良い。&lt;/p&gt;
&lt;p&gt;参考：&lt;a href="http://stackoverflow.com/questions/28253681/you-need-to-install-postgresql-server-dev-x-y-for-building-a-server-side-extensi"&gt;python - You need to install postgresql-server-dev-X.Y for building a server-side extension or libpq-dev for building a client-side application - Stack Overflow&lt;/a&gt;&lt;/p&gt;</summary><category term="python"></category><category term="memo"></category></entry><entry><title>全文検索エンジンGroongaユーザ勉強会＠神戸に参加しました</title><link href="http://blog.shigepon.info/blog/2014/06/28/groonga-study-kobe-2014-06-27/" rel="alternate"></link><updated>2014-06-28T13:24:22+09:00</updated><author><name>shigepon</name></author><id>tag:blog.shigepon.info,2014-06-28:blog/2014/06/28/groonga-study-kobe-2014-06-27/</id><summary type="html">&lt;p&gt;自分の話でなく、他人の話なので丁寧語で。
6月27日に&lt;a href="http://koberoonga.doorkeeper.jp/events/11578"&gt;Groongaユーザー勉強会＠神戸&lt;/a&gt;に参加しました。ブログに書くまでが勉強会だったのを久々に思い出したので、感想書いてみます。&lt;/p&gt;
&lt;p&gt;正直あまり回数行ったことがない神戸で、さらに行ったこと無い区域で、さらに入り口に「Closed」と書いてあったので、見事に迷いました。スマホくらい持たないといかんかなー。&lt;/p&gt;
&lt;p&gt;で、勉強会の内容は全員の自己紹介の後、@naoa_yさんが、Groongaについて全般的な紹介と事例紹介として&lt;a href="http://patentfield.com/%E3%83%A1%E3%82%A4%E3%83%B3%E3%83%9A%E3%83%BC%E3%82%B8"&gt;特許検索のウェブサービスPatentField&lt;/a&gt;を紹介する間に、途中気づいた点をどんどん質問していく形式となりました。&lt;/p&gt;
&lt;p&gt;LTも時間があればやるはずだったのですが、開始時間が30分遅れたこともあり、出来ませんでした。遅れてすいません＞＜。&lt;/p&gt;
&lt;p&gt;以下、色々感想書くと言いつつ、やっぱ感想を書くの苦手なので、自分が気になったポイントを箇条書きで〜&lt;/p&gt;
&lt;h3&gt;Groonga全般の話&lt;/h3&gt;
&lt;!-- more --&gt;

&lt;ul&gt;
&lt;li&gt;@ktoさんについに会えた！Twitterでいつも質問してすいません＞＜&lt;/li&gt;
&lt;li&gt;cliで--output_type=xmlとかやると整形をよろしくやってくれる&lt;/li&gt;
&lt;li&gt;dumpよりはgrndumpは今も変わらず。&lt;/li&gt;
&lt;li&gt;PostgreSQLはpg_bgramがいーかも&lt;/li&gt;
&lt;li&gt;データサイズがメモリを超えるくらいでDroonga考えると幸せかも（えーと、今動かしてるサービス、データサイズが余裕でメモリ超えてるんですけど）&lt;/li&gt;
&lt;li&gt;Mroongaは正規化有りがデフォ、Groongaは正規化無しがデフォ。英語は正規化した方がデータサイズ小さくなるよ&lt;/li&gt;
&lt;li&gt;gqtpはこれから非推奨になるかも。&lt;/li&gt;
&lt;li&gt;bigramとmecabのインデックスは同時に使える。インデックスをそれぞれ用意して、mecabの方を重み付けてやると吉&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- more --&gt;

&lt;h3&gt;事例紹介の話&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;トークナイザとかカスタマイズしてるすげー！&lt;/li&gt;
&lt;li&gt;トークナイザをカスタマイズすることで、検索時間を短縮することが出来る&lt;/li&gt;
&lt;li&gt;英語の正規化は複数形とかを考えてくれない。&lt;/li&gt;
&lt;li&gt;Groongaの機能全て使いたいから、insertとupdateはMroongaでそれ以外はGroongaを使う&lt;/li&gt;
&lt;li&gt;Groongaメーリングリストは優しい人がいっぱい！積極的に質問していいと思う。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;勉強会が終わった後は懇親会に行ってきました。そこで@soundkitchenさんにDocker薦められたので、一回Docker触ってみようと思います。Groonga全然関係ないですね。楽しかったので終電ギリギリまで居ちゃいました。&lt;/p&gt;
&lt;p&gt;Groongaは結構使っているんですが、使いこなしてはいないなと思い知らされる点がボコボコ出てくるとても有意義な勉強会でした。次回あればまた参加すると思います！ とりあえずこんな感じで。&lt;/p&gt;</summary><category term="event"></category><category term="groonga"></category></entry><entry><title>Django1.6.5でPostgreSQLとBootstrap使ったアプリを作ってみた(2):Bootstrapを使ってみる</title><link href="http://blog.shigepon.info/blog/2014/06/25/django-with-bootstrap/" rel="alternate"></link><updated>2014-06-25T21:41:23+09:00</updated><author><name>shigepon</name></author><id>tag:blog.shigepon.info,2014-06-25:blog/2014/06/25/django-with-bootstrap/</id><summary type="html">&lt;p&gt;テンプレートにBootstrapを当てはめたいので、Bootstrap関連のパッケージを探してみた。ググってみて&lt;a href="https://github.com/dyve/django-bootstrap-toolkit"&gt;django-bootstrap-toolkit&lt;/a&gt;が良さそうかなと思ったので、使ってみた。&lt;/p&gt;
&lt;p&gt;インストール&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ pip install django-bootstrap-toolkit
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;myproject/settings.pyのINSTALLED_APPSに以下を追加&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;#39;bootstrap-toolkit&amp;#39;
&lt;/pre&gt;&lt;/div&gt;


&lt;!-- more --&gt;

&lt;p&gt;テンプレートを書く&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;{% load bootstrap_toolkit %}} #bootstrap-toolkitを使うページ全てに必要っぽい 
...
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;head&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
{% bootstrap_stylesheet_tag %}  #bootstrapのcssへのタグ(CDNから読み込み)
{% bootstrap_stylesheet_tag &amp;quot;responsive %} #bootstrapのレスポンシブページ用タグ(CDNから読み込み)
{% bootstrap_javascript_tag %}  #bootstrapのjavascriptへのタグ(CDNから読み込み)
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;head&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
あとは普通にbootstrapのタグを書く
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;こんな感じで最低限使える。フォームに関してはもっと色々出来るみたいだけど、まだやってない。パッケージ使ってみたけど、これだけなら普通にbootstrapのファイルを読み込めば済むんだけど、フォーム関連などフィルタやカスタムタグがあるみたい。便利そうなので、これを使うことにしよう。&lt;/p&gt;</summary><category term="django"></category><category term="bootstrap"></category><category term="python"></category></entry><entry><title>詳細ページを作る：DjangoでPostgreSQLとBootstrapを使ったアプリを作ってみた(2)</title><link href="http://blog.shigepon.info/blog/2014/06/19/make-detail-page-using-django-2/" rel="alternate"></link><updated>2014-06-19T17:58:11+09:00</updated><author><name>shigepon</name></author><id>tag:blog.shigepon.info,2014-06-19:blog/2014/06/19/make-detail-page-using-django-2/</id><summary type="html">&lt;p&gt;詳細ページを作って表示するには&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;models.pyでモデルを作る&lt;/li&gt;
&lt;li&gt;urls.pyを作る&lt;/li&gt;
&lt;li&gt;views.pyでビューを作る&lt;/li&gt;
&lt;li&gt;テンプレを作る&lt;/li&gt;
&lt;li&gt;Webサーバーを立ち上げる&lt;/li&gt;
&lt;li&gt;アクセスして確認&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;くらいの手順が必要。&lt;/p&gt;
&lt;h2&gt;models.pyでモデルを作る&lt;/h2&gt;
&lt;p&gt;とりあえずおもむろにmodels.pyを編集。Railsの時と同様にテーブル名にeventを使う&lt;/p&gt;
&lt;!-- more --&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.db&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;

&lt;span class="c1"&gt;# Create your models here.&lt;/span&gt;
&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Event&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Model&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CharField&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;max_length&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;date&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DateTimeField&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Meta&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;db_table&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;event&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;コマンドとか無くて、ソースで定義するのは個人的に性に合っている。Railsではモデルを修正したい時に、db/migrate以下のファイルを修正したり、app/models以下のファイルを修正したりで、情報がまとまってなくて困ったけど、Djangoの場合、models.pyを修正すれば事足りるっぽい。Metaクラスでdb_tableってのにテーブル名を指定してやると、指定したテーブル名を使用出来る。指定しない場合、bocho_eventってテーブルにアクセスするっぽい。&lt;/p&gt;
&lt;p&gt;フィールドの種類として何が使えるかとかまだまだ勉強中だけど、CharFieldはとりあえず最大文字数(max_length)を指定する必要があることは分かった。指定したくない場合はTextField使えばいいのかな？&lt;/p&gt;
&lt;h2&gt;urls.pyを作る&lt;/h2&gt;
&lt;p&gt;Railsでのconfig/routes.rbに当たるのが、urls.py。myproject以下には自動で出来るけど、作ったアプリ（今回はbocho）以下には用意されないので、自分で作って編集する。urlのルーティングは、まずmyproject側で行って、その後、必要な場合にアプリ側のルーティングが行われる。events/show/1でid=1のデータを表示する場合、&lt;/p&gt;
&lt;p&gt;myproject/urls.pyは&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;urlpatterns&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;patterns&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;r&amp;#39;^events/&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;include&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;bocho.urls&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;namespace&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;bocho&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)),&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;と書いて、bocho/urls.pyを&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;urlpatterns&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;patterns&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;r&amp;#39;^show/(\d+)/$&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;views&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;detail&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;detail&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;と書くと、良さげな感じがする。書き方は色々あると思うけど（myproject側をr''みたいにして、bocho側にパターンを全て書いておくとかなんとか）。正規表現の()内はメソッドにパラメータとして渡される。rhacoもそうなので取っ付きやすい。&lt;/p&gt;
&lt;p&gt;nameとかnamespaceはviews.pyやテンプレートなどでurlを生成する時に用いる。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;url&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;bocho:detail&amp;#39;&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="c1"&gt;#テンプレート内&lt;/span&gt;
&lt;span class="n"&gt;reverse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;bocho:detail&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;#views内&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Railsだと、こういうのどうしたら良いか分からなくて困った。&lt;/p&gt;
&lt;h2&gt;views.pyでビューを作る&lt;/h2&gt;
&lt;p&gt;ビューはbocho/views.pyを編集すればおk。詳細表示の場合こんな感じ&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# coding: utf-8&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.shortcuts&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;render&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;bocho.models&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Event&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;detail&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;event_id&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;event&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Event&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;objects&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;event_id&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;render&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;event/detail.html&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;object&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;event&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;※　coding: utf-8ってのはpython3では要らないらしい。
modelは先にインポートする。表示に使うテンプレートと変数はview内で指定する。getとかallとかDBにアクセスするためのメソッドはこれから勉強が要るけど、要はDAOなので、それほど苦にはならないっしょ。&lt;/p&gt;
&lt;h2&gt;テンプレを作る&lt;/h2&gt;
&lt;p&gt;テンプレを作る前にテンプレのパスに関する設定をする。myproject/settings.pyに次の行を追加&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;INSTALLED_APPS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
&lt;span class="o"&gt;....&lt;/span&gt;
&lt;span class="s1"&gt;&amp;#39;bocho&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;TEMPLATE_DIRS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;BASE_DIR&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;templates&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;こうしておくと、bochoアプリのテンプレはbocho/templates/以下を参照し、さらにファイルが無い場合はtemplates/以下も調べる。上のように'event/detail.html'と指定した場合は、bocho/templates/event/detail.htmlを参照する。&lt;/p&gt;
&lt;p&gt;設定出来たので、bocho/templates/event/detail.htmlを以下のように書く&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;html&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;body&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;詳細画面&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;dl&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;dt&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;{{ object.name }}&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;dt&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;dd&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;{{ object.date|date:&amp;quot;Y-m-d&amp;quot; }}&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;dd&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;dl&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;body&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;html&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;フォーマットの方法とか良く分からないので、勉強が必要。dateはこの方法で良さそうだけど、他の場合どうなるんだろ？&lt;/p&gt;
&lt;h2&gt;Webサーバーを立ち上げる&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ python manage.py runserver xxx.xxx.xx.xx:xxxx
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;xの部分にIPとポートを入れれば指定したIP、ポートで表示出来る。設定しない場合は知らない。どっかググれば書いてあるはず。あとはxxx.xxx.xx.xx:xxxxにブラウザでアクセスするとページを確認出来るようになる&lt;/p&gt;
&lt;p&gt;最初に作る時のコード量はRailsより多いけど、大したことはない。それより、フォルダとファイル構成が分かりやすいので、どこ修正したら良いか分からないなんてことも無いし、Railsより修正がやりやすい気がする。&lt;/p&gt;</summary><category term="python"></category><category term="django"></category><category term="bootstrap"></category></entry><entry><title>Ubuntu12.04でjenkinsのインストールと設定</title><link href="http://blog.shigepon.info/blog/2014/06/18/jenkins-setting/" rel="alternate"></link><updated>2014-06-18T15:08:25+09:00</updated><author><name>shigepon</name></author><id>tag:blog.shigepon.info,2014-06-18:blog/2014/06/18/jenkins-setting/</id><summary type="html">&lt;p&gt;&lt;a href="http://jnst.hateblo.jp/entry/2013/10/03/123012"&gt;Ubuntu 12.04 LTS に Jenkins をインストール - MELODIC-X&lt;/a&gt;を参考にして設定した。
Jenkins本体でアップグレード可能らしいので、aptitudeでインストール&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ sudo aptitude install jenkins
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Nginx設定&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;location&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nt"&gt;jenkins&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;proxy_pass&lt;/span&gt; &lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="o"&gt;://&lt;/span&gt;&lt;span class="m"&gt;127&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="m"&gt;8080&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;!-- more --&gt;

&lt;p&gt;で、nginxは起動してたので再読み込み&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ sudo service nginx reload
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Jenkins設定ファイル修正&lt;/h2&gt;
&lt;p&gt;jenkinsの設定ファイルは/etc/default/jenkinsにあるので編集
最下行の起動パラメーターに&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;--prefix=/jenkins
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;を追加。jenkins再起動&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ sudo service jenkins restart
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;以上&lt;/p&gt;</summary><category term="linux"></category><category term="test1st"></category></entry><entry><title>Django1.6.5でPostgreSQLとBootstrap使ったアプリを作ってみた(1):とりあえずDjangoプロジェクトとアプリを作ってみた</title><link href="http://blog.shigepon.info/blog/2014/06/18/start-django-project/" rel="alternate"></link><updated>2014-06-18T12:49:29+09:00</updated><author><name>shigepon</name></author><id>tag:blog.shigepon.info,2014-06-18:blog/2014/06/18/start-django-project/</id><summary type="html">&lt;p&gt;Djangoはプロジェクトを作っておいて、アプリ毎に細かく機能を分けて、プロジェクトで統合するみたいな形式を取るみたい。なのでまずはDjangoプロジェクトを作成&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ django-admin.py startproject myproject
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;とすると、カレントフォルダにmyprojectフォルダが出来る。ファイル構成を見ると、 &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;myproject/
  manage.py
  myproject/
    __init__.py
    settings.py
    urls.py
    wsgi.py
&lt;/pre&gt;&lt;/div&gt;


&lt;!-- more --&gt;

&lt;p&gt;となっている。myprojectフォルダ内のファイルに共通設定を書くという感じになりそうだ。PostgreSQLに接続するので、settings.pyを修正&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;DATABASES&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;default&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;ENGINE&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;django.db.backends.postgresql_psycopg2&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;NAME&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;hoge&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;USER&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;username&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;PASSWORD&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;******&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;HOST&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;hostname or ip&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;PORT&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;5432&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;あと、psycopg2をインストールしていないので&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ sudo pip install psycopg2
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;とやって&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ &lt;span class="nb"&gt;cd&lt;/span&gt; myproject
$ python manage.py syncdb
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;とやると、hogeに色々テーブルが出来る。INSTALLED_APPSに書いてあるアプリに関するテーブルみたい。初期状態では以下のアプリが入るみたい。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;django.contrib.admin - 管理用サイト
django.contrib.auth - 認証
django.contrib.contenttypes - ??
django.contrib.sessions - セッション管理
django.contrib.messages - ??
django.contrib.staticfile - 静的ファイル用アプリ
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;テーブルは以下のものが作られた&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;auth_group
auth_group_permissions
auth_permission
auth_user
auth_user_groups
auth_user_user_permissions
django_admin_log
django_content_type
django_session
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;あと上のコマンド実行時に、管理者ユーザー作るかどうか聞かれる。とりあえず作った。&lt;/p&gt;
&lt;p&gt;DB設定済ませたので、おもむろにアプリ作成。Railsの時と同様に傍聴情報の出力をやってみるか。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ python manage.py startapp bocho
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;を実行するとbochoフォルダが出来てその中に&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;bocho/
  __init__.py
  admin.py
  models.py
  tests.py
  views.py
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;が出来た。とりあえずここまで。&lt;/p&gt;</summary><category term="python"></category><category term="django"></category><category term="PostgreSQL"></category></entry><entry><title>Ubuntu 12.04でDjangoを始める</title><link href="http://blog.shigepon.info/blog/2014/06/18/start-django-on-ubuntu-12-dot-04/" rel="alternate"></link><updated>2014-06-18T08:06:49+09:00</updated><author><name>shigepon</name></author><id>tag:blog.shigepon.info,2014-06-18:blog/2014/06/18/start-django-on-ubuntu-12-dot-04/</id><summary type="html">&lt;p&gt;ヘタレなことにRailsに挫折してしまったので、Railsと同様良く名前が出てくるDjangoを試してみることにする。Djangoを使うにはpythonとかpipとか入れておくといいらしい。&lt;/p&gt;
&lt;p&gt;どれもとりあえずaptitudeでインストール出来るので、おもむろに&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ sudo aptitude install python,python-pip
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;でインストール。python2.7がインストール出来た。一応aptitude updateくらいしておいたら良いと思う。&lt;/p&gt;
&lt;p&gt;んで、Djangoはpipでインストール&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ sudo pip install &lt;span class="nv"&gt;Django&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;1.6.5
&lt;/pre&gt;&lt;/div&gt;


&lt;!-- more --&gt;

&lt;p&gt;でDjango 1.6.5をインストール出来た。python、pipはもうちょっと違うインストール方法があると思うけど、今回はこうしてみた。簡単。&lt;/p&gt;
&lt;p&gt;で、次はチュートリアル進めるんだろうけど、チュートリアルは結構内容が多そうなので、必要な部分だけ取り出しながらやってみる。「データベースにすでに登録してあるデータをDjangoとBootstrapでWebサービスっぽく表示する」という方針で必要な箇所を進めていく。なのでadminとかそこらへんはすっ飛ばす予定。&lt;/p&gt;
&lt;p&gt;-- 7/2追記&lt;/p&gt;
&lt;p&gt;Djangoのインストール前にvirtualenvという仮想環境を入れて、その中でDjango入れた方がいいみたい。&lt;/p&gt;
&lt;h3&gt;virtualenvのインストール&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ sudo pip install virtualenv
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;virtualenvで仮想環境構築&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ virtualenv hoge
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;とすると、カレントディレクトリにhogeというディレクトリが出来て、その中に仮想環境が入る。オプションでpythonのバージョン指定とかも出来るみたいだけど、今回はしない。&lt;/p&gt;
&lt;h3&gt;virtualenvで作った仮想環境を使う&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ &lt;span class="nb"&gt;source&lt;/span&gt; hoge/bin/activate
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;で使うことが出来る。ここでDjangoのインストールとかやっておくと良いみたい&lt;/p&gt;</summary><category term="python"></category><category term="django"></category></entry><entry><title>ubuntuでaptitude installした時にinitramfs-toolsのエラーが出た</title><link href="http://blog.shigepon.info/blog/2014/06/08/ubuntu-aptitude-error-in-initramfs-tools/" rel="alternate"></link><updated>2014-06-08T21:41:18+09:00</updated><author><name>shigepon</name></author><id>tag:blog.shigepon.info,2014-06-08:blog/2014/06/08/ubuntu-aptitude-error-in-initramfs-tools/</id><summary type="html">&lt;p&gt;virtualboxをインストールしようとしたら&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;以下のパッケージの処理中にエラーが発生しました:
 initramfs-tools
E: Sub-process /usr/bin/dpkg returned an error code &lt;span class="o"&gt;(&lt;/span&gt;1&lt;span class="o"&gt;)&lt;/span&gt;
パッケージをインストールできませんでした。復旧を試みています:
initramfs-tools &lt;span class="o"&gt;(&lt;/span&gt;0.99ubuntu13.5&lt;span class="o"&gt;)&lt;/span&gt; を設定しています ...
update-initramfs: deferring update &lt;span class="o"&gt;(&lt;/span&gt;trigger activated&lt;span class="o"&gt;)&lt;/span&gt;
initramfs-tools のトリガを処理しています ...
update-initramfs: Generating /boot/initrd.img-3.2.0-53-generic

gzip: stdout: No space left on device
cpio: 書き込みエラー: Broken pipe
E: mkinitramfs failure cpio &lt;span class="m"&gt;1&lt;/span&gt; gzip 1
update-initramfs: failed &lt;span class="k"&gt;for&lt;/span&gt; /boot/initrd.img-3.2.0-53-generic with 1.
dpkg: initramfs-tools の処理中にエラーが発生しました &lt;span class="o"&gt;(&lt;/span&gt;--configure&lt;span class="o"&gt;)&lt;/span&gt;:
 サブプロセス インストール済みの post-installation スクリプト はエラー終了ステータス &lt;span class="m"&gt;1&lt;/span&gt; を返しました
以下のパッケージの処理中にエラーが発生しました:
 initramfs-tools
&lt;/pre&gt;&lt;/div&gt;


&lt;!-- more --&gt;

&lt;p&gt;みたいなエラーが出た。どうも/bootが一杯になってると出るらしい。
&lt;a href="http://www.cagylogic.com/archives/2012/11/04150426.php"&gt;/bootがあふれてapt-get upgradeが失敗したでござる | cagylogic&lt;/a&gt;を参考にして削除することにした。ただ、普通にapt-get purgeとかapt-get removeしても結局エラーメッセージはなぜか出たまま。&lt;/p&gt;
&lt;p&gt;で、さらにググって&lt;a href="http://tatuas.hatenablog.com/entry/2013/08/22/015141"&gt;Ubuntuでboot容量不足という警告の対処法 - Tatuas Blog&lt;/a&gt;のように&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ sudo apt-get remove linux-image-xxxx
$ sudo apt-get autoremove
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;とすると、上手く消すことが出来た&lt;/p&gt;</summary><category term="linux"></category></entry><entry><title>phpenvとphp-buildを使って適当なバージョンのphpをビルドする</title><link href="http://blog.shigepon.info/blog/2014/06/07/build-php-with-phpenv/" rel="alternate"></link><updated>2014-06-07T00:42:03+09:00</updated><author><name>shigepon</name></author><id>tag:blog.shigepon.info,2014-06-07:blog/2014/06/07/build-php-with-phpenv/</id><summary type="html">&lt;p&gt;基本は&lt;a href="http://d.hatena.ne.jp/hnw/20130626"&gt;php-buildで複数バージョンのPHP-FPMを用意する - hnwの日記&lt;/a&gt;を参考にして進める&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ curl https://raw.github.com/CHH/phpenv/master/bin/phpenv-install.sh &lt;span class="p"&gt;|&lt;/span&gt; bash
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;これが何故か上手くいかなかったので&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ wget https://raw.github.com/CHH/phpenv/master/bin/phpenv-install.sh
$ chmod +x phpenv-install.sh
$ ./phpenv-install.sh
&lt;/pre&gt;&lt;/div&gt;


&lt;!-- more --&gt;

&lt;p&gt;こうやった。コマンド終了時のメッセージに従って.zshrcを変更して反映。
php-buildのインストールは下のような感じ&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ git clone git://github.com/CHH/php-build.git ~/.phpenv/plugins/php-build
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;で、おもむろにphpをインストール&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ phpenv install 5.5.5
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;とかやると出るわ出るわエラーが出るわ。どうもビルド用のライブラリやヘッダファイルみたいなのが何かと足りないみたいで色々出て来た。出るメッセージは人によって違うと思うので、入れるライブラリの一覧より、ライブラリが無い場合の対処法を書いておく。ubuntuにはapt-fileというアプリ？があって、これを使うとライブラリをインストールした時にインストールされるファイル名で検索することが出来る。&lt;/p&gt;
&lt;p&gt;例えば「configure: error: mcrypt.h not found. Please reinstall libmcrypt.」みたいなエラーが出た場合、&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ apt-file search mcrypt.h
libmcrypt-dev: /usr/include/mcrypt.h
libmcrypt-dev: /usr/include/mutils/mcrypt.h
libtomcrypt-dev: /usr/include/tomcrypt.h
php-doc: /usr/share/doc/php-doc/html/book.mcrypt.html
php-doc: /usr/share/doc/php-doc/html/intro.mcrypt.html
php-doc: /usr/share/doc/php-doc/html/ref.mcrypt.html
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;みたいにすると、mcrypt.hを含むライブラリとインストール箇所が表示されるので、これを見ながらインストールするライブラリを選んだ（この場合だとlibmcrypt-devをインストールした）&lt;/p&gt;
&lt;p&gt;これを地道に何度か繰り返して何とかビルド出来た。rbenvに比べると面倒だった。&lt;/p&gt;</summary><category term="php"></category></entry><entry><title>Railsやりにくいから挫折しそうという話</title><link href="http://blog.shigepon.info/blog/2014/06/06/difficult-to-use-rails/" rel="alternate"></link><updated>2014-06-06T10:38:10+09:00</updated><author><name>shigepon</name></author><id>tag:blog.shigepon.info,2014-06-06:blog/2014/06/06/difficult-to-use-rails/</id><summary type="html">&lt;p&gt;今までphpの&lt;a href="http://rhaco.org"&gt;rhaco&lt;/a&gt;というドマイナーなフレームワークを使ってきてたので、メジャーなフレームワークでも使ってみるかー。ついでにrubyの練習にもなるかーと思ってRails4をはじめたんだけど、なんかこー色々自分の開発方法に合ってないような気がするので挫折する。&lt;/p&gt;
&lt;p&gt;使いにくいなと思った点はメリットとの二律背反の部分もあるんだけど、次のような感じ&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;モデルをコマンドで作ると、テーブル名が勝手に複数形になる&lt;/li&gt;
&lt;li&gt;viewでurl表示させたりするのが面倒。きっとやり方知らないだけだろうけど。&lt;/li&gt;
&lt;li&gt;コマンドありきで作っていくので、手作業でどこまで修正して良いか分からない&lt;/li&gt;
&lt;li&gt;どんな流れで処理が進むのかさっぱり分からない（フレームワークが大きすぎるから？）。本読めって話だろうけど・・・なー(めんどい)。&lt;/li&gt;
&lt;li&gt;分からない時に聞く相手が居ない&lt;/li&gt;
&lt;li&gt;バージョンによってやり方が結構変わるみたいで、ググってもそれが正しい手法か分からない時がある（これはrhacoも同じだからrhacoにも何とかして欲しいとこではある）&lt;/li&gt;
&lt;li&gt;Capistrano+nginx+unicornで結構ハマってそれだけで挫折しそうになった。未だにちゃんとunicornをリロード出来ない。&lt;/li&gt;
&lt;li&gt;メジャーなフレームワークのはずなのに、ちょこちょこバッドノウハウない？違う？&lt;/li&gt;
&lt;li&gt;SassやCoffeeScriptがデフォみたいなのがやだ&lt;/li&gt;
&lt;li&gt;いちいちgemファイルでほにゃららしないと上手く動かない？Bootstrapとか。そしてgemがあるかどうかをいちいちググって探さないといけない。&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- more --&gt;

&lt;p&gt;なんとなくだけどRailsって先に設計とかかっちりやってから作るってやり方な感じがして、「大雑把に作って、そこから細部をつめていく」みたいなやり方には合ってないんじゃないかと思った。個人でサクサクっとWebサービス作りたい場合には大雑把にまず作りたいんだよなー。&lt;/p&gt;
&lt;p&gt;見当違いかもしれないけどね。とりあえず他を当たってみる？メジャーどころでDjango？同じように挫折するかもしれないけどとりあえず試してみよう。&lt;/p&gt;</summary><category term="ruby"></category></entry><entry><title>Rails memo</title><link href="http://blog.shigepon.info/blog/2014/05/29/rails-memo/" rel="alternate"></link><updated>2014-05-29T08:54:12+09:00</updated><author><name>shigepon</name></author><id>tag:blog.shigepon.info,2014-05-29:blog/2014/05/29/rails-memo/</id><summary type="html">&lt;p&gt;Rails関係でいつでも確認出来るようにメモ。&lt;/p&gt;
&lt;h2&gt;ルーティングでのパラメータの使い方&lt;/h2&gt;
&lt;p&gt;config/route.rbを編集する&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt; &lt;span class="n"&gt;get&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;main/index/:hoge&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;main#index&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;app/controllers/main_controller.rbを編集&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;MainController&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="no"&gt;ApplicationController&lt;/span&gt;
  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;index&lt;/span&gt;
    &lt;span class="vi"&gt;@hoge&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;params&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:hoge&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;!-- more --&gt;

&lt;p&gt;と書いておくとrouteで設定したパラメーターにアクセス出来る。&lt;/p&gt;
&lt;h2&gt;ルーティング中でURLの一部を省略可能にする&lt;/h2&gt;
&lt;p&gt;config/route.rbを編集する&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt; &lt;span class="n"&gt;get&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;main/index/:hoge(/fuga/:hage)&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;main#index&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;とやっておくと、main/index/1/fuga/2でもアクセス出来るし、main/index/1でもアクセス出来るようになる&lt;/p&gt;
&lt;h2&gt;ルーティング時にパラメーターの初期値を設定する&lt;/h2&gt;
&lt;p&gt;config/route.rbを編集する&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt; &lt;span class="n"&gt;get&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;main/index/:hoge(/fuga/:hage)&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;main#index&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="ss"&gt;:defaults&lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="ss"&gt;:hage&lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;と設定しておくと、app/controllers/main_controller.rb中のparams[:hage]の初期値として3を入れることが出来る。&lt;/p&gt;
&lt;h2&gt;Dateクラスの使い方メモ&lt;/h2&gt;
&lt;p&gt;個人的に文字列からDateクラスにして、1年前にするとか1ヶ月前にするとかそういう作業をすることが多いのでメモ&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;  &lt;span class="n"&gt;d&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;Date&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;strptime&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;2014-05-24&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;%Y-%m-%d&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;prev_year&lt;/span&gt; &lt;span class="c1"&gt;#1年前に指定&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</summary><category term="ruby"></category><category term="memo"></category></entry><entry><title>find\_by\_sqlでプリペアードステートメントを使う</title><link href="http://blog.shigepon.info/blog/2014/05/28/use-prepared-statement-in-find-by-sql/" rel="alternate"></link><updated>2014-05-28T08:19:12+09:00</updated><author><name>shigepon</name></author><id>tag:blog.shigepon.info,2014-05-28:blog/2014/05/28/use-prepared-statement-in-find-by-sql/</id><summary type="html">&lt;p&gt;ActiveRecordは便利なのかどうか知らないけど、allなどのメソッドで:conditionとかで?を使うことが出来る。だけど、sqlを直接打ちたいケースは必ず出てくるので、その時に?使いたいなと思ったけど、なかなか例文が無かった。&lt;/p&gt;
&lt;p&gt;んで結局こうするといいみたい。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="vi"&gt;@results&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;Model&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;find_by_sql&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;select * from hoge where fuga=?&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;hage&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;しかし他にも直接sqlを実行する方法があって、&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="no"&gt;ActiveRecord&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Base&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;connection&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;raw_connection&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;exec&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;select * from hoge where fuga = :1&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;hage&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;!-- more --&gt;

&lt;p&gt;こんな書き方も出来るらしい。ActiveRecord::Base.connectionでは無理らしい。うーむ。むか〜しからRailsはちょっとレールからはずれるととたんに難しくなるんだなー。やる気が減って来た＞＜。&lt;/p&gt;</summary><category term="Rails"></category><category term="ruby"></category></entry><entry><title>ubuntuでodbcを用いてpostgresqlにアクセスする</title><link href="http://blog.shigepon.info/blog/2014/05/12/access-postgresql-through-odbc-ubuntu/" rel="alternate"></link><updated>2014-05-12T22:11:33+09:00</updated><author><name>shigepon</name></author><id>tag:blog.shigepon.info,2014-05-12:blog/2014/05/12/access-postgresql-through-odbc-ubuntu/</id><summary type="html">&lt;p&gt;なでしこ2のテストのためにubuntuにodbcドライバをインストールしたりしたのでメモ&lt;/p&gt;
&lt;h2&gt;odbcドライバのインストール&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ sudo aptitude install unixodbc, odbc-postgresql
$ sudo odbcinst -i -d -f /usr/share/psqlodbc/odbcinst.ini.template
$ sudo odbcinst -i -s -l  -n adyoung-pg -f /usr/share/doc/odbc-postgresql/examples/odbc.ini.template
$ vim /etc/odbc.ini
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;odbc.iniにはサンプルの設定が入っているので、それを参考にしながら設定&lt;/p&gt;
&lt;!-- more --&gt;

&lt;h2&gt;odbcアクセスしてみる&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ isql -v DSN &lt;span class="o"&gt;(&lt;/span&gt;UID &lt;span class="o"&gt;(&lt;/span&gt;PWD&lt;span class="o"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;でアクセスできる。あとはSQLを入力すれば結果を見たりできる。&lt;/p&gt;
&lt;h2&gt;monoを使ってアクセスする場合&lt;/h2&gt;
&lt;p&gt;monoというかなでしこ2でアクセスする場合に必要だった。libodbc.soが必要というエラーが出るのでunixodbc-devの追加インストールが必要。インストールすればエラー出ずに動くようになる。&lt;/p&gt;</summary><category term="linux"></category><category term="PostgreSQL"></category><category term="nadesiko"></category></entry><entry><title>Railsでurl\_forを使ったらshows proxy\_passで設定したURLになってしまう件</title><link href="http://blog.shigepon.info/blog/2014/05/05/rails-url-for-shows-proxy-pass/" rel="alternate"></link><updated>2014-05-05T14:00:54+09:00</updated><author><name>shigepon</name></author><id>tag:blog.shigepon.info,2014-05-05:blog/2014/05/05/rails-url-for-shows-proxy-pass/</id><summary type="html">&lt;p&gt;Nginx, Unicorn, Rails4でurl_forを使ったら変なURLになってしまったので対処法を書いておく&lt;/p&gt;
&lt;p&gt;Ninxで&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;server&lt;/span&gt; &lt;span class="nt"&gt;hoge&lt;/span&gt;&lt;span class="nc"&gt;.com&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="nt"&gt;proxy_pass&lt;/span&gt; &lt;span class="nt"&gt;http&lt;/span&gt;&lt;span class="o"&gt;://&lt;/span&gt;&lt;span class="nt"&gt;upstream&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;のような設定をしているとurl_forで&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;http://hoge.com
&lt;/pre&gt;&lt;/div&gt;


&lt;!-- more --&gt;

&lt;p&gt;となってほしいところが&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;http://upstream
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;となってしまうので、ググって対処を調べた。&lt;/p&gt;
&lt;p&gt;&lt;a href="http://stackoverflow.com/questions/5834025/how-to-preserve-request-url-with-nginx-proxy-pass"&gt;ruby - How to preserve request url with nginx proxy_pass - Stack Overflow&lt;/a&gt;を参考にして&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;proxy_set_header Host http://hoge.com
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;を追記したら上手く動いた。&lt;/p&gt;</summary><category term="Rails"></category><category term="ruby"></category></entry><entry><title>Rails4でJSONを出力する</title><link href="http://blog.shigepon.info/blog/2014/05/05/output-json-by-rails4/" rel="alternate"></link><updated>2014-05-05T10:33:26+09:00</updated><author><name>shigepon</name></author><id>tag:blog.shigepon.info,2014-05-05:blog/2014/05/05/output-json-by-rails4/</id><summary type="html">&lt;p&gt;Rails4にはjbuilderが標準で入っていて、viewを設定するだけでJSON出力が可能ならしい。
 例えば&lt;a href="http://blog.shigepon.info/blog/2014/03/10/a-way-of-creating-rails-application3/"&gt;Rails4でPostgreSQLとBootstrap使ったアプリを作ってみた(3):データ一覧ページを作って、詳細ページへのリンクを貼る - shigeponが関心のある技術情報など&lt;/a&gt;のページをとりあえずjsonで出力するにはapp/views/events/index.json.jbuilderを用意するだけでOK。http://0.0.0.0:3000/events/index.json にアクセスするとJSONで表示してくれる。なんと楽チンな！
 JSONの出力形式を変更する場合はindex.json.jbuilderを編集する&lt;/p&gt;
&lt;p&gt;例えばこんな感じ&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;json&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;array!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="vi"&gt;@events&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;item&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
  &lt;span class="n"&gt;json&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;  &lt;span class="n"&gt;item&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;
  &lt;span class="n"&gt;json&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;date&lt;/span&gt;  &lt;span class="n"&gt;item&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;date&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;!-- more --&gt;

&lt;p&gt;例えばこうしておくと一覧を配列出力しつつ、出力したいフィールドを指定出来る。viewだけで操作出来るのは楽チンだわ。
 詳しい書式はブログ等の記事を見るよりも、英語だけど&lt;a href="https://github.com/rails/jbuilder"&gt;rails/jbuilder · GitHub&lt;/a&gt;を見るとよさげ。&lt;/p&gt;
&lt;!-- more --&gt;

&lt;h2&gt;jbuilderでネストした配列を出力する&lt;/h2&gt;
&lt;p&gt;大抵の説明では一番外側が配列で、中身はハッシュというものばかりで、配列の中が配列という形での出力方法の説明が無かったのでメモ&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;[[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;],[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;],[&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;みたいなjsonを出力する場合&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;json&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;array!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="vi"&gt;@events&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;item&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
  &lt;span class="n"&gt;json&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;array!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;item&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;to_i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;item&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;to_i&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;という指定をする。&lt;/p&gt;</summary><category term="ruby"></category></entry><entry><title>Capistrano3でbitbucketからデプロイしようとしたらハマった話</title><link href="http://blog.shigepon.info/blog/2014/05/04/capistrano3-shows-error-when-deploy-from-bitbucket/" rel="alternate"></link><updated>2014-05-04T10:04:00+09:00</updated><author><name>shigepon</name></author><id>tag:blog.shigepon.info,2014-05-04:blog/2014/05/04/capistrano3-shows-error-when-deploy-from-bitbucket/</id><summary type="html">&lt;p&gt;まだデプロイ作業を途中までしか確認していないので、とりあえずハマったポイントを書いておく。
 デプロイ作業をテストしてみたらこんなエラーが出た&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ bundle &lt;span class="nb"&gt;exec&lt;/span&gt; cap production deploy:check
 INFO &lt;span class="o"&gt;[&lt;/span&gt;5f874a7e&lt;span class="o"&gt;]&lt;/span&gt; Running /usr/bin/env mkdir -p /tmp/hoge/ on fuga
DEBUG &lt;span class="o"&gt;[&lt;/span&gt;5f874a7e&lt;span class="o"&gt;]&lt;/span&gt; Command: /usr/bin/env mkdir -p /tmp/hoge/
 INFO &lt;span class="o"&gt;[&lt;/span&gt;5f874a7e&lt;span class="o"&gt;]&lt;/span&gt; Finished in 0.321 seconds with &lt;span class="nb"&gt;exit&lt;/span&gt; status &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;successful&lt;span class="o"&gt;)&lt;/span&gt;.
DEBUG Uploading /tmp/hoge/git-ssh.sh 0.0%
 INFO Uploading /tmp/hoge/git-ssh.sh 100.0%
 INFO &lt;span class="o"&gt;[&lt;/span&gt;c2bf6ab8&lt;span class="o"&gt;]&lt;/span&gt; Running /usr/bin/env chmod +x /tmp/hoge/git-ssh.sh on fuga
DEBUG &lt;span class="o"&gt;[&lt;/span&gt;c2bf6ab8&lt;span class="o"&gt;]&lt;/span&gt; Command: /usr/bin/env chmod +x /tmp/hoge/git-ssh.sh
 INFO &lt;span class="o"&gt;[&lt;/span&gt;c2bf6ab8&lt;span class="o"&gt;]&lt;/span&gt; Finished in 0.031 seconds with &lt;span class="nb"&gt;exit&lt;/span&gt; status &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;successful&lt;span class="o"&gt;)&lt;/span&gt;.
DEBUG &lt;span class="o"&gt;[&lt;/span&gt;ef8c5c38&lt;span class="o"&gt;]&lt;/span&gt; Running /usr/bin/env git ls-remote -h git@bitbucket.org:fuga/hoge.git on fuga
DEBUG &lt;span class="o"&gt;[&lt;/span&gt;ef8c5c38&lt;span class="o"&gt;]&lt;/span&gt; Command: &lt;span class="o"&gt;(&lt;/span&gt; &lt;span class="nv"&gt;GIT_ASKPASS&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;/bin/echo &lt;span class="nv"&gt;GIT_SSH&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;/tmp/hoge/git-ssh.sh /usr/bin/env git ls-remote -h git@bitbucket.org:fuga/hoge.git &lt;span class="o"&gt;)&lt;/span&gt;
DEBUG &lt;span class="o"&gt;[&lt;/span&gt;cb27da31&lt;span class="o"&gt;]&lt;/span&gt;    Error reading response length from authentication socket
DEBUG &lt;span class="o"&gt;[&lt;/span&gt;ef8c5c38&lt;span class="o"&gt;]&lt;/span&gt;    Permission denied &lt;span class="o"&gt;(&lt;/span&gt;publickey&lt;span class="o"&gt;)&lt;/span&gt;.
DEBUG &lt;span class="o"&gt;[&lt;/span&gt;ef8c5c38&lt;span class="o"&gt;]&lt;/span&gt;    
DEBUG &lt;span class="o"&gt;[&lt;/span&gt;ef8c5c38&lt;span class="o"&gt;]&lt;/span&gt;    fatal: The remote end hung up unexpectedly
DEBUG &lt;span class="o"&gt;[&lt;/span&gt;ef8c5c38&lt;span class="o"&gt;]&lt;/span&gt;    
DEBUG &lt;span class="o"&gt;[&lt;/span&gt;ef8c5c38&lt;span class="o"&gt;]&lt;/span&gt; Finished in 2.287 seconds with &lt;span class="nb"&gt;exit&lt;/span&gt; status &lt;span class="m"&gt;128&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;failed&lt;span class="o"&gt;)&lt;/span&gt;.
&lt;/pre&gt;&lt;/div&gt;


&lt;!-- more --&gt;

&lt;p&gt;うげげ。gitで鍵認証のエラー出てるわ。とりあえずbitbucketに公開鍵を登録してみた。
 &lt;a href="http://morizyun.github.io/blog/ssh-key-bitbucket-github/"&gt;SSH認証キーをBitbucket/GitHubに設定しよう！ [Mac簡単手順] - 酒と泪とRubyとRailsと&lt;/a&gt;の通りに登録したら出来た。~/.ssh/configに秘密鍵を追加して&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Host bitbucket.org
  HostName bitbucket.org
  IdentityFile ~/.ssh/id_rsa
  User git
  TCPKeepAlive yes
  IdentitiesOnly yes
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;じゃあ再度デプロイをテストしてみたら・・・同じエラーが出た。
色々試行錯誤して、「Error reading response length from authentication socket」でググった結果、ssh_agentが動いてないことが判明したので&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ &lt;span class="nb"&gt;eval&lt;/span&gt; &lt;span class="sb"&gt;`&lt;/span&gt;ssh-agent -s&lt;span class="sb"&gt;`&lt;/span&gt;
$ ssh-add ~/.ssh/id_rsa
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;としてデプロイをテストしたら無事動いた。めでたしめでたし。でも一旦ログアウトしたりするとssh-agentに接続しないとまた同じエラーが出た。ssh-agentへの接続方法は&lt;a href="http://tipspc.blogspot.jp/2010/02/ssh-agent.html"&gt;PC便利帳: ssh-agentを使用したパスワードなしの接続&lt;/a&gt;を参考にして&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ ps ax &lt;span class="p"&gt;|&lt;/span&gt; grep ssh-agent
$ ls /tmp &lt;span class="p"&gt;|&lt;/span&gt; grep ssh
$ &lt;span class="nv"&gt;SSH_AUTH_SOCK&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;/tmp/ssh-XXXXX1111/agent.1111&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nb"&gt;export&lt;/span&gt; SSH_AUTH_SOCK&lt;span class="p"&gt;;&lt;/span&gt;
$ &lt;span class="nv"&gt;SSH_AGENT_PID&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;2222&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nb"&gt;export&lt;/span&gt; SSH_AGENT_PID&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="sb"&gt;````&lt;/span&gt;

とやれば接続できて、デプロイできた。
 さらに実際にデプロイすると下のようにエラーでまくった。

&lt;span class="c1"&gt;##capistrano3でbundle exec cap production deloyしようとしたらエラーが出まくる&lt;/span&gt;
Gemfileから色々省いてたらエラーが出まくる

+ rubyが指定されてない（rbenvが足りない）
+ uglifierが無いとかsassが足りないとか
+ いちいちGemfile.lockをアップデートしないとエラー出る

rbenvはcapistrano-rbenvをGemfileに追加して、Capfileにcapistrano/rbenvを指定して、config/deploy.rbに

&lt;span class="sb"&gt;```&lt;/span&gt;rb
&lt;span class="nb"&gt;set&lt;/span&gt; :rbenv_ruby, &lt;span class="s1"&gt;&amp;#39;2.1.0&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;とか何とか設定するとおk。&lt;/p&gt;
&lt;p&gt;uglifierとかsassとかproductionを指定した場合に使うような設定になってるみたいい（config/environments/production.rb）。とりあえずuglifierとかsassとかcofee-railsとか色々Gemfileに入れておけばエラーでなかった。&lt;/p&gt;
&lt;h2&gt;デプロイした後でcss関連でエラーが出た&lt;/h2&gt;
&lt;p&gt;sassが足らないと言われた。sass使わないので、sassが関わるファイル（app/assets/stylesheets内のscssファイル）を消すとエラーは消えた&lt;/p&gt;
&lt;h2&gt;productionモードでデプロイすると、cssやjsを読み込んでくれない&lt;/h2&gt;
&lt;p&gt;config/environments/production.rbに次の行を追記&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt; &lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;assets&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;compile&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kp"&gt;true&lt;/span&gt;
 &lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;assets&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;precompile&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;*.js&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;*.css&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;*.css.erb&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;参考&lt;a href="http://stackoverflow.com/questions/18700219/rails-4-assets-not-loading-in-production"&gt;ruby - Rails 4: assets not loading in production - Stack Overflow&lt;/a&gt;
すると解決した。なんかバッドノウハウみたいでやだ。&lt;/p&gt;
&lt;h2&gt;productionモードでunicornが起動してくれない&lt;/h2&gt;
&lt;p&gt;capistranoとは関係なかったけどcapistrano関連と思い込んでたのでメモ。capistranoの設定にミスがあると思って苦しんでたけど、単にunicornのオプションを指定してなかったのが悪かった。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ bundle &lt;span class="nb"&gt;exec&lt;/span&gt; unicorn_rails -E production
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;でおkだった。&lt;/p&gt;
&lt;p&gt;Capistranoは確かに便利なんだけど、なんかハマりポイントが多いような印象。
バージョン変わって設定方法も変わったみたいだし。最初のハードルが高い感じがする。慣れたら楽になるのかな。&lt;/p&gt;
&lt;h2&gt;capistrano3でunicornの再起動に失敗する&lt;/h2&gt;
&lt;p&gt;&lt;a href="http://qiita.com/satococoa/items/9b0cc416ffc042680b9b"&gt;unicorn + rails 用 Capistrano 3 の設定ファイル - Qiita&lt;/a&gt;と&lt;a href="http://blog.dealforest.net/2014/02/failed_restart_unicorn_with_capistrano3/"&gt;Capistrano3 で Unicorn の再起動に失敗したのを対応したメモ | Supernova&lt;/a&gt;が参考になった。&lt;/p&gt;
&lt;p&gt;でもrestartでちゃんと再起動して修正箇所が反映しない。stopしてstartしないと。うーん。&lt;/p&gt;</summary><category term="Rails"></category><category term="ruby"></category></entry><entry><title>nginx,unicornをさくらvpsにインストールしてrailsアプリを手動でデプロイしてみる</title><link href="http://blog.shigepon.info/blog/2014/05/02/use-nginxand-unicorn-on-sakura-vps/" rel="alternate"></link><updated>2014-05-02T15:10:23+09:00</updated><author><name>shigepon</name></author><id>tag:blog.shigepon.info,2014-05-02:blog/2014/05/02/use-nginxand-unicorn-on-sakura-vps/</id><summary type="html">&lt;p&gt;さくらvpsのUbuntu12.04にnginxとunicornをインストールしてローカル環境に作ったRailsアプリを手動でアップロードして表示させてみた。何となくユニコーンって名前が好きなので、unicornを使うことにした。&lt;/p&gt;
&lt;h2&gt;nginxインストール&lt;/h2&gt;
&lt;p&gt;nginxは本当は手動でインストールするのがいいんだろうけど、面倒なので&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ sudo aptitude install nginx
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;でインストール&lt;/p&gt;
&lt;h2&gt;unicornインストール&lt;/h2&gt;
&lt;!-- more --&gt;

&lt;p&gt;rubyとかbundlerとかが必要なので、無い場合は&lt;a href="http://blog.shigepon.info/blog/2014/02/26/rails-startup/"&gt;Ruby on Railsを入れてみた&lt;/a&gt;に書いた通りにインストール。unicornはGemfileに&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gem &amp;quot;unicorn&amp;quot;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;と追記して&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ bundle install -path vendor/bundle
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;でインストール出来る。要らないかもしれないけどお約束のようにインストール後はrbenv rehashしておく。&lt;/p&gt;
&lt;h2&gt;nginxの設定&lt;/h2&gt;
&lt;p&gt;設定ファイルは最低限これくらい書いておけばよさげ&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;upstream&lt;/span&gt; &lt;span class="nt"&gt;unicorn-unix-domain-socket&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;server&lt;/span&gt; &lt;span class="n"&gt;unix&lt;/span&gt;&lt;span class="o"&gt;:/&lt;/span&gt;&lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;unicorn&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;unicorn_&lt;/span&gt;&lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;app_name&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sock&lt;/span&gt; &lt;span class="n"&gt;fail_timeout&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nt"&gt;upstream&lt;/span&gt; &lt;span class="nt"&gt;unicorn-tcp&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;server&lt;/span&gt; &lt;span class="m"&gt;127&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="m"&gt;8080&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nt"&gt;server&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;listen&lt;/span&gt; &lt;span class="m"&gt;80&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="n"&gt;server_name&lt;/span&gt; &lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="o"&gt;://&lt;/span&gt;&lt;span class="n"&gt;hoge&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

        &lt;span class="n"&gt;root&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;to&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;app_root&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;public&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

        &lt;span class="n"&gt;access_log&lt;/span&gt;  &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;log&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;nginx&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;access&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;log&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="n"&gt;error_log&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;log&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;nginx&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;error&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;log&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

        &lt;span class="n"&gt;location&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="err"&gt;{&lt;/span&gt;
                &lt;span class="n"&gt;proxy_pass&lt;/span&gt; &lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="o"&gt;://&lt;/span&gt;&lt;span class="n"&gt;unicorn&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;tcp&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="err"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;/var/run/unicornディレクトリは前もって作っておく。/tmpとかでも良さげなんだけど、どうなんだろう？&lt;/p&gt;
&lt;h2&gt;railsアプリのアップロード&lt;/h2&gt;
&lt;p&gt;適当にアップロード。rsyncで適当にやった。&lt;/p&gt;
&lt;h2&gt;unicorn起動&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ bundle &lt;span class="nb"&gt;exec&lt;/span&gt; unicorn_rails -D
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;-Dはデーモンとして起動。configファイルを指定する場合は、-c path/to/config.rbを指定する。&lt;/p&gt;
&lt;h2&gt;nginx起動&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ service nginx start
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;以上でrailsアプリが見れるようになる。&lt;/p&gt;</summary><category term="Rails"></category><category term="ruby"></category></entry><entry><title>git memo</title><link href="http://blog.shigepon.info/blog/2014/04/09/git-memo/" rel="alternate"></link><updated>2016-11-16T11:55:49+09:00</updated><author><name>shigepon</name></author><id>tag:blog.shigepon.info,2014-04-09:blog/2014/04/09/git-memo/</id><summary type="html">&lt;p&gt;git関連のメモ&lt;/p&gt;
&lt;h3&gt;変更履歴を見る&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ git log -p
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;で全体の変更履歴&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ git log -p filename
&lt;/pre&gt;&lt;/div&gt;


&lt;!-- more --&gt;

&lt;p&gt;でfilenameの変更履歴を表示する&lt;/p&gt;
&lt;h3&gt;ブランチ間の変更ファイル一覧を取得&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ git diff --name-only -b parent_branch -b child_branch
//履歴を見る場合
$ git diff --name-only
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;参考：&lt;a href="http://qa.atmarkit.co.jp/q/2047"&gt;gitの指定ブランチで変更されたファイルの一覧を取得したい - QA@IT&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;GitHubで色々やる手順&lt;/h2&gt;
&lt;p&gt;参考：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://kik.xii.jp/archives/179"&gt;Github で Fork してから Pull Request をするまでの流れ | けーこ in サンフランシスコ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://qiita.com/xtetsuji/items/555a1ef19ed21ee42873"&gt;GitHubでFork/cloneしたリポジトリを本家リポジトリに追従する - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://misapon.blogspot.jp/2014/10/github.html"&gt;明日に向かって昇龍拳: GitHubでプルリクエストがマージされた後にすること&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;1.準備&lt;/h3&gt;
&lt;p&gt;まずは開発に関わりたいプロジェクトのリポジトリをFork&lt;/p&gt;
&lt;p&gt;次にローカルにクローン&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ git clone https://github.com/path/to/repository.git
$ &lt;span class="nb"&gt;cd&lt;/span&gt; repository
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;2.開発〜Pull Request&lt;/h3&gt;
&lt;p&gt;Pull Request用にブランチを切る&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ git checkout -b issue
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;コード変更後、コミット&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ git add -A
$ git commit -m &lt;span class="s2"&gt;&amp;quot;commit message&amp;quot;&lt;/span&gt;
$ git push origin issue
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;まだrebeseは良く分かってない。で、GitHub上でPull Requestを作成する。&lt;/p&gt;
&lt;h3&gt;3.Pull Requestが反映された後&lt;/h3&gt;
&lt;h4&gt;Pull Requestに使ったブランチを削除&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ git checkout master
$ git branch -D issue
$ git push origin :issue
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;GitHubでForkしたリポジトリを本家に合わせる&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ git remote add honke https://github.com/honke/path/to/repository.git
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;リポジトリの追加は1回で良い。後は合わせたいタイミングで下のコマンドを繰り返す&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ git fetch honke
$ git merge honke/master
$ git push origin master
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;以下2〜3を繰り返す&lt;/p&gt;
&lt;h3&gt;別の場所に開発中のブランチをダウンロードしたい場合&lt;/h3&gt;
&lt;p&gt;参考：
&lt;a href="http://glassylamp.blogspot.jp/2010/11/git.html"&gt;GlassyLamp: git でブランチを指定してダウンロードする方法&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;issueブランチをダウンロードしたい場合&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ git clone https://github.com/path/to/repository.git
$ git checkout -b issue-local remotes/origin/issue
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;masterブランチの変更を別ブランチに反映する&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ git checkout hoge
$ git merge master
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;mergeでコンフリクトしたファイルの一覧&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ git ls-files -u
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;branch名を変更する&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ git branch -m &amp;lt;oldname&amp;gt; &amp;lt;newname&amp;gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;参考：&lt;a href="http://stackoverflow.com/questions/6591213/how-do-you-rename-the-local-branch"&gt;git - How do you rename the local branch? - Stack Overflow&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;日本語ファイルの出力&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ git config --global core.quotepath &lt;span class="nb"&gt;false&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;と先にやっておくと日本語ファイル名もちゃんと表示される&lt;/p&gt;
&lt;p&gt;参考：&lt;a href="http://tobysoft.net/wiki/index.php?git%2F%C6%FC%CB%DC%B8%EC%A5%D5%A5%A1%A5%A4%A5%EB%CC%BE%A4%F2git%20status%A4%CA%A4%C9%A4%C7%C9%BD%BC%A8%A4%B9%A4%EB%CA%FD%CB%A1"&gt;git/日本語ファイル名をgit statusなどで表示する方法 - TOBY SOFT wiki&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;過去リビジョンや他ブランチのファイル内容を見る&lt;/h2&gt;
&lt;p&gt;過去リビジョン&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ git show &amp;lt;SHA1 object name&amp;gt;:&amp;lt;path&amp;gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;他ブランチ&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ git show &amp;lt;branch name&amp;gt;:&amp;lt;path&amp;gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;参考 ：&lt;a href="http://webtech-walker.com/archive/2010/07/28113324.html"&gt;gitで過去のリビジョンとか別のbranchのファイルを見る - Webtech Walker&lt;/a&gt;&lt;/p&gt;</summary><category term="git"></category><category term="memo"></category></entry><entry><title>Ubuntuでopensslのsecurity patchを当てる</title><link href="http://blog.shigepon.info/blog/2014/04/08/update-openssl-security-patch/" rel="alternate"></link><updated>2014-04-08T14:39:21+09:00</updated><author><name>shigepon</name></author><id>tag:blog.shigepon.info,2014-04-08:blog/2014/04/08/update-openssl-security-patch/</id><summary type="html">&lt;p&gt;本日、&lt;a href="http://jp.techcrunch.com/2014/04/08/20140407massive-security-bug-in-openssl-could-effect-a-huge-chunk-of-the-internet/"&gt;OpenSSLの重大バグが発覚。インターネットの大部分に影響の可能性 | TechCrunch Japan&lt;/a&gt;というニュースで&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;過去2年以内のあらゆるバージョンのOpenSSLが走るシステムで、システムメモリー上にある大量のデータを暴露することが可能&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;と書いてあった、これはまずいので、あわててセキュリティパッチを当てたので手順をメモ。 OSはUbuntu 12.04LTS。&lt;/p&gt;
&lt;p&gt;Ubuntuでは&lt;a href="http://www.ubuntu.com/usn/usn-2165-1/"&gt;USN-2165-1: OpenSSL vulnerabilities | Ubuntu&lt;/a&gt;にあるように、Ubuntu 13.10、12.10、12.04 LTSでセキュリティパッチが出ている（2014年4月7日現在)。ということでaptを使えばセキュリティパッチを当てることが出来る。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ sudo apt-get update
$ sudo apt-get upgrade
&lt;/pre&gt;&lt;/div&gt;


&lt;!-- more --&gt;

&lt;p&gt;または&lt;/p&gt;
&lt;!-- more --&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ sudo aptitude update
$ sudo aptitude upgrade
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;でおk。ただしopenssl versionでバージョン確認してもパッチが当たったかどうか良く分からないので以下のコマンドで確認&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ dpkg -l &lt;span class="p"&gt;|&lt;/span&gt; grep openssl
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Ubuntu 12.04LTSの場合&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;ii  openssl                              1.0.1-4ubuntu5.12                   Secure Socket Layer &lt;span class="o"&gt;(&lt;/span&gt;SSL&lt;span class="o"&gt;)&lt;/span&gt; binary and related cryptographic tools
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;と出ればおk。確認してないけど、Ubuntu 13.10なら1.0.1e-3ubuntu1.2、Ubuntu 12.10なら1.0.1c-3ubuntu2.7と出ていればおk。&lt;/p&gt;</summary><category term="linux"></category></entry><entry><title>nginx memo</title><link href="http://blog.shigepon.info/blog/2014/03/20/nginx-memo/" rel="alternate"></link><updated>2014-03-20T16:04:53+09:00</updated><author><name>shigepon</name></author><id>tag:blog.shigepon.info,2014-03-20:blog/2014/03/20/nginx-memo/</id><summary type="html">&lt;h2&gt;Nginxで503コードのページをカスタマイズする&lt;/h2&gt;
&lt;p&gt;なるべく手軽にメンテナンスページを出すための手順&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;path/to/root/error/503.htmlにページを用意する。&lt;/li&gt;
&lt;li&gt;path/to/root/error/以下に画像やcss、javascriptなど必要なものを用意する。&lt;/li&gt;
&lt;li&gt;nginxの設定を変更する。必要な部分だけ抜粋&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="x"&gt;server &lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;span class="x"&gt;    server_name xxx.xxx;&lt;/span&gt;
&lt;span class="x"&gt;        set &lt;/span&gt;&lt;span class="p"&gt;$&lt;/span&gt;&lt;span class="nv"&gt;maintenance&lt;/span&gt;&lt;span class="x"&gt; false;&lt;/span&gt;
&lt;span class="x"&gt;        if (-f &lt;/span&gt;&lt;span class="p"&gt;$&lt;/span&gt;&lt;span class="nv"&gt;document_root&lt;/span&gt;&lt;span class="x"&gt;/error/503.html )&lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;span class="x"&gt;                set &lt;/span&gt;&lt;span class="p"&gt;$&lt;/span&gt;&lt;span class="nv"&gt;maintenance&lt;/span&gt;&lt;span class="x"&gt; true;&lt;/span&gt;
&lt;span class="x"&gt;        }&lt;/span&gt;
&lt;span class="x"&gt;        if (&lt;/span&gt;&lt;span class="p"&gt;$&lt;/span&gt;&lt;span class="nv"&gt;uri&lt;/span&gt;&lt;span class="x"&gt; ~ &amp;quot;^/error/&amp;quot;) &lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;span class="x"&gt;            set &lt;/span&gt;&lt;span class="p"&gt;$&lt;/span&gt;&lt;span class="nv"&gt;maintenance&lt;/span&gt;&lt;span class="x"&gt; false;&lt;/span&gt;
&lt;span class="x"&gt;        }&lt;/span&gt;
&lt;span class="x"&gt;        if (&lt;/span&gt;&lt;span class="p"&gt;$&lt;/span&gt;&lt;span class="nv"&gt;remote_addr&lt;/span&gt;&lt;span class="x"&gt; = XXX.XXX.XXX.XXX )&lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;span class="x"&gt;                set &lt;/span&gt;&lt;span class="p"&gt;$&lt;/span&gt;&lt;span class="nv"&gt;maintenance&lt;/span&gt;&lt;span class="x"&gt; false;&lt;/span&gt;&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="x"&gt;指定したIPからのアクセスは普通に見れるようにする&lt;/span&gt;
&lt;span class="x"&gt;        }&lt;/span&gt;
&lt;span class="x"&gt;        if (&lt;/span&gt;&lt;span class="p"&gt;$&lt;/span&gt;&lt;span class="nv"&gt;maintenance&lt;/span&gt;&lt;span class="x"&gt; = true) &lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;span class="x"&gt;                return 503;&lt;/span&gt;
&lt;span class="x"&gt;        }&lt;/span&gt;
&lt;span class="x"&gt;        error_page 503 @maintenance;&lt;/span&gt;
&lt;span class="x"&gt;        location @maintenance &lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;span class="x"&gt;                rewrite ^(.*)&lt;/span&gt;&lt;span class="p"&gt;$&lt;/span&gt;&lt;span class="x"&gt; /error/503.html break;&lt;/span&gt;
&lt;span class="x"&gt;                expires 0;&lt;/span&gt;
&lt;span class="x"&gt;        }&lt;/span&gt;
&lt;span class="x"&gt;        location /error/ &lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="x"&gt;}&lt;/span&gt;

&lt;span class="x"&gt;&amp;lt;!-- more --&amp;gt;&lt;/span&gt;

&lt;span class="x"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;path/to/root/error/503.htmlがあれば、メンテナンス画面を表示する。なければ表示しない。一度nginx設定をリロードすればその後はリロードの必要もない。&lt;/p&gt;
&lt;h2&gt;末尾に必ずスラッシュを入れる&lt;/h2&gt;
&lt;p&gt;djangoで末尾スラッシュで無い場合に上手くurlsを組み立てられなかったりしたので・・・djangoは悪くなく、自分の実装のせいなんだけど。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;rewrite ^([^.]*[^/])$ $1/ permanent;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;でおk&lt;/p&gt;
&lt;p&gt;参考：&lt;a href="http://stackoverflow.com/questions/645853/add-slash-to-the-end-of-every-url-need-rewrite-rule-for-nginx"&gt;regex - Add slash to the end of every url (need rewrite rule for nginx) - Stack Overflow&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;書式チェック&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ sudo nginx -t -c /path/to/nginx.conf
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;でチェック出来る&lt;/p&gt;
&lt;p&gt;参考：&lt;a href="http://qiita.com/yaotti/items/bd6774888a790c00e6fd"&gt;nginxで設定ファイルチェック - Qiita&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;ltsvでログを取る&lt;/h2&gt;
&lt;p&gt;※　まずerror_logでは指定出来ないので注意&lt;/p&gt;
&lt;p&gt;ログのフォーマットにltsvを追加する。/etc/nginx/nginx.conf内でも
/etc/nginx/conf.d/*.conf内でもおk&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;log_format&lt;/span&gt; &lt;span class="nt"&gt;ltsv&lt;/span&gt;  &lt;span class="s2"&gt;&amp;quot;time:$time_local&amp;quot;&lt;/span&gt;
                &lt;span class="s2"&gt;&amp;quot;\thost:$remote_addr&amp;quot;&lt;/span&gt;
                &lt;span class="s2"&gt;&amp;quot;\tforwardedfor:$http_x_forwarded_for&amp;quot;&lt;/span&gt;
                &lt;span class="s2"&gt;&amp;quot;\treq:$request&amp;quot;&lt;/span&gt;
                &lt;span class="s2"&gt;&amp;quot;\tstatus:$status&amp;quot;&lt;/span&gt;
                &lt;span class="s2"&gt;&amp;quot;\tsize:$body_bytes_sent&amp;quot;&lt;/span&gt;
                &lt;span class="s2"&gt;&amp;quot;\treferer:$http_referer&amp;quot;&lt;/span&gt;
                &lt;span class="s2"&gt;&amp;quot;\tua:$http_user_agent&amp;quot;&lt;/span&gt;
                &lt;span class="s2"&gt;&amp;quot;\treqtime:$request_time&amp;quot;&lt;/span&gt;
                &lt;span class="s2"&gt;&amp;quot;\tvhost:$host&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;sites-available内でのaccess_logの設定を以下のように変更&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;access_log /var/log/nginx/access.log ltsv;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;参考：&lt;a href="http://toshitanian.hatenablog.com/entry/2013/10/25/023838"&gt;nginxのerror_logはformat指定できない． - としたにあんの左脳&lt;/a&gt;&lt;/p&gt;</summary><category term="nginx"></category><category term="memo"></category></entry><entry><title>rhaco3 memo</title><link href="http://blog.shigepon.info/blog/2014/03/15/rhaco3-memo/" rel="alternate"></link><updated>2014-03-15T13:28:55+09:00</updated><author><name>shigepon</name></author><id>tag:blog.shigepon.info,2014-03-15:blog/2014/03/15/rhaco3-memo/</id><summary type="html">&lt;p&gt;rhaco3を使ってる人なんて世界で何人居るのかなと思いつつ、あまりに情報が少ないので、メモ書きしていく。
大きめネタは別記事にまとめるが小さいネタはここに追記する。&lt;/p&gt;
&lt;h3&gt;Daoで作ったSQLを確認する方法&lt;/h3&gt;
&lt;p&gt;Daoを継承したモデルとして、Hogeモデルがあるとして&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="x"&gt;\Hoge::start_record();&lt;/span&gt;
&lt;span class="x"&gt;\Hoge::find_get(\org\rhaco\store\db\Q::eq(&amp;quot;id&amp;quot;,1));//\Hogeモデルからid=1のデータを1件取得する命令&lt;/span&gt;
&lt;span class="x"&gt;$queries = \Hoge::stop_record();&lt;/span&gt;
&lt;span class="x"&gt;var_dump($queries);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;!-- more --&gt;

&lt;p&gt;こんな感じで使う。出力は&lt;/p&gt;
&lt;!-- more --&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;array(1) {
  [0]=&amp;gt;
  array(2) {
    [0]=&amp;gt;
    string(291) &amp;quot;select t4.&amp;quot;id&amp;quot; as c5,t4.&amp;quot;name&amp;quot; as c10 from hoge t4 where  ( (t4.&amp;quot;id&amp;quot; = ?) )   offset 0 limit 1 &amp;quot;
    [1]=&amp;gt;
    array(1) {
      [0]=&amp;gt;
      string(1) &amp;quot;1&amp;quot;
    }
  }
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;みたいに出る&lt;/p&gt;
&lt;h3&gt;あるクラス用に設定したConfを別クラスから参照したい&lt;/h3&gt;
&lt;p&gt;\org\rhaco\Confはクラス用に設定値を決めるのに良く使う。
大体commons/hoge.phpみたいにrhaco3で設定値を書くファイルに書くことが多い。&lt;/p&gt;
&lt;p&gt;例としてFlowクラスでルートURLを設定するには&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="x"&gt;\org\rhaco\Conf::set(&amp;quot;org.rhaco.Flow&amp;quot;,&amp;quot;app_url&amp;quot;,&amp;quot;localhost&amp;quot;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;こんな感じでcommons/hoge.phpに書いたりする。Flowクラス内では&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="x"&gt;$app_url = \org\rhaco\Conf::get(&amp;quot;app_url&amp;quot;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;で設定した値を読み込める。
他のクラスで読み込みたい場合にどうするか良く分からなかったがソース読んだら分かったのでメモしておく&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="x"&gt;$app_url = \org\rhaco\Conf::get(&amp;quot;org.rhaco.Flow@app_url&amp;quot;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;これでおk。@で区切ってクラス名と取得したい値のキーを書くと値を取って来れる。&lt;/p&gt;</summary><category term="rhaco"></category><category term="rhaco3"></category><category term="memo"></category></entry><entry><title>Rails4でPostgreSQLとBootstrap使ったアプリを作ってみた(4):ビューにBootstrapを使う</title><link href="http://blog.shigepon.info/blog/2014/03/14/a-way-of-creating-rails-application4/" rel="alternate"></link><updated>2014-03-14T09:10:41+09:00</updated><author><name>shigepon</name></author><id>tag:blog.shigepon.info,2014-03-14:blog/2014/03/14/a-way-of-creating-rails-application4/</id><summary type="html">&lt;p&gt;参考にした記事URL一覧&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://ubiqlog.com/archives/8749"&gt;Ruby on Rails 4.0正式リリースとBootstrapの正しい設定法 | ユービックログ研究所&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://railscasts.com/episodes/328-twitter-bootstrap-basics?language=ja&amp;amp;view=asciicast"&gt;#328 Twitter Bootstrap Basics - RailsCasts&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;今回はそっけない表示画面をそれっぽくするためにビューにBootstrapを当てはめる。&lt;/p&gt;
&lt;p&gt;Gemfileを編集&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;+gem &amp;#39;less-rails&amp;#39;
+gem &amp;#39;twitter-bootstrap-rails&amp;#39;
+gem &amp;#39;execjs&amp;#39;
-gem &amp;#39;sass-rails&amp;#39;
&lt;/pre&gt;&lt;/div&gt;


&lt;!-- more --&gt;

&lt;p&gt;以下のコマンドを実行&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ bundle install
$ rails g bootstrap:install
$ rails g bootstrap:layout application
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;と実行したけど、最後のコマンドはビューを勝手に色々いじるので、しない方が良いかもしれない。上のコマンドを実行すると&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;app/assets/javascripts/application.js
app/assets/javascripts/bootstrap.js.coffee
app/assets/stylesheets/application.css
app/assets/stylesheets/bootstrap_and_overrides.css.less
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;が出来る。さて、この状態で出力を見ると、ページ上部がナビゲーションバーで隠れてしまった。
app/assets/stylesheets/bootstrap_and_overrides.css.lessを修正することで対処する&lt;/p&gt;
&lt;p&gt;変更前&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;@import&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;twitter/bootstrap/bootstrap&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;@import&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;twitter/bootstrap/responsive&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;変更後&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;@import&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;twitter/bootstrap/bootstrap&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nt"&gt;body&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nb"&gt;padding-top&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="m"&gt;60px&lt;/span&gt;&lt;span class="p"&gt;;}&lt;/span&gt;
&lt;span class="k"&gt;@import&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;twitter/bootstrap/responsive&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;これでページが隠れなくなる。レイアウト変更にはapp/views/layouts/application.html.erbを編集する必要がある。&lt;/p&gt;</summary><category term="ruby"></category><category term="Rails"></category><category term="PostgreSQL"></category><category term="Bootstrap"></category></entry><entry><title>Rails4でPostgreSQLとBootstrap使ったアプリを作ってみた(1):とりあえずRailsアプリを作ってみた</title><link href="http://blog.shigepon.info/blog/2014/03/10/a-way-of-creating-rails-application/" rel="alternate"></link><updated>2014-03-10T18:10:41+09:00</updated><author><name>shigepon</name></author><id>tag:blog.shigepon.info,2014-03-10:blog/2014/03/10/a-way-of-creating-rails-application/</id><summary type="html">&lt;p&gt;参考にした記事URL一覧&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://openbook4.me/projects/92"&gt;小学生でもわかるRuby on Rails入門 | OpenBook&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.oiax.jp/rails3book/setup_postgresql.html"&gt;データベースとの接続（PostgreSQL編） - Ruby on Rails with OIAX&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://qiita.com/stkn_bb/items/72d06c149d3e6f315f8c"&gt;[Rails]既存のMySQLテーブルに接続する方法 - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://ubiqlog.com/archives/8749"&gt;Ruby on Rails 4.0正式リリースとBootstrapの正しい設定法 | ユービックログ研究所&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://railscasts.com/episodes/328-twitter-bootstrap-basics?language=ja&amp;amp;view=asciicast"&gt;#328 Twitter Bootstrap Basics - RailsCasts&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://qiita.com/somewhatgood@github/items/9890e75b4c195d47715a"&gt;Rails - link_to の引数と展開の違いまとめ - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;基本的なところは&lt;a href="http://openbook4.me/projects/92"&gt;小学生でもわかるRuby on Rails入門 | OpenBook&lt;/a&gt;をなぞってみる。
ただし、PostgreSQLの既存テーブルを使い、テンプレートにBootstrapを使うので、途中から色々やることが変わっている。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ rails new bocho
&lt;/pre&gt;&lt;/div&gt;


&lt;!-- more --&gt;

&lt;p&gt;&lt;a href=""&gt;Ruby on Railsを入れてみた&lt;/a&gt;に注意点であげたようにGemfileからtherubyracerに関する行をコメントアウトしてbundle install 
これをしないとrails g controllerコマンドで&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;autodetect&lt;span class="s1"&gt;&amp;#39;: Could not find a Javascript runtime. ...&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;というエラーが出た&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ rails g controller events index show
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;と入力してビューとコントローラーを作った。これの意味はeventsというコントローラーとindex、showというビューを作る。ビューはスペース区切りで複数書けるみたい。indexはデータ一覧、showは個別データの表示を意味している
ファイルとしては&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;app/controllers/events_controller.rb
app/views/events/index.html.erb
app/views/events/show.html.erb
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;が出来る。events_controller.rbにはindexとshowメソッドが入っている&lt;/p&gt;
&lt;h3&gt;確認&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ rails s
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;でサーバを起動させて、[http://0.0.0.0:3000/events/index]と[http://0.0.0.0:3000/events/show]を確認&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Events##index
Find me in app/view/events/index.html.erb
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;みたいなメッセージが出てたらおk&lt;/p&gt;
&lt;h3&gt;コントローラー、ビューを修正&lt;/h3&gt;
&lt;p&gt;ビューって言っていいのかテンプレートなのか良くわからないけどapp/views/events/show.html.erbを修正&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="x"&gt;&amp;lt;h1&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;&amp;lt;%=&lt;/span&gt; &lt;span class="vi"&gt;@event&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:name&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="cp"&gt;%&amp;gt;&lt;/span&gt;&lt;span class="x"&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;これで[http://0.0.0.0:3000/events/show]を確認するとエラーが表示される。&lt;/p&gt;
&lt;p&gt;@eventが登録されてないので、コントローラーで登録する&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;show&lt;/span&gt;
      &lt;span class="vi"&gt;@event&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;Hash&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;new&lt;/span&gt;
          &lt;span class="vi"&gt;@event&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:name&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;hoge&amp;#39;&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;これでさっきのURLにアクセスすると&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;hoge&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;と表示される。なるほど@変数名に値を入れたらテンプレでアクセス出来るようになるのね。&lt;/p&gt;
&lt;h3&gt;URLにパラメーターを入れる&lt;/h3&gt;
&lt;p&gt;テーブルのidが1のデータを[http://0.0.0.0:3000/events/show/1]で表示出来るように考える。
そのためにはconfig/routes.rbを&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;  &lt;span class="n"&gt;get&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;events/show/&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;  &lt;span class="n"&gt;get&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;events/show/:eventid&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;events#show&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;こうすると上のURLにアクセスするとevents_controller.rbのshowメソッド内でparams[:eventid]に1が入る
events_controller.rbを次のように変えると&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;show&lt;/span&gt;
      &lt;span class="vi"&gt;@event&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;Hash&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;new&lt;/span&gt;
          &lt;span class="vi"&gt;@event&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:name&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;params&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:eventid&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;[http://0.0.0.0:3000/events/show/1]にアクセスすると&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;1&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;と表示されるようになる。（あくまでこういうコードはテスト用）
とりあえずここまで&lt;/p&gt;</summary><category term="ruby"></category><category term="Rails"></category><category term="PostgreSQL"></category><category term="Bootstrap"></category></entry><entry><title>Rails4でPostgreSQLとBootstrap使ったアプリを作ってみた(2):データベースにPostgreSQLを使ってみた</title><link href="http://blog.shigepon.info/blog/2014/03/10/a-way-of-creating-rails-application2/" rel="alternate"></link><updated>2014-03-10T18:10:41+09:00</updated><author><name>shigepon</name></author><id>tag:blog.shigepon.info,2014-03-10:blog/2014/03/10/a-way-of-creating-rails-application2/</id><summary type="html">&lt;p&gt;参考にした記事URL一覧&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://openbook4.me/projects/92"&gt;小学生でもわかるRuby on Rails入門 | OpenBook&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.oiax.jp/rails3book/setup_postgresql.html"&gt;データベースとの接続（PostgreSQL編） - Ruby on Rails with OIAX&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://qiita.com/stkn_bb/items/72d06c149d3e6f315f8c"&gt;[Rails]既存のMySQLテーブルに接続する方法 - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;前回に引き続き&lt;a href="http://openbook4.me/projects/92"&gt;小学生でもわかるRuby on Rails入門 | OpenBook&lt;/a&gt;を参考にしているが、色々すっとばしてデータベースを作るところをなぞる。
どうもモデルを作って、コマンド打ったら自動的にテーブル作ってくれてよしなにしてくれるらしい。&lt;/p&gt;
&lt;p&gt;ではモデルを作る。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ rails g model event name:string date:timestamp 
&lt;/pre&gt;&lt;/div&gt;


&lt;!-- more --&gt;

&lt;p&gt;モデルは単数型の英語で書くのが良いらしい。idは書かなくても自動で設定してくれるらしい。コマンドを実行すると次のようなファイルが出来る&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;app/models/event.rb
db/migrate/20140310033758_create_events.rb
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;後でテーブルの生成が上手く行かない場合に、変数の型で変なのを設定してる場合とかあるので、migrateフォルダのファイルを修正すると上手くいくことがある。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;rake db:migrate
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;と打ったらテーブルが出来た。めでたしめでたし・・・と思ったらそういえばリモートサーバ上のPostgreSQLテーブルにデータ入れてたのを思い出したので、sqliteからPostgreSQLに使用データベースを変更してみる。&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.oiax.jp/rails3book/setup_postgresql.html"&gt;データベースとの接続（PostgreSQL編） - Ruby on Rails with OIAX&lt;/a&gt;を参考にしたが、PostgreSQLの設定までは終了しているので、その後の部分をやってみた。&lt;/p&gt;
&lt;h3&gt;Gemfileを編集&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gem &amp;quot;sqlite3&amp;quot;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;を&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gem &amp;quot;pg&amp;quot;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;に変更して、bundle installを実行。すると何かエラーが・・・メッセージを見ると&lt;a href="http://qiita.com/youcune/items/5b783f7fde45d0fd4b35"&gt;Ruby - gem install pgしてNo pg_configとなる対処法 - Qiita&lt;/a&gt;が参考になりそうなので、libpq-devを入れてエラーを解消した（Ubuntuの場合)&lt;/p&gt;
&lt;h3&gt;config/database.yamlを編集&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;development&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;
  &lt;span class="l l-Scalar l-Scalar-Plain"&gt;adapter&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;sqlite3&lt;/span&gt;
  &lt;span class="l l-Scalar l-Scalar-Plain"&gt;database&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;db/development.sqlite3&lt;/span&gt;
  &lt;span class="l l-Scalar l-Scalar-Plain"&gt;pool&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;5&lt;/span&gt;
  &lt;span class="l l-Scalar l-Scalar-Plain"&gt;timeout&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;5000&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;みたいな箇所を&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;development&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;
  &lt;span class="l l-Scalar l-Scalar-Plain"&gt;adapter&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;postgresql&lt;/span&gt;
  &lt;span class="l l-Scalar l-Scalar-Plain"&gt;host&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;000.000.00.00&lt;/span&gt;
  &lt;span class="l l-Scalar l-Scalar-Plain"&gt;port&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;5432&lt;/span&gt;
  &lt;span class="l l-Scalar l-Scalar-Plain"&gt;database&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;bocho&lt;/span&gt;
  &lt;span class="l l-Scalar l-Scalar-Plain"&gt;username&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="err"&gt;****&lt;/span&gt;
  &lt;span class="l l-Scalar l-Scalar-Plain"&gt;password&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="err"&gt;****&lt;/span&gt;
  &lt;span class="l l-Scalar l-Scalar-Plain"&gt;pool&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;5&lt;/span&gt;
  &lt;span class="l l-Scalar l-Scalar-Plain"&gt;timeout&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;5000&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;に変更した。development以外にtest, productionと項目があって、それぞれ同じように変更した。これがどう違うのかはまだ勉強してない。localhostの場合はhost,portは要らないみたい。&lt;/p&gt;
&lt;h3&gt;テーブル名の変更&lt;/h3&gt;
&lt;p&gt;良く考えたら、PostgreSQLに保存してるデータのテーブルはeventsじゃなくてbochoだったので、そういう設定もしないといけない。その方法は&lt;a href="http://qiita.com/stkn_bb/items/72d06c149d3e6f315f8c"&gt;[Rails]既存のMySQLテーブルに接続する方法 - Qiita&lt;/a&gt;を参考にした。eventモデル(app/models/event.rb)を次のように変更&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Event&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="no"&gt;ActiveRecord&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Base&lt;/span&gt;
    &lt;span class="nb"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;table_name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;bocho&amp;#39;&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;なんかググったら他の書式もあったけど、それだとエラー出たので、今はこの書き方なのかな？ 
これで準備が出来たので、テーブルからデータを読み込んで表示してみる&lt;/p&gt;
&lt;h3&gt;データ読み込み&lt;/h3&gt;
&lt;p&gt;app/controllers/events_controller.rbを次のように書き換え&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;show&lt;/span&gt;
      &lt;span class="vi"&gt;@event&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;Event&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;find_by&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:id&lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;params&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:eventid&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;これ多分&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="vi"&gt;@event&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;Event&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;find&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;params&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:eventid&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;でもいける。&lt;/p&gt;
&lt;h3&gt;データ表示&lt;/h3&gt;
&lt;p&gt;app/views/events/show.html.erbを編集&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="x"&gt;&amp;lt;h1&amp;gt;Event&amp;lt;/h1&amp;gt;&lt;/span&gt;
&lt;span class="x"&gt;&amp;lt;dl&amp;gt;&lt;/span&gt;
&lt;span class="x"&gt;    &amp;lt;dt&amp;gt;日時&amp;lt;/dt&amp;gt;&lt;/span&gt;
&lt;span class="x"&gt;    &amp;lt;dd&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;&amp;lt;%=&lt;/span&gt; &lt;span class="vi"&gt;@event&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:date&lt;/span&gt;&lt;span class="o"&gt;].&lt;/span&gt;&lt;span class="n"&gt;strftime&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;%Y/%m/%d %H:%m&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="cp"&gt;%&amp;gt;&lt;/span&gt;&lt;span class="x"&gt;&amp;lt;/dd&amp;gt;&lt;/span&gt;
&lt;span class="x"&gt;    &amp;lt;dt&amp;gt;イベント名&amp;lt;/dt&amp;gt;&lt;/span&gt;
&lt;span class="x"&gt;    &amp;lt;dd&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;&amp;lt;%=&lt;/span&gt; &lt;span class="vi"&gt;@event&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:name&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="cp"&gt;%&amp;gt;&lt;/span&gt;&lt;span class="x"&gt;&amp;lt;/dd&amp;gt;&lt;/span&gt;
&lt;span class="x"&gt;&amp;lt;/dl&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="x"&gt;&amp;lt;dd&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;&amp;lt;%=&lt;/span&gt; &lt;span class="vi"&gt;@event&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;date&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;strftime&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;%Y/%m/%d %H:%m&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="cp"&gt;%&amp;gt;&lt;/span&gt;&lt;span class="x"&gt;&amp;lt;/dd&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;でもおk&lt;/p&gt;
&lt;p&gt;以上の作業後に [http://0.0.0.0:3000/events/show/1]にアクセスすると 
id=1,date=2014/03/01 10:00:00,name=ほげ 
というデータが入っていた場合、&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Event&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;dl&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;dt&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;日時&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;dt&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;dd&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;2014/03/01 10:00&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;dd&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;dt&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;イベント名&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;dt&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;dd&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;ほげ&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;dd&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;dl&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;と表示されたりする。&lt;/p&gt;</summary><category term="ruby"></category><category term="Rails"></category><category term="PostgreSQL"></category><category term="Bootstrap"></category></entry><entry><title>Rails4でPostgreSQLとBootstrap使ったアプリを作ってみた(3):データ一覧ページを作って、詳細ページへのリンクを貼る</title><link href="http://blog.shigepon.info/blog/2014/03/10/a-way-of-creating-rails-application3/" rel="alternate"></link><updated>2014-03-10T18:10:41+09:00</updated><author><name>shigepon</name></author><id>tag:blog.shigepon.info,2014-03-10:blog/2014/03/10/a-way-of-creating-rails-application3/</id><summary type="html">&lt;p&gt;参考にした記事URL一覧&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://openbook4.me/projects/92"&gt;小学生でもわかるRuby on Rails入門 | OpenBook&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://qiita.com/somewhatgood@github/items/9890e75b4c195d47715a"&gt;Rails - link_to の引数と展開の違いまとめ - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;前回に引き続き&lt;a href="http://openbook4.me/projects/92"&gt;小学生でもわかるRuby on Rails入門 | OpenBook&lt;/a&gt;を参考にしているが、色々すっとばして16章から適当に確認しながら適当に実装する。&lt;/p&gt;
&lt;h3&gt;一覧表示&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;index&lt;/span&gt;
  &lt;span class="vi"&gt;@events&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;Event&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;all&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;!-- more --&gt;

&lt;p&gt;と書くとテーブルにあるデータ全て取ってくるらしい（DAOで良くある書式）。
ビューでは@eventsに対してループさせる必要があるので次のような書式になる。
app/views/events/index.html.erbを次のように書き換える&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="x"&gt;&amp;lt;h1&amp;gt;Events&amp;lt;/h1&amp;gt;&lt;/span&gt;
&lt;span class="x"&gt;&amp;lt;table class=&amp;quot;table&amp;quot;&amp;gt;&lt;/span&gt;
&lt;span class="x"&gt;    &amp;lt;thead&amp;gt;&lt;/span&gt;
&lt;span class="x"&gt;        &amp;lt;th&amp;gt;日時&amp;lt;/th&amp;gt;&amp;lt;th&amp;gt;イベント名&amp;lt;/th&amp;gt;&lt;/span&gt;
&lt;span class="x"&gt;    &amp;lt;/thead&amp;gt;&lt;/span&gt;
&lt;span class="x"&gt;    &lt;/span&gt;&lt;span class="cp"&gt;&amp;lt;%&lt;/span&gt; &lt;span class="vi"&gt;@events&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;each&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;event&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="cp"&gt;%&amp;gt;&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;span class="x"&gt;        &amp;lt;tr&amp;gt;&lt;/span&gt;
&lt;span class="x"&gt;            &amp;lt;td&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;&amp;lt;%=&lt;/span&gt; &lt;span class="n"&gt;event&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;date&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;strftime&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;%Y/%m/%d %H:%m&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="cp"&gt;%&amp;gt;&lt;/span&gt;&lt;span class="x"&gt;&amp;lt;/td&amp;gt;&lt;/span&gt;
&lt;span class="x"&gt;            &amp;lt;td&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;&amp;lt;%=&lt;/span&gt; &lt;span class="n"&gt;event&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="cp"&gt;%&amp;gt;&lt;/span&gt;&lt;span class="x"&gt;&amp;lt;/td&amp;gt;&lt;/span&gt;
&lt;span class="x"&gt;        &amp;lt;/tr&amp;gt;&lt;/span&gt;
&lt;span class="x"&gt;    &lt;/span&gt;&lt;span class="cp"&gt;&amp;lt;%&lt;/span&gt; &lt;span class="k"&gt;end&lt;/span&gt; &lt;span class="cp"&gt;%&amp;gt;&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;span class="x"&gt;&amp;lt;/table&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;[http://0.0.0.0:3000/events/index]にアクセスすれば一覧が表示される。どこかのページでeachでなくeach_with_indexという書き方してるページあったけど、Rails4では動かなかった。
バージョン違い？&lt;/p&gt;
&lt;h3&gt;リンクを貼る&lt;/h3&gt;
&lt;p&gt;一覧と詳細を繋げたいので、リンクを貼る。link_toというのを使うらしい。 &lt;a href="http://qiita.com/somewhatgood@github/items/9890e75b4c195d47715a"&gt;Rails - link_to の引数と展開の違いまとめ - Qiita&lt;/a&gt;の「基本」を使えば今回は十分。上のerbを次のように書き換える&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="x"&gt;&amp;lt;h1&amp;gt;Events&amp;lt;/h1&amp;gt;&lt;/span&gt;
&lt;span class="x"&gt;&amp;lt;table class=&amp;quot;table&amp;quot;&amp;gt;&lt;/span&gt;
&lt;span class="x"&gt;    &amp;lt;thead&amp;gt;&lt;/span&gt;
&lt;span class="x"&gt;        &amp;lt;th&amp;gt;日時&amp;lt;/th&amp;gt;&amp;lt;th&amp;gt;イベント名&amp;lt;/th&amp;gt;&amp;lt;th&amp;gt;link&amp;lt;/th&amp;gt;&lt;/span&gt;
&lt;span class="x"&gt;    &amp;lt;/thead&amp;gt;&lt;/span&gt;
&lt;span class="x"&gt;    &lt;/span&gt;&lt;span class="cp"&gt;&amp;lt;%&lt;/span&gt; &lt;span class="vi"&gt;@events&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;each&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;event&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="cp"&gt;%&amp;gt;&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;span class="x"&gt;        &amp;lt;tr&amp;gt;&lt;/span&gt;
&lt;span class="x"&gt;            &amp;lt;td&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;&amp;lt;%=&lt;/span&gt; &lt;span class="n"&gt;event&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;date&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;strftime&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;%Y/%m/%d %H:%m&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="cp"&gt;%&amp;gt;&lt;/span&gt;&lt;span class="x"&gt;&amp;lt;/td&amp;gt;&lt;/span&gt;
&lt;span class="x"&gt;            &amp;lt;td&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;&amp;lt;%=&lt;/span&gt; &lt;span class="n"&gt;event&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="cp"&gt;%&amp;gt;&lt;/span&gt;&lt;span class="x"&gt;&amp;lt;/td&amp;gt;&lt;/span&gt;
&lt;span class="x"&gt;            &amp;lt;td&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;&amp;lt;%=&lt;/span&gt; &lt;span class="n"&gt;link_to&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;詳細&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="ss"&gt;:controller&lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;events&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="ss"&gt;:action&lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;show&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="ss"&gt;:eventid&lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;event&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt; &lt;span class="cp"&gt;%&amp;gt;&lt;/span&gt;&lt;span class="x"&gt;&amp;lt;/td&amp;gt;&lt;/span&gt;
&lt;span class="x"&gt;        &amp;lt;/tr&amp;gt;&lt;/span&gt;
&lt;span class="x"&gt;    &lt;/span&gt;&lt;span class="cp"&gt;&amp;lt;%&lt;/span&gt; &lt;span class="k"&gt;end&lt;/span&gt; &lt;span class="cp"&gt;%&amp;gt;&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;span class="x"&gt;&amp;lt;/table&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;controllerはコントローラー、actionはビュー？かどうか分からないけど、コントローラー内で定義してるメソッド、あとパラメーター名（eventid）はconfig/routes.rbで指定したパラメーター名が使用出来る（と思う）。とりあえずこう作ったけど、最終的にハッシュにした方がいいんだろな。&lt;/p&gt;
&lt;h3&gt;一覧の範囲を絞り込む&lt;/h3&gt;
&lt;p&gt;テーブルのデータ全部でなく、一部のデータに絞り込んで表示してみる。
日付のデータがあるので、今月のデータに絞り込んでみる。app/controllers/events_controller.rbを編集&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;index&lt;/span&gt;
      &lt;span class="n"&gt;from&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;Time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;now&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;at_beginning_of_month&lt;/span&gt;
      &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;from&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;month&lt;/span&gt;
      &lt;span class="vi"&gt;@events&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;Event&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;all&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:conditions&lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;date&amp;gt;=? and date&amp;lt;=?&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;from&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;to&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="ss"&gt;:order&lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;date&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;ここらへんは&lt;a href="http://waka.hatenablog.com/entry/2013/04/05/083349"&gt;ActiveRecordで日付の範囲指定 - yo_waka's blog&lt;/a&gt;を参考にしながら適当に実装した。ActiveRecordは色んな表現方法があるのでどうしたもんかな。ただ、数字も何でもオブジェクトってのは面白い。&lt;/p&gt;</summary><category term="ruby"></category><category term="Rails"></category><category term="PostgreSQL"></category><category term="Bootstrap"></category></entry><entry><title>Google Analyticsからbotアクセスを取り除く</title><link href="http://blog.shigepon.info/blog/2014/03/09/how-to-block-bot-access-from-google-analytics/" rel="alternate"></link><updated>2014-03-09T21:53:40+09:00</updated><author><name>shigepon</name></author><id>tag:blog.shigepon.info,2014-03-09:blog/2014/03/09/how-to-block-bot-access-from-google-analytics/</id><summary type="html">&lt;p&gt;参考ページ&lt;a href="http://www.lunametrics.com/blog/2013/09/05/filter-bots-google-analytics/#sr=d&amp;amp;m=n&amp;amp;cp=d&amp;amp;ct=-tmc&amp;amp;ts=1394369739"&gt;How to Block Bots from Your Google Analytics&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;ここ数日Google Analyticsにアメリカからリファラ無し直帰率100%近くのアクセスを大量に発見。
どう考えてもbotですどうも(ry 
本当はGoogle Analyticsに自動でフィルタして欲しいけど、どうもフィルタしてないので、自力でフィルタ設定しないといけないみたい。&lt;/p&gt;
&lt;p&gt;上のリンクを参考に設定してみる&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;アナリティクス設定→ ビュー→フィルタと移動&lt;/li&gt;
&lt;li&gt;「新しいボタン」をクリック&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;設定は以下の通り&lt;/h3&gt;
&lt;!-- more --&gt;

&lt;ul&gt;
&lt;li&gt;新しいフィルタを作成&lt;/li&gt;
&lt;li&gt;フィルタ名：適当（Smart Bot 除外）とか？&lt;/li&gt;
&lt;li&gt;フィルタの種類：カスタムフィルタ&lt;/li&gt;
&lt;li&gt;除外&lt;/li&gt;
&lt;li&gt;フィルタフィールド：ISPドメインからのトラフィック&lt;/li&gt;
&lt;li&gt;フィルタパターン：^(microsoft corp(oration)?|inktomi corporation|yahoo! inc.|google inc.|stumbleupon inc.)$|gomez&lt;/li&gt;
&lt;li&gt;大文字小文字を区別：いいえ&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- more --&gt;

&lt;ul&gt;
&lt;li&gt;「保存」をクリック&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;これでフィルタできるけど、フィルタをかける以前の情報には反映しない。 
参考ページに設定テンプレートがあったのでここでもリンクしておく 
&lt;a href="https://www.google.com/analytics/web/template?uid=svscm2YdTe6s0yJeGHQM4Q"&gt;Smart Botを除外するテンプレート&lt;/a&gt;&lt;/p&gt;</summary><category term="google"></category></entry><entry><title>linux command memo</title><link href="http://blog.shigepon.info/blog/2014/03/07/linux-command-memo/" rel="alternate"></link><updated>2016-11-16T11:50:21+09:00</updated><author><name>shigepon</name></author><id>tag:blog.shigepon.info,2014-03-07:blog/2014/03/07/linux-command-memo/</id><summary type="html">&lt;h2&gt;アクセスログのIPアドレスを集計してみる&lt;/h2&gt;
&lt;p&gt;参考：&lt;a href="http://blog.livedoor.jp/stock_value/archives/51443839.html"&gt;Linux サーバーでお手軽にログの集計：こっそりと。 - livedoor Blog（ブログ）&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Google Analyticsでリファラ無しの変なアクセスが増えたので、アクセスログからIPを集計してみた。
アクセスログの書式はLTSVでこんな感じ&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nn"&gt;time&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;07&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nv"&gt;Mar&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;2014&lt;/span&gt;&lt;span class="s s-Atom"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;06&lt;/span&gt;&lt;span class="s s-Atom"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;25&lt;/span&gt;&lt;span class="s s-Atom"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;22&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;0900&lt;/span&gt;       &lt;span class="nn"&gt;host&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s s-Atom"&gt;:&lt;/span&gt;&lt;span class="mf"&gt;11.22.33.46&lt;/span&gt;       &lt;span class="nn"&gt;forwardedfor&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;  &lt;span class="nn"&gt;req&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nv"&gt;GET&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="nv"&gt;HTTP&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mf"&gt;1.1&lt;/span&gt;   &lt;span class="nn"&gt;status&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;200&lt;/span&gt;      &lt;span class="nn"&gt;size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;       &lt;span class="nn"&gt;referer&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nn"&gt;ua&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nv"&gt;Mozilla&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mf"&gt;5.0&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s s-Atom"&gt;***&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;      &lt;span class="nn"&gt;reqtime&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mf"&gt;0.777&lt;/span&gt;   &lt;span class="nn"&gt;cache&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nn"&gt;runtime&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;       &lt;span class="nn"&gt;vhost&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s s-Atom"&gt;hoge&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="s s-Atom"&gt;fuga&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;なんか色々ソフト使うのとか面倒だったのでgrepとかawkでほげほげした。要はhost:11.22.33.44に当たる箇所を取り出して表示回数をまとめれば良い。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="s s-Atom"&gt;cat&lt;/span&gt; &lt;span class="s s-Atom"&gt;access&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="s s-Atom"&gt;log&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="s s-Atom"&gt;grep&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="s s-Atom"&gt;v&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="s s-Atom"&gt;i&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;bot&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="s s-Atom"&gt;grep&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;referer:-&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="s s-Atom"&gt;grep&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;status:200&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="s s-Atom"&gt;awk&lt;/span&gt; &lt;span class="s s-Atom"&gt;&amp;#39;{print $3}&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="s s-Atom"&gt;sort&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="s s-Atom"&gt;uniq&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="s s-Atom"&gt;c&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"&gt;&lt;/script&gt;
&lt;!-- Google Adsense below content --&gt;
&lt;ins class="adsbygoogle" style="display:inline-block;width:336px;height:280px" data-ad-client="ca-pub-3165642025902490" data-ad-slot="1749996500"&gt;&lt;/ins&gt;
&lt;script&gt;
    (adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;!-- end Google Adsense --&gt;
↲&lt;/p&gt;
&lt;p&gt;軽くbot避けを入れてるけど、crawlerとかspiderとかを避けておくとより正確になるかも。
これだけだと一杯出てくるので100回以上アクセスあったIPだけ取り出してみた。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="s s-Atom"&gt;cat&lt;/span&gt; &lt;span class="s s-Atom"&gt;access&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="s s-Atom"&gt;log&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="s s-Atom"&gt;grep&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="s s-Atom"&gt;v&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="s s-Atom"&gt;i&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;bot&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="s s-Atom"&gt;grep&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;referer:-&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="s s-Atom"&gt;grep&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;status:200&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="s s-Atom"&gt;awk&lt;/span&gt; &lt;span class="s s-Atom"&gt;&amp;#39;{print $3}&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="s s-Atom"&gt;sort&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="s s-Atom"&gt;uniq&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="s s-Atom"&gt;c&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="s s-Atom"&gt;grep&lt;/span&gt; &lt;span class="err"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="s s-Atom"&gt;\&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s s-Atom"&gt;\&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s s-Atom"&gt;\s&lt;/span&gt;&lt;span class="err"&gt;&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;ただ、最初の目的には最初の集計の方が役に立った。結局Bingのボットだったみたい。Analyticsではじけなかったアクセスがあったのかな。&lt;/p&gt;
&lt;h2&gt;大きなファイルを探す&lt;/h2&gt;
&lt;p&gt;例：100MB以上のファイルを探す&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ find path -size 100M
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Windows共有フォルダをマウント&lt;/h2&gt;
&lt;p&gt;参考：&lt;a href="http://qiita.com/mdstoy/items/54925cdcbca6d558b666"&gt;Ubuntu から Windows の共有フォルダをマウントして利用する - Qiita&lt;/a&gt;というかほぼそのまま&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ sudo aptitude install cifs-utils
$ sudo mkdir -p /mnt/windows
$ sudo mount -t cifs -o &lt;span class="nv"&gt;username&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;WindowsUsername,password&lt;span class="o"&gt;=&lt;/span&gt;WindowsPassword //ServerNameOrIp/path/to/share /mnt/windows
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;ファイルのフルパス一覧を取得&lt;/h2&gt;
&lt;p&gt;参考：&lt;a href="http://linux.just4fun.biz/%E9%80%86%E5%BC%95%E3%81%8DUNIX%E3%82%B3%E3%83%9E%E3%83%B3%E3%83%89/%E3%83%95%E3%82%A1%E3%82%A4%E3%83%AB%E3%81%AE%E3%83%95%E3%83%AB%E3%83%91%E3%82%B9%E5%90%8D%E3%82%92%E5%8F%96%E5%BE%97%E3%81%99%E3%82%8B%E6%96%B9%E6%B3%95.html"&gt;逆引きUNIXコマンド/ファイルのフルパス名を取得する方法 - Linuxと過ごす&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;単純なlsだとファイル名だけが一覧になるので、フルパスの一覧が欲しい場合は一工夫必要&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ ls -dF /path/to/dir/*
$ find &lt;span class="sb"&gt;`&lt;/span&gt;&lt;span class="nb"&gt;pwd&lt;/span&gt;&lt;span class="sb"&gt;`&lt;/span&gt; -maxdepth &lt;span class="m"&gt;1&lt;/span&gt; -mindepth 1
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;SSHを使ってリモートでコマンド実行する&lt;/h2&gt;
&lt;p&gt;単純なコマンド実行&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ ssh username@hostname options... &lt;span class="s2"&gt;&amp;quot;command&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;ローカルのファイルをリダイレクトしてリモートコマンドに使用する。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ ssh username@hostname options... &lt;span class="s2"&gt;&amp;quot;command&amp;quot;&lt;/span&gt; &amp;lt; localfile
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;重複行を削除する&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ cat hoge &lt;span class="p"&gt;|&lt;/span&gt; sort &lt;span class="p"&gt;|&lt;/span&gt; uniq
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;参考：&lt;a href="http://codenote.net/linux/1300.html"&gt;[Linux] sort と uniq をパイプでつないで重複行を削除する | CodeNote.net&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;文字列置換(sed)関連&lt;/h2&gt;
&lt;h3&gt;一番最初にマッチしたものを置換&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ sed 1,/pattern/s/pattern/replace/
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;1は1行目からの意味。10行目から始めたければ10に変えるとか、数字はパターンにしても良い&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ sed /pattern from/,/pattern/s/pattern/replace/
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;一行目に文字列を追加する&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ sed -i hoge -e &lt;span class="s2"&gt;&amp;quot;1i fuga&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;参考:
&lt;a href="http://d.hatena.ne.jp/n9d/20081110/1226284188"&gt;sedにて一番最初にマッチしたモノだけを置換するには - 計算機と戯れる日々&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;ファイルを上書き保存&lt;/h3&gt;
&lt;p&gt;オプション -iを使う。一括でファイル上書きならこんな感じ&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ find . -name &lt;span class="s2"&gt;&amp;quot;*.html&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; xargs sed -i -e s/hoge/fuga/
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;参考:
&lt;a href="http://www.dab.hi-ho.ne.jp/sasa/biboroku/unix/sed-i.html"&gt;sedでファイルを上書き保存&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;grepで該当行前後を表示する&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ cat hoge.txt &lt;span class="p"&gt;|&lt;/span&gt; grep &lt;span class="s2"&gt;&amp;quot;fuga&amp;quot;&lt;/span&gt; -3 &lt;span class="c1"&gt;#前後3行&lt;/span&gt;
$ cat hoge.txt &lt;span class="p"&gt;|&lt;/span&gt; grep &lt;span class="s2"&gt;&amp;quot;fuga&amp;quot;&lt;/span&gt; -B &lt;span class="m"&gt;3&lt;/span&gt; &lt;span class="c1"&gt;#前3行&lt;/span&gt;
$ cat hoge.txt &lt;span class="p"&gt;|&lt;/span&gt; grep &lt;span class="s2"&gt;&amp;quot;fuga&amp;quot;&lt;/span&gt; -A &lt;span class="m"&gt;3&lt;/span&gt; &lt;span class="c1"&gt;#後3行&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;sshでポートフォワーディング&lt;/h3&gt;
&lt;p&gt;例えばPostgreSQLのポート5432をローカルの6542にポートフォワードする場合は&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ ssh -N -f -L 6543:localhost:5432 username@hostname
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;時刻調整&lt;/h2&gt;
&lt;p&gt;ntpをインストールする必要はない。Ubuntuの場合、ntpdate-debianコマンドがあればいける。ntpdateコマンドだとエラーが出た。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ sudo ntpdate
no servers can be used, exiting
$ sudo ntpdate-debian
step &lt;span class="nb"&gt;time&lt;/span&gt; server xxx.xxx.xxx.xxx offset -914.392749 sec
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;参考：&lt;a href="http://ubuntuforums.org/showthread.php?t=2193509"&gt;[SOLVED] ntpdate - No Servers&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;ntpサーバを指定するには/etc/default/ntpdateを変更する&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;NTP_USE_NTP_CONF=no
NTPSERVERS=&amp;quot;ntp.nict.jp&amp;quot;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;毎日のcronjobで動作させる&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo &lt;span class="nb"&gt;cd&lt;/span&gt; /etc/cron.daily
sudo ln -s /etc/network/if-up.d/ntpdate ./ntpdate
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;でおk
参考：&lt;a href="http://d.hatena.ne.jp/kobapan/20090909/1252472963"&gt;Ubuntu ntpdate 時刻合わせ - ガットポンポコ&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;windows共有フォルダをマウント&lt;/h2&gt;
&lt;p&gt;コマンドはこんな感じ&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ sudo aptitude install cifs-utils
$ sudo mount -t cifs -o &lt;span class="nv"&gt;username&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;Windowsユーザー名,password&lt;span class="o"&gt;=&lt;/span&gt;Windowsパスワード,uid&lt;span class="o"&gt;=&lt;/span&gt;Linuxユーザーid,gid&lt;span class="o"&gt;=&lt;/span&gt;Linuxグループid //windows ip/path/to/share /mnt/path/to/share
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;こうしておくとファイルの編集も可能。uidとかgidが無いとrootで共有する。&lt;/p&gt;
&lt;p&gt;linux(ubuntu)起動時に共有したい場合、fstabを編集する&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;//windows ip/path/to/share  /mnt/path/to/share  cifs  credentials=/home/username/.windowscredentials,uid=Linuxユーザーid,gid=Linuxグループid,iocharset=utf8  0  0
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;上のコマンドみたいにWindowsユーザー名、パスワードを入力してもいけるが、fstabは複数人から見ることが出来るので、ユーザーフォルダ内に認証用のファイルを作ってパスワードを隠す&lt;/p&gt;
&lt;p&gt;/home/username/.windowscredentialsを次のようにして600で保存すればおk&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;username=Windowsユーザー名
password=Windowsパスワード
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;参考：&lt;a href="https://wiki.ubuntu.com/MountWindowsSharesPermanently"&gt;MountWindowsSharesPermanently - Ubuntu Wiki&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;LANで利用されているIPアドレスを調べる&lt;/h2&gt;
&lt;p&gt;arp-scanコマンドを使う。
まずはインストール&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ sudo aptitude install arp-scan
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;使い方&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ sudo arp-scan -I eth0 -l
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;eth0はスキャンしたいネットワークアダプタ&lt;/p&gt;
&lt;h2&gt;csvからカラム切り出し&lt;/h2&gt;
&lt;p&gt;例としてhoge.csvの2カラム目を取り出す&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ cut -f &lt;span class="m"&gt;2&lt;/span&gt; hoge.csv
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;この場合タブ区切り、カンマ区切りしたい場合は&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ cut -d , -f &lt;span class="m"&gt;2&lt;/span&gt; hoge.csv
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;参考：&lt;a href="http://linux.just4fun.biz/?%E9%80%86%E5%BC%95%E3%81%8DUNIX%E3%82%B3%E3%83%9E%E3%83%B3%E3%83%89%2F%E6%8C%87%E5%AE%9A%E3%81%97%E3%81%9F%E3%83%95%E3%82%A3%E3%83%BC%E3%83%AB%E3%83%89%E3%82%92%E6%8A%9C%E3%81%8D%E5%87%BA%E3%81%99#q05e8b64"&gt;逆引きUNIXコマンド/指定したフィールドを抜き出す - Linuxと過ごす&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;csvのソート&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ sort --field-separator&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;,&amp;#39;&lt;/span&gt; --key&lt;span class="o"&gt;=&lt;/span&gt;2
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;こうやるとカンマ区切りのデータの2番目のカラムでソートしてくれる&lt;/p&gt;
&lt;p&gt;数値でソートしたい場合は-nをオプションに加える&lt;/p&gt;
&lt;p&gt;逆順の場合は--reverseをオプションに加える&lt;/p&gt;
&lt;p&gt;参考：&lt;a href="http://stackoverflow.com/questions/9471101/sort-csv-file-by-column-priority-using-the-sort-command"&gt;unix - Sort CSV file by column priority using the "sort" command - Stack Overflow&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;cronjobの一覧&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ crontab -l
$ sudo crontab -l -u username
$ ls /etc/cron.d
$ ls /etc/cron.hourly
$ ls /etc/cron.daily
$ ls /etc/cron.weekly
$ ls /etc/cron.monthly
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;これくらいチェックすればよさげ&lt;/p&gt;
&lt;h2&gt;iconvでエラーをスキップ&lt;/h2&gt;
&lt;p&gt;cオプションを付ければ良い&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ iconv -c -f SJIS -t UTF-8 hoge.txt
&lt;/pre&gt;&lt;/div&gt;</summary><category term="linux"></category><category term="memo"></category></entry><entry><title>vim memo</title><link href="http://blog.shigepon.info/blog/2014/03/01/vim-memo/" rel="alternate"></link><updated>2016-10-25T14:56:10+09:00</updated><author><name>shigepon</name></author><id>tag:blog.shigepon.info,2014-03-01:blog/2014/03/01/vim-memo/</id><summary type="html">&lt;h2&gt;vimでsnippet&lt;/h2&gt;
&lt;p&gt;色々方法があるみたいだけど、neocomplecacheを入れているので、それと相性が良さそうな（作者が同じ）プラグインを入れた&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;NeoBundle &amp;#39;Shougo/neosnippet&amp;#39;
NeoBundle &amp;#39;Shougo/neosnippet-snippets&amp;#39;

&amp;quot; Plugin key-mappings.
imap &amp;lt;C-k&amp;gt;     &amp;lt;Plug&amp;gt;(neosnippet_expand_or_jump)
smap &amp;lt;C-k&amp;gt;     &amp;lt;Plug&amp;gt;(neosnippet_expand_or_jump)
xmap &amp;lt;C-k&amp;gt;     &amp;lt;Plug&amp;gt;(neosnippet_expand_target)
&amp;quot; &amp;quot; SuperTab like snippets behavior.
imap &amp;lt;expr&amp;gt;&amp;lt;TAB&amp;gt; neosnippet#expandable_or_jumpable() ?
\ &amp;quot;\&amp;lt;Plug&amp;gt;(neosnippet_expand_or_jump)&amp;quot;
\: pumvisible() ? &amp;quot;\&amp;lt;C-n&amp;gt;&amp;quot; : &amp;quot;\&amp;lt;TAB&amp;gt;&amp;quot;
smap &amp;lt;expr&amp;gt;&amp;lt;TAB&amp;gt; neosnippet#expandable_or_jumpable() ?
\ &amp;quot;\&amp;lt;Plug&amp;gt;(neosnippet_expand_or_jump)&amp;quot;
\: &amp;quot;\&amp;lt;TAB&amp;gt;&amp;quot;
&amp;quot;
&amp;quot; &amp;quot; For snippet_complete marker.
if has(&amp;#39;conceal&amp;#39;)
  set conceallevel=2 concealcursor=i
endif
&lt;/pre&gt;&lt;/div&gt;


&lt;!-- more --&gt;

&lt;p&gt;を.vimrcに追記して、vimを再起動後、&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;:NeoBundleInstall
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;でインストール完了。もう一度vimを再起動して、phpファイルを空けて
おもむろにインサートモードで「for」とか打ったらちゃんとsnippetが表示された。&lt;C-n&gt;などで選択してからtab押したらちゃんと入力された。
いいね〜！！&lt;/p&gt;
&lt;p&gt;現在、デフォルトのsnippetとしてneosnippet-snippetsをインストールしないとデフォルトのsnippetを出してくれないことに注意。&lt;/p&gt;
&lt;h2&gt;巨大なファイルを開いて遅くなったりフリーズしない方法&lt;/h2&gt;
&lt;p&gt;&lt;a href="http://qiita.com/shoyan/items/529cf863a0d191be036e"&gt;Vimで巨大なファイルを開く方法 - Qiita&lt;/a&gt;をそのまま&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ vim -u NONE filename
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;でおk&lt;/p&gt;
&lt;h2&gt;clipboardを使う&lt;/h2&gt;
&lt;p&gt;クリップボードで普通にCtrl+vして大体涙目になってるのでメモ&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;:set paste
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;んで普通にペーストでおkみたい&lt;/p&gt;
&lt;p&gt;戻すには&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;:set nopaste
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;参考：&lt;a href="http://qiita.com/quwa/items/019250dbca167985fe32"&gt;vimでペーストするときインデントさせない - Qiita&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Diffした結果をカラー表示する&lt;/h2&gt;
&lt;p&gt;Diffした結果テキストに落とし、そのテキストからDiffの内容をカラー表示させたかったので調べてみた。&lt;/p&gt;
&lt;p&gt;Diffした結果をテキストにリダイレクトするとこんな感じの色コードが入る&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;^[[32m Added message^[[0m
^[[31m Deleted message^[[0m
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;a href="https://github.com/chrisbra/Colorizer"&gt;Colorizer&lt;/a&gt;というプラグインを使うと良さげだった。&lt;/p&gt;
&lt;p&gt;Colorizerプラグインを入れて、テキスト開いて&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;:ColorHighlight
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;のコマンドで色付けできた。&lt;/p&gt;
&lt;p&gt;参考：&lt;a href="http://stackoverflow.com/questions/18684419/vim-text-coloring"&gt;echo - Vim text coloring - Stack Overflow&lt;/a&gt;&lt;/p&gt;</summary><category term="vim"></category><category term="memo"></category></entry><entry><title>dbext.vimでpostgresqlにアクセスする</title><link href="http://blog.shigepon.info/blog/2014/02/28/vim-dbext-postgresql/" rel="alternate"></link><updated>2014-02-28T11:48:20+09:00</updated><author><name>shigepon</name></author><id>tag:blog.shigepon.info,2014-02-28:blog/2014/02/28/vim-dbext-postgresql/</id><summary type="html">&lt;p&gt;ググってみたけど無かったのでメモ。
単純に.vimrcに&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;let dbext_default_profile=&amp;quot;&amp;quot;
let dbext_default_type=&amp;quot;PGSQL&amp;quot;
let dbext_default_user=&amp;quot;username&amp;quot;
let dbext_default_passwd=&amp;quot;password&amp;quot;
let dbext_default_dbname=&amp;quot;dbname&amp;quot;
let dbext_default_host=&amp;quot;host&amp;quot;
let dbext_default_port=&amp;quot;port&amp;quot;
&lt;/pre&gt;&lt;/div&gt;


&lt;!-- more --&gt;

&lt;p&gt;と入力してvimを再起動して&lt;/p&gt;
&lt;!-- more --&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="k"&gt;Select&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="n"&gt;hoge&lt;/span&gt; &lt;span class="k"&gt;limit&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;と何かのテーブルから１行だけ出力してみようとしてみたけど&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;dbext&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;PostgreSQL&lt;/span&gt; &lt;span class="n"&gt;requires&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;$HOME/.pgpass&amp;#39;&lt;/span&gt; &lt;span class="n"&gt;file&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="n"&gt;order&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;authenticate&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="n"&gt;This&lt;/span&gt; &lt;span class="n"&gt;file&lt;/span&gt; &lt;span class="k"&gt;is&lt;/span&gt; &lt;span class="n"&gt;missing&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="n"&gt;If&lt;/span&gt; &lt;span class="n"&gt;you&lt;/span&gt; &lt;span class="n"&gt;are&lt;/span&gt; &lt;span class="n"&gt;using&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="n"&gt;local&lt;/span&gt; &lt;span class="n"&gt;connection&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;you&lt;/span&gt; &lt;span class="n"&gt;can&lt;/span&gt; &lt;span class="n"&gt;create&lt;/span&gt; &lt;span class="n"&gt;an&lt;/span&gt; &lt;span class="n"&gt;empty&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;pgpass&lt;/span&gt; &lt;span class="n"&gt;file&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;  &lt;span class="n"&gt;The&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;
&lt;span class="n"&gt;inary&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;psql&amp;#39;&lt;/span&gt; &lt;span class="n"&gt;does&lt;/span&gt; &lt;span class="n"&gt;not&lt;/span&gt; &lt;span class="n"&gt;accept&lt;/span&gt; &lt;span class="n"&gt;commandline&lt;/span&gt; &lt;span class="n"&gt;passwords&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;というエラーメッセージが！
どうもpsqlがコマンドラインでパスワードを受け付けないので、パスワード設定しても意味ないみたい。
なので、~/.pgpassに&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;host&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;port&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;dbname&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;username&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;password&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;を入力したらエラー無く動いた。良かった良かった。
ちなみに.vimrcに書いたパスワード設定を消すと、それはそれでパスワード聞かれるので残しておいた方がいい。&lt;/p&gt;</summary><category term="vim"></category><category term="PostgreSQL"></category></entry><entry><title>Ruby on Railsを入れてみた</title><link href="http://blog.shigepon.info/blog/2014/02/26/rails-startup/" rel="alternate"></link><updated>2014-02-26T14:51:16+09:00</updated><author><name>shigepon</name></author><id>tag:blog.shigepon.info,2014-02-26:blog/2014/02/26/rails-startup/</id><summary type="html">&lt;p&gt;rhaco使わないでWebサービス作るならもうPHP使わずに他の言語でやってみようかなと思い、
DjangoとRailsを迷ったあげく、ChefでRuby使うからRubyの勉強という意味を込めてRailsでやってみることにした。&lt;/p&gt;
&lt;p&gt;とりあえずまずはインストール出来ないと話にならないので、Railsをインストールしてみた話。&lt;/p&gt;
&lt;p&gt;Ubuntu使ってるので、aptitude install railsでさくっと終わるかなと思ってTwitterで何となく&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;shigepon: railsはバージョンいくつを使うと吉なんでしょ？&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;とつぶやいたら、@sugamasaoさんから&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;sugamasao: @shigepon しがらみがなければ、最新の4.0.2が良いと思います。お試しで触って見るなら、4.1のbeta版を使って見ても良いかもしれません〜&lt;/p&gt;
&lt;/blockquote&gt;
&lt;!-- more --&gt;

&lt;p&gt;という話が！そうなるとrubyも2系入れないとダメじゃん！と思いつつ&lt;/p&gt;
&lt;!-- more --&gt;

&lt;blockquote&gt;
&lt;p&gt;shigepon: @sugamasao ただ、うちのubuntuのrubyが1.8なので、まずは2.0にしないといけないっすね。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;とボヤいたら、やっぱり&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;sugamasao: @shigepon なるほど〜！1.8系はもうオワコンなので、2系を入れたほうが良いですねwちなみに、いまは2.1がリリースされてます！&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;とのお達しが。んじゃ2系入れるかとググりながらインストールしてみた。
参考にしたページは次のとおり&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://qiita.com/emadurandal/items/a60886152a4c99ce1017"&gt;Rails開発環境の構築（rbenvでRuby導入からBundler、Rails導入まで） - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/19031633/starting-the-rails-sqlite3-error"&gt;Starting the rails, sqlite3 Error - Stack Overflow&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://kiyotakagoto.hatenablog.com/entry/2013/05/28/235727"&gt;rails server 時に `autodetect': Could not find a JavaScript runtime が出たら。 - 人生ずっと勉強&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;手順&lt;/h3&gt;
&lt;p&gt;行ったり来たりしてるからこんな感じでスッと出来てないけど、だいたいこんな感じ&lt;/p&gt;
&lt;h4&gt;rbenvインストール&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;git clone git://github.com/sstephenson/rbenv.git ~/.rbenv
mkdir -p ~/.rbenv/plugins
git clone https://github.com/sstephenson/ruby-build.git ~/.rbenv/plugins/ruby-build
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;~/.profileに以下を追加&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nb"&gt;export&lt;/span&gt; &lt;span class="nv"&gt;PATH&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$HOME&lt;/span&gt;&lt;span class="s2"&gt;/.rbenv/bin:&lt;/span&gt;&lt;span class="nv"&gt;$PATH&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;
&lt;span class="nb"&gt;eval&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;rbenv init -&lt;span class="k"&gt;)&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;んで&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;source ~/.profile
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;opensslは入ってたから特に何もしなかったけど必要なら&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo aptitude install openssl
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;iconv, readlineは最初から入ってるんじゃないかな？
んでインストール&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo rbenv install -l
rbenv install 2.1.0
rbenv global 2.1.0
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;rbenvで何かやったら&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;rbenv rehash
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;を忘れずに&lt;/p&gt;
&lt;h3&gt;Bundlerインストール&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;rbenv exec gem install bundler
rbenv rehash
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Railsインストール&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;bundle init
vim Gemfile
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Gemfile内に&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gem &amp;quot;rails&amp;quot;, &amp;quot;4.0.2&amp;quot;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;を追加。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;bundle install --path vendor/bundle
bundle exec rails new hoge --skip-bundle
rm -f Gemfile
rm -f Gemfile.lock
rm -rf .bundle
rm -rf vendor/bundle
cd hoge
bundle install --path vendor/bundle
echo &amp;#39;/vendor/bundle&amp;#39; &amp;gt;&amp;gt; .gitignore
bundle exec rails server
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;で途中下のようにハマりながら起動を確認した。&lt;/p&gt;
&lt;h3&gt;はまったポイント&lt;/h3&gt;
&lt;p&gt;Ruby on Railsをインストールする時にプロジェクトのディレクトリで&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;bundle install -path vendor/bundle
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;すると、&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Gem::Installer::ExtensionBuildError: ERROR: Failed to build gem native extension.

        /usr/bin/ruby1.9.1 extconf.rb 
checking for sqlite3.h... no
sqlite3.h is missing. Try &amp;#39;port install sqlite3 +universal&amp;#39;
or &amp;#39;yum install sqlite-devel&amp;#39; and check your shared library search path (the
location where your sqlite3 shared library is located).
*** extconf.rb failed ***
Could not create Makefile due to some reason, probably lack of
necessary libraries and/or headers.  Check the mkmf.log file for more
details.  You may need configuration options.

Provided configuration options:
    --with-opt-dir
    --without-opt-dir
    --with-opt-include
    --without-opt-include=&lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="n"&gt;opt&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nb"&gt;dir&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt;/include
    --with-opt-lib
    --without-opt-lib=&lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="n"&gt;opt&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nb"&gt;dir&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt;/lib
    --with-make-prog
    --without-make-prog
    --srcdir=.
    --curdir
    --ruby=/usr/bin/ruby1.9.1
    --with-sqlite3-dir
    --without-sqlite3-dir
    --with-sqlite3-include
    --without-sqlite3-include=&lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="n"&gt;sqlite3&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nb"&gt;dir&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt;/include
    --with-sqlite3-lib
    --without-sqlite3-lib=&lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="n"&gt;sqlite3&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nb"&gt;dir&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt;/lib
    --enable-local
    --disable-local


Gem files will remain installed in /home/helio/.bundler/tmp/23089/gems/sqlite3-1.3.8 for inspection.
Results logged to /home/helio/.bundler/tmp/23089/gems/sqlite3-1.3.8/ext/sqlite3/gem_make.out

An error occurred while installing sqlite3 (1.3.8), and Bundler
cannot continue.
Make sure that `gem install sqlite3 -v &amp;#39;1.3.8&amp;#39;` succeeds before
bundling.
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;というエラーが出たのは&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo aptitude install sqlite3 libsqlite3-dev
bundle install --path vendor/bundle
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;で出なくなった。インストールパスの指定が無ければpathオプションは要らない。&lt;/p&gt;
&lt;p&gt;bundle exec rails serverで&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;autodetect&amp;#39;: Could not find a JavaScript runtime. See https://github.com/sstephenson/execjs for a list of available runtimes. (ExecJS::RuntimeUnavailable)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;というエラーが出て、サーバを起動出来なかった。これは
プロジェクトに入っているGemfileに書いてあるtherubyracerに関する行をコメントアウトして&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;bundle install --path vendor/bundle
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;とすれば起動出来るようになった。&lt;/p&gt;</summary><category term="ruby"></category><category term="Rails"></category></entry><entry><title>svn memo</title><link href="http://blog.shigepon.info/blog/2014/02/11/svn-memo/" rel="alternate"></link><updated>2014-02-11T11:53:32+09:00</updated><author><name>shigepon</name></author><id>tag:blog.shigepon.info,2014-02-11:blog/2014/02/11/svn-memo/</id><summary type="html">&lt;p&gt;svn使っててはまることが結構あるのでメモ&lt;/p&gt;
&lt;h2&gt;ubuntuでsvnコマンドすると認証失敗する場合&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Password &lt;span class="k"&gt;for&lt;/span&gt; ‘&lt;span class="o"&gt;(&lt;/span&gt;null&lt;span class="o"&gt;)&lt;/span&gt;’ GNOME keyring:
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;というメッセージが表示される場合、gnome-keyringというやつが邪魔をしているらしい。ログイン情報を削除すれば解決。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;rm ~/.gnome2/keyrings/login.keyring
&lt;/pre&gt;&lt;/div&gt;


&lt;!-- more --&gt;

&lt;p&gt;でいける。&lt;/p&gt;
&lt;h2&gt;コミットするファイルを、ファイルで指定する&lt;/h2&gt;
&lt;p&gt;fuga.htmlとhage.htmlを変更しててfuga.htmlだけコミットしたい場合&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;fuga.html
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;というファイル(hoge.txt)を作っておいて、&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ svn commit -m &lt;span class="s2"&gt;&amp;quot;コメント&amp;quot;&lt;/span&gt; --targets hoge.txt
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;でおk&lt;/p&gt;</summary><category term="linux"></category><category term="svn"></category><category term="memo"></category></entry><entry><title>sqlite memo</title><link href="http://blog.shigepon.info/blog/2014/02/11/sqlite-memo/" rel="alternate"></link><updated>2014-02-11T11:48:39+09:00</updated><author><name>shigepon</name></author><id>tag:blog.shigepon.info,2014-02-11:blog/2014/02/11/sqlite-memo/</id><summary type="html">&lt;p&gt;SQLiteでたまに使う操作をメモ&lt;/p&gt;
&lt;h2&gt;テーブルの存在チェック&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;SELECT&lt;/span&gt; &lt;span class="k"&gt;COUNT&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;FROM&lt;/span&gt; &lt;span class="n"&gt;sqlite_master&lt;/span&gt; &lt;span class="k"&gt;WHERE&lt;/span&gt; &lt;span class="k"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;table&amp;#39;&lt;/span&gt; &lt;span class="k"&gt;AND&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;テーブル名&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</summary><category term="sqlite"></category><category term="memo"></category></entry><entry><title>unity memo</title><link href="http://blog.shigepon.info/blog/2014/02/10/unity-memo/" rel="alternate"></link><updated>2014-02-10T23:25:11+09:00</updated><author><name>shigepon</name></author><id>tag:blog.shigepon.info,2014-02-10:blog/2014/02/10/unity-memo/</id><summary type="html">&lt;p&gt;unity使ってこれから何か作っていこうと思うのでめも。&lt;/p&gt;
&lt;h3&gt;最初にやったこと&lt;/h3&gt;
&lt;p&gt;&lt;a href="http://uinyan.com/unity_7days_kusoge_challenge/"&gt;【Unity】素人が7日間クソゲーを作り続けてわかったこと – uinyan. com&lt;/a&gt;に載っていた&lt;a href="http://japan.unity3d.com/developer/document/tutorial/my-first-unity/01.html"&gt;UNITY - Developer - はじめての Unity - 第1回 世界の「骨格」をつくろう&lt;/a&gt;に沿ってブロックとボールを作ってみた。&lt;br /&gt;
実際にどう操作するかは&lt;a href="https://www.google.com/url?q=http://dotinstall.com/&amp;amp;usd=2&amp;amp;usg=AFQjCNHZtbpqtTDbVeGhAQfx3_H-UUYI1Q"&gt;ドットインストールのUnity講座&lt;/a&gt;を参考にした。&lt;/p&gt;
&lt;h3&gt;物をバウンドさせる&lt;/h3&gt;
&lt;p&gt;physicalMaterialでBouncinessに数値を入れる。1とか。1でバウンド時の力のロスが無い。&lt;/p&gt;
&lt;h3&gt;効果音を鳴らす&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.senses-circuit.com/material/se_game.html"&gt;フリー効果音素材HP&lt;/a&gt;などから音源をダウンロード&lt;/li&gt;
&lt;li&gt;Assetに音源をドラッグアンドドロップして追加&lt;/li&gt;
&lt;li&gt;追加したいオブジェクトでAddComponentボタンからComponent&amp;gt;Audio&amp;gt;Audio Sourceを選択&lt;/li&gt;
&lt;li&gt;Audio ClipにAssetに入れた音源を入れる。&lt;/li&gt;
&lt;li&gt;Audio Sourceコンポーネント内で3D Sound Setting&amp;gt;Min Distanceを10くらいに設定 &lt;/li&gt;
&lt;/ul&gt;
&lt;!-- more --&gt;

&lt;p&gt;オブジェクトに設定したコードでは次のように書く。例としてスペースを押したら効果音が出るようにしてみた。&lt;br /&gt;
コードの設定部分でこの例の場合clipに音源を入れる（でないと聞こえなかったような）&lt;/p&gt;
&lt;p&gt;```c#
public AudioClip clip;
public function Update() {
    if (Input.GetButton("Jump")) {
        audio.PlayOneShot(clip); 
    }
}&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;### BGMをかける
Assetに追加したBGMをHiearchyに追加して、InspectorのLoopをチェックしたらOK

### 位置移動
transform.positionにVectorオブジェクトを代入すればOK  
transform.position.xに直接値を入れるとC#では怒られた。

### トリガで衝突判定
Collider2Dでis Triggerにチェックを入れるとTriggerを用いて衝突判定できる。衝突しないケースと衝突するケースを使い分けられるので便利。
イベントとして2Dの場合は、

+ OnTriggerEnter2D
+ OnTriggerStay2D
+ OntriggerExit2D

が使える。2Dで物理エンジン使わない時とか使える。なんか使える条件があるような情報があった。

### 時間待ちの作法
コルーチンを使うらしい。

```c#
public function Update(){
...
  StartCoroutine(&amp;quot;GameOver&amp;quot;);
}
private IENumerator GameOver(){
  yield return new WaitForSeconds(2);
  Application.LoadLevel(&amp;quot;GameOver&amp;quot;);
}
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;こんな感じ。時間待ちとは言え、動きが止まったりするわけじゃない。&lt;/p&gt;
&lt;h3&gt;座標変換&lt;/h3&gt;
&lt;p&gt;タップやクリックの座標とUnity内での座標の場合は座標変換が必要。カメラのScreenToWorldPointメソッドを使うが2Dの場合直感的に行かなく、次のようにする&lt;/p&gt;
&lt;p&gt;&lt;code&gt;c#
Vector3 screenPosition = Camera.main.ScreenToWorldPoint(transform.position);
Vector2 clickPosition = Camera.main.ScreenToWorldPoint(new Vector3(Input.mousePosition.x,Input.mousePosition.y,screenPosition.z));&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;と2DなのにVector3（３次元座標）で指定する。&lt;/p&gt;
&lt;h3&gt;デバッグ&lt;/h3&gt;
&lt;p&gt;Unity Remoteを使う。Free Aspectだと上手く表示できないとか上手く行かないケースがあるので注意。かならずアスペクト比？を設定。&lt;/p&gt;
&lt;h3&gt;Androidへの実装&lt;/h3&gt;
&lt;p&gt;実機に実装する場合はBuild and Runをすれば良い。ただしXperia SO-01Bに実装すると初期の設定ではエラーがポコポコ出たので対処をメモしておく&lt;/p&gt;
&lt;h3&gt;iPhoneへの実装&lt;/h3&gt;
&lt;p&gt;iPhoneへの実装はios Developer Programへの登録など色々面倒で複数サイトを参考にした。
ios Developer Programへの登録などUnity関係なくやらないといけない作業は、&lt;a href="http://r-dimension.xsrv.jp/classes_j/ios_test/"&gt;iOSデバイス（iPhone・iPad）実機テスト | Yasushi Noguchi Class&lt;/a&gt;が参考になった&lt;br /&gt;
unity側での作業は&lt;a href="http://tech.gmo-media.jp/post/54095871491/running-unity-app-on-iphone"&gt;iPhone実機でUnityを動かしてみた - unity部 | GMOメディア エンジニアブログ&lt;/a&gt;を参考にすれば上手くいった。
バージョンが変わったりすると、また画面構成とか変わるんだろうけど。&lt;/p&gt;
&lt;p&gt;あとiPhone初心者だったせいで、マナーモードになっているのに気づかず、音が出ないと１時間くらい悩んでた。（これでハマる人は少ないと思うけど一応メモ）&lt;/p&gt;
&lt;h3&gt;iPhoneへのadhocビルドと配布&lt;/h3&gt;
&lt;p&gt;やること色々あるので、参考にしたサイトの一覧を紹介する程度。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://dev.classmethod.jp/smartphone/iphone/ios-app-how-to-release/#toc-xcode-"&gt;よく分かる！iOS アプリのリリース手順のまとめ ｜ Developers.IO&lt;/a&gt;←App Storeでの配布についてのページだけどこのページが一番参考になった。多分画面が最新のものに対応してるから。&lt;/li&gt;
&lt;li&gt;&lt;a href="http://plus.vc/iphone/4357/"&gt;iPhoneアプリのAd Hoc配信方法まとめ完全版 [Xcode4対応] | PLUS&lt;/a&gt; 上のページで分からないところはこのページを参考にした。Xcodeのビルド設定以降は参考になる。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;adhocで端末を追加したい場合に、またもハマった&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://d.hatena.ne.jp/mswar/20090303/1236087158"&gt;iPhone Developper Programingに 新しくデバイス追加する方法(２台目、３台目～) - mswar的電網日誌&lt;/a&gt; adhocじゃないけど、それ以外の部分は参考になった&lt;/li&gt;
&lt;li&gt;&lt;a href="http://plus.vc/iphone/7015/"&gt;Adhocでデバイスを追加したものの、インストールできない場合のチェック方法 | PLUS&lt;/a&gt;これはチェックしておかないといけない感じ&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;EGL_BAD_MATCH&lt;/h4&gt;
&lt;p&gt;まずは&lt;strong&gt;EGL_BAD_MATCH&lt;/strong&gt;というエラーが出た。ググっでも答えが出ないので、ddmsを使ってログを取ってみると、どうも32bit Display Bufferとか24bit Display Bufferの処理をした後にエラーが出てたので、Player Setting &amp;gt; Android &amp;gt; Resolution and Presentationにある32bit Dispay Bufferと24bit Display Bufferのチェックをはずした。するとEGL_BAD_MATCHは消えた。&lt;/p&gt;
&lt;h4&gt;Profiler is only supported in Unity Pro&lt;/h4&gt;
&lt;p&gt;次にProfilerも使ってないのに&lt;br /&gt;
&lt;strong&gt;Profiler is only supported in Unity Pro&lt;/strong&gt;&lt;br /&gt;
というメッセージが出た。結局分からなかった。私が実装した時の問題点は画像が表示されないことだったのでこれは関係ないだろうと考えて無視。&lt;/p&gt;
&lt;h4&gt;結局画面が表示されない&lt;/h4&gt;
&lt;p&gt;Build Setting画面のTexture CompressionをDon't overrideからETC1 or RGB16に変更すると動いた！
なんかどっかにこの話があったんだけど、どこか忘れたのでまた思い出したらリンクする。&lt;/p&gt;
&lt;h3&gt;その他&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;位置のScaleを-1にして反転するとアニメーションもそのまま反転した。すごい。&lt;/li&gt;
&lt;li&gt;StartよりAwakeが先に呼び出される。初期化に使える。&lt;/li&gt;
&lt;li&gt;MonoDevelop-UnityをMacにインストールしてて、C#の通常アプリが作れると思ったら大間違い。C#のアプリ作ろうと思ったらXamarin Studio入れた方がよさげ。NUnitが無いって怒られて散々だった。&lt;/li&gt;
&lt;/ul&gt;</summary><category term="unity"></category><category term="memo"></category></entry><entry><title>Basic認証する時に気をつけること</title><link href="http://blog.shigepon.info/blog/2014/02/03/basic-auth/" rel="alternate"></link><updated>2014-02-03T07:48:33+09:00</updated><author><name>shigepon</name></author><id>tag:blog.shigepon.info,2014-02-03:blog/2014/02/03/basic-auth/</id><summary type="html">&lt;p&gt;rhaco3で作ったWebサービス全体にBasic認証をかけた時にちょっとハマったのでメモ。&lt;/p&gt;
&lt;h2&gt;症状&lt;/h2&gt;
&lt;p&gt;rhaco3の認証が入っているサービスで全体にBasic認証をかけると、&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;トップページに入る時にBasic認証がかかる&lt;/li&gt;
&lt;li&gt;認証完了&lt;/li&gt;
&lt;li&gt;ログインページに移動&lt;/li&gt;
&lt;li&gt;またBasic認証がかかる&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;というケースが見られました。Webサーバにはnginxを使いました。&lt;/p&gt;
&lt;!-- more --&gt;

&lt;h2&gt;原因&lt;/h2&gt;
&lt;p&gt;nginx側の設定が悪いのかなとか色々試行錯誤しましたが、結論としてrhaco3の認証部分が401のレスポンスを吐いてたのが問題でした。&lt;/p&gt;
&lt;!-- more --&gt;

&lt;p&gt;&lt;a href="http://www.slogical.co.jp/tech/http_basicauth.html"&gt;Basic認証の動作&lt;/a&gt;というページで詳しく書かれています（以下に引用します）が&lt;/p&gt;
&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;ユーザーがクライアント（IE等のWebブラウザ）に目的のURLを入力する。&lt;/li&gt;
&lt;li&gt;クライアントが、Authorization: ヘッダを付加しないで、
目的のコンテンツにアクセスする。&lt;/li&gt;
&lt;li&gt;サーバーは、401 Authorization Required のレスポンスを返して、
クライアントに認証が必要である旨を伝える。&lt;/li&gt;
&lt;li&gt;クライアントがユーザーに ID/PW の入力を求める
（IE等のブラウザが、ポップアップウインドウを出して、
　ID/PW の入力をユーザーに求めるアレです。）&lt;/li&gt;
&lt;li&gt;ユーザーが ID/PW を入力する。&lt;/li&gt;
&lt;li&gt;クライアントが、Authorization: ヘッダに ID/PW の情報を付加
して目的のコンテンツに再度アクセスする。&lt;/li&gt;
&lt;li&gt;サーバが ID/PW を解析して、認証OKであればコンテンツをクライ
アントに返す。&lt;/li&gt;
&lt;li&gt;クライアントがコンテンツを表示して、ユーザーがそれを閲覧する。
&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;        +------+  1---&amp;gt;  +--------+  2---&amp;gt;  +-------+
        |      |  &amp;lt;---4  |        |  &amp;lt;---3  |       |
        | User |         | Client |         | httpd |
        |      |  5---&amp;gt;  |        |  6---&amp;gt;  |       |
        +------+  &amp;lt;---8  +--------+  &amp;lt;---7  +-------+
&lt;/pre&gt;&lt;/div&gt;


&lt;blockquote&gt;
&lt;p&gt;（コンテンツデータを１つ取得するために、リクエスト・レスポンスの
　やりとりが２回行われています。）&lt;/p&gt;
&lt;p&gt;なお、
Authorization: ヘッダには、
Basic認証の ID と PW とを :（半角のコロン）でつなげた文字列を、
base64した値が格納さています。
（例えば、
　Authorization: Basic dXNlcjAxOnBhc3N3b3JkCg==　といったようになります。）&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;ように、Basic認証ではサーバが401のレスポンスを返すことで、ブラウザ側にポップアップを出させているようです。その為rhaco3の認証部分で401のレスポンスを出した時に認証の情報がリセットされてしまったのではないかと思われます。&lt;/p&gt;
&lt;h2&gt;対処&lt;/h2&gt;
&lt;p&gt;rhaco3の認証部分(\org\rhaco\flow\parts\RequestFlow::do_login)で401を送信していた部分で200を送信することで対処できました。&lt;/p&gt;
&lt;p&gt;rhaco3で見られた症状でしたが、他のフレームワークでも特に何も考えてなかったら引っかかる可能性があります。というかBasic認証とフレームワークの認証両方掛けるとか普通無いですよねそうですよね。&lt;/p&gt;</summary><category term="rhaco"></category><category term="nginx"></category></entry><entry><title>octpress tips</title><link href="http://blog.shigepon.info/blog/2014/01/31/octpress-tips/" rel="alternate"></link><updated>2014-01-31T08:33:56+09:00</updated><author><name>shigepon</name></author><id>tag:blog.shigepon.info,2014-01-31:blog/2014/01/31/octpress-tips/</id><summary type="html">&lt;p&gt;Octopressのインストール後に行ったカスタマイズをまとめておきます。&lt;/p&gt;
&lt;h2&gt;外部リンクを別ウィンドウで開く&lt;/h2&gt;
&lt;p&gt;下のコードを追加します&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="nx"&gt;source&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nx"&gt;_inclides&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nx"&gt;custom&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nx"&gt;head&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;html&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;script&lt;/span&gt; &lt;span class="nx"&gt;language&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;JavaScript&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;ready&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;a[href^=&amp;#39;http&amp;#39;]:not([href*=&amp;#39;&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;location&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;hostname&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&amp;#39;])&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;attr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;target&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;_blank&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="err"&gt;/script&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;!-- more --&gt;

&lt;p&gt;のようにJavascriptで対応します&lt;/p&gt;
&lt;h2&gt;一覧表示での表示範囲を決めるマークダウン&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;lt;!-- more --&amp;gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;これを書けばおk&lt;/p&gt;</summary><category term="memo"></category><category term="Octopress"></category></entry><entry><title>なでしこで実行ファイルを作る時のメモ</title><link href="http://blog.shigepon.info/blog/2014/01/30/nadesiko-make-exe/" rel="alternate"></link><updated>2014-01-30T09:22:46+09:00</updated><author><name>shigepon</name></author><id>tag:blog.shigepon.info,2014-01-30:blog/2014/01/30/nadesiko-make-exe/</id><summary type="html">&lt;ul&gt;
&lt;li&gt;パックファイル作る時はメインになるファイルだけnadesiko.nakoというパック名にして、その他はファイル名自身をパック名とする&lt;/li&gt;
&lt;li&gt;データを埋め込む場合は、そのデータを呼び出す時にフルパスにしない。データが無いと言われる。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;何となくマニュアル見ても分かりにくかったのでメモ&lt;/p&gt;
&lt;p&gt;ついでにリンク&lt;/p&gt;
&lt;p&gt;&lt;a href="http://nadesi.com"&gt;なでしこ&lt;/a&gt;&lt;/p&gt;</summary><category term="nadesiko"></category></entry><entry><title>なでしこ2のプラグインを作る方法</title><link href="http://blog.shigepon.info/blog/2014/01/29/nadesiko2-make-plugin/" rel="alternate"></link><updated>2014-01-29T09:49:17+09:00</updated><author><name>shigepon</name></author><id>tag:blog.shigepon.info,2014-01-29:blog/2014/01/29/nadesiko2-make-plugin/</id><summary type="html">&lt;p&gt;2015-12-01：情報が古くなったので古い部分を修正しました。&lt;/p&gt;
&lt;p&gt;なでしこ2でプラグインを作りたい人向けというニッチすぎるネタです。現在なでしこの時期バージョンなでしこ2が開発中です(えらい長いこと開発中です)が、構文の実装がある程度終わっているので、プラグインを開発することが出来ます。try catchの実装どうするかなーとか考えて進んでないですが、それはそれ。&lt;/p&gt;
&lt;p&gt;なでしこ2はC#で組まれているので、プラグインもC#で組むことができます。&lt;/p&gt;
&lt;h2&gt;準備&lt;/h2&gt;
&lt;p&gt;~~まずは準備として、なでしこ2のソースをsvnでチェックアウトします。 &lt;a href="http://code.google.com/p/nadesiko2/source/checkout"&gt;URL&lt;/a&gt;~~&lt;/p&gt;
&lt;p&gt;まずは準備として、なでしこ2のソースをGithubからクローンします。 ~~&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ git clone https://github.com/kujirahand/nadesiko2.git
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;~~SharpDevelopで開発中なので、SharpDevelopでソリューションを開きます。~~XamarinやVisualStudioで開発出来るので、そこらへんでソリューションを開きます。&lt;/p&gt;
&lt;p&gt;cnakoをビルドする必要があるので、Nako2_CNakoソリューション(Nako2_CNako.sln)を開いて、cnako2プロジェクトをビルドしておきます。cnako2/bin/Debugフォルダにcnako2.exeが出来ます。これをなでしこ2のコード実行に使います。&lt;/p&gt;
&lt;h2&gt;プラグイン作成&lt;/h2&gt;
&lt;p&gt;プラグイン作成には今まで作成したプラグインがNakoPluginXXXというプロジェクト名であるので、それを参考にすれば良いわけですが、軽く説明しておきます。&lt;/p&gt;
&lt;p&gt;プラグインのソースは下のようになります。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cm"&gt;/*&lt;/span&gt;
&lt;span class="cm"&gt; * Created by SharpDevelop.&lt;/span&gt;
&lt;span class="cm"&gt; * User: shigepon&lt;/span&gt;
&lt;span class="cm"&gt; * Date: 2011/04/04&lt;/span&gt;
&lt;span class="cm"&gt; * Time: 9:42&lt;/span&gt;
&lt;span class="cm"&gt; *&lt;/span&gt;
&lt;span class="cm"&gt; * To change this template use Tools | Options | Coding | Edit Standard Headers.&lt;/span&gt;
&lt;span class="cm"&gt; */&lt;/span&gt;
&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="nn"&gt;System&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="nn"&gt;System.Collections.Generic&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="nn"&gt;System.Text&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="nn"&gt;Libnako.JPNCompiler&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="nn"&gt;NakoPlugin&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;namespace&lt;/span&gt; &lt;span class="nn"&gt;NakoPluginSample&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;NakoPluginSample&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;INakoPlugin&lt;/span&gt;    &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;_description&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="p"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;quot&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="err"&gt;サンプルプラグイン&lt;/span&gt;&lt;span class="p"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;quot&lt;/span&gt;&lt;span class="p"&gt;;;&lt;/span&gt;
        &lt;span class="kt"&gt;double&lt;/span&gt; &lt;span class="n"&gt;_version&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="m"&gt;1.0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="c1"&gt;//&amp;lt;del&amp;gt; プラグイン共通の部分 &amp;lt;/del&amp;gt;&lt;/span&gt;
        &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;double&lt;/span&gt; &lt;span class="n"&gt;TargetNakoVersion&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;get&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="m"&gt;2.0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;bool&lt;/span&gt; &lt;span class="n"&gt;Used&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;get&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;set&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;Name&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;get&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;GetType&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="n"&gt;FullName&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;double&lt;/span&gt; &lt;span class="n"&gt;PluginVersion&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;get&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;_version&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;Description&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;get&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;_description&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="c1"&gt;//&amp;lt;del&amp;gt; 関数の定義 &amp;lt;/del&amp;gt;&lt;/span&gt;
        &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;DefineFunction&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;INakoPluginBank&lt;/span&gt; &lt;span class="n"&gt;bank&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;bank&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;AddFunc&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="err"&gt;関数名&lt;/span&gt;&lt;span class="p"&gt;}&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;cedil&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="err"&gt;なでしこ形式の引数&lt;/span&gt;&lt;span class="p"&gt;}&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;cedil&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="err"&gt;戻り値の形式&lt;/span&gt;&lt;span class="p"&gt;}&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;cedil&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="err"&gt;実際の呼び出し先&lt;/span&gt;&lt;span class="p"&gt;}&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;cedil&lt;/span&gt;&lt;span class="p"&gt;;{&lt;/span&gt;&lt;span class="err"&gt;関数の説明&lt;/span&gt;&lt;span class="p"&gt;}&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;cedil&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="err"&gt;関数のよみかた&lt;/span&gt;&lt;span class="p"&gt;});&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="c1"&gt;// プラグインの初期化処理&lt;/span&gt;
        &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;PluginInit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;INakoInterpreter&lt;/span&gt; &lt;span class="n"&gt;runner&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;        &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="c1"&gt;// プラグインの終了処理&lt;/span&gt;
        &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;PluginFin&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;INakoInterpreter&lt;/span&gt; &lt;span class="n"&gt;runner&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;        &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
       &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="n"&gt;Object&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="err"&gt;実際の処理&lt;/span&gt;&lt;span class="p"&gt;}(&lt;/span&gt;&lt;span class="n"&gt;INakoFuncCallInfo&lt;/span&gt; &lt;span class="n"&gt;info&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
            &lt;span class="p"&gt;...&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;!-- more --&gt;

&lt;p&gt;実装時に大事なとこを説明します。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;まずプラグイン共通部分とPluginInit、PluginFinはコピペでもかまわないと思います。私もまだ初期処理、終了処理の必要なプラグインは作っていません。&lt;/li&gt;
&lt;li&gt;なでしこ上での関数呼び出し方法の定義はDefineFunctionで行います。bank.AddFuncメソッドで関数を追加できます。メソッド内の引数は下のように設定します。
++ 関数名はなでしこで呼び出す名前になります。（例：文字検索）なでしこで使う助詞を使わないとか、他の命令の名称とかぶらないなどの制限があります。
++ なでしこ形式の引数は「SでAを」のようになでしこで一般的に使う形式で指定します。引数を参照渡しにしたい場合は「{参照渡し}SでAを」のように指定します。助詞を複数指定したい場合は「SでAを|Sが」という形式で指定します。参照渡しを使う場合は実装が少々複雑になります。後日やり方を書こうと思います。
++ 戻り値の形式はenum NakoVarTypeで指定します。(Void&amp;cedil; Int&amp;cedil; Double&amp;cedil; String&amp;cedil; Array)
++ 実際の呼び出し先はそのままメソッド名を指定します。(_hogeとか)
++ 関数の説明と関数のよみかたは分かりやすさの為に必要です。個人用なら適当でも良いと思います。（多分今後エディタとかそういうのにつかわれると思います）&lt;/li&gt;
&lt;li&gt;実際の処理は必ずINakoFuncCallInfo型のインスタンスを引数に取ります。なでしこで渡された引数はこのインスタンスから取得します。取得方法は以下&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kt"&gt;long&lt;/span&gt; &lt;span class="n"&gt;l&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;info&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;StackPopAsInt&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="kt"&gt;double&lt;/span&gt; &lt;span class="n"&gt;d&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;info&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;StackPopAsDouble&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;info&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;StackPopAsString&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="n"&gt;Object&lt;/span&gt; &lt;span class="n"&gt;o&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;info&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;StackPop&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;&lt;span class="c1"&gt;//配列の場合はこれを使う&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;~~StackPopメソッドで得られる値はNakoVariable型なので、ちょっと扱いが難しくなります。実際の処理の実装方法はまた今度~~&lt;/p&gt;
&lt;h2&gt;簡単なプラグイン&lt;/h2&gt;
&lt;p&gt;例として「なでしこ」という文字があったら、「なでしこ2最高！」と変換するだけの命令として「アピール」という命令を作ってみます。仕様は次のようにしてみます。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;引数は文字列として助詞は「を」を使う&lt;/li&gt;
&lt;li&gt;引数は１つ&lt;/li&gt;
&lt;li&gt;プラグイン名はNakoPluginAppealとする&lt;/li&gt;
&lt;li&gt;実装用のメソッドは_appealとする&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Xamarinでの作成手順は次のようになります（多分VisualStudioでも似たようなもん）&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Nako2_Pluginsソリューション(Nako2_Plugins.slnを開く)で新しいプロジェクトとしてNakoPluginAppealという名前のC#のライブラリを作ります。（ソリューションで歯車アイコンクリック（又は右クリック））→追加→新しいプロジェクトを追加→ダイアログでC#をクリック→ライブラリを選択→名前をNakoPluginAppealとする→OK）&lt;/li&gt;
&lt;li&gt;参照にNakoPluginを追加する（NakoPluginAppealの参照で歯車アイコンクリック（又は右クリック）→参照アセンブリの編集→ダイアログで.NETアセンブリタブを選択→NakoPlugin.dllをチェック、又は閲覧ボタンからNakoPlugin.dllを選ぶ→OK）&lt;/li&gt;
&lt;li&gt;NakoPluginAppeal.csを編集する&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="n"&gt;NakoPluginAppeal&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cs&lt;/span&gt;
&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="nn"&gt;System&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="nn"&gt;System.Text&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="nn"&gt;Libnako.JPNCompiler&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="nn"&gt;NakoPlugin&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;namespace&lt;/span&gt; &lt;span class="nn"&gt;NakoPluginAppeal&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;NakoPluginAppeal&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;INakoPlugin&lt;/span&gt;    &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;_description&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="p"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;quot&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="err"&gt;サンプルプラグイン&lt;/span&gt;&lt;span class="p"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;quot&lt;/span&gt;&lt;span class="p"&gt;;;&lt;/span&gt;
        &lt;span class="kt"&gt;double&lt;/span&gt; &lt;span class="n"&gt;_version&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="m"&gt;1.0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="c1"&gt;//&amp;lt;del&amp;gt; プラグイン共通の部分 &amp;lt;/del&amp;gt;&lt;/span&gt;
        &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;double&lt;/span&gt; &lt;span class="n"&gt;TargetNakoVersion&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;get&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="m"&gt;2.0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;bool&lt;/span&gt; &lt;span class="n"&gt;Used&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;get&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;set&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;Name&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;get&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;GetType&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="n"&gt;FullName&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;double&lt;/span&gt; &lt;span class="n"&gt;PluginVersion&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;get&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;_version&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;Description&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;get&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;_description&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="c1"&gt;//&amp;lt;del&amp;gt; 関数の定義 &amp;lt;/del&amp;gt;&lt;/span&gt;
        &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;DefineFunction&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;INakoPluginBank&lt;/span&gt; &lt;span class="n"&gt;bank&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;bank&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;AddFunc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;アピール&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Aを&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;NakoVarType&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;_appeal&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;なでしこ2をアピールする&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;あぴーる&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="c1"&gt;// プラグインの初期化処理&lt;/span&gt;
        &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;PluginInit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;INakoInterpreter&lt;/span&gt; &lt;span class="n"&gt;runner&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;        &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="c1"&gt;// プラグインの終了処理&lt;/span&gt;
        &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;PluginFin&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;INakoInterpreter&lt;/span&gt; &lt;span class="n"&gt;runner&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;        &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="nf"&gt;_appeal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;INakoFuncCallInfo&lt;/span&gt; &lt;span class="n"&gt;info&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
            &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;fr&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;info&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;StackPopAsString&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;fr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;なでしこ&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;なでしこ2最高！&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;ビルドする&lt;/li&gt;
&lt;li&gt;NakoPluginAppeal/bin/Debug/NakoPluginAppeal.dllをcnako2/bin/Debug/にコピー&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;実行するなでしこ2のコードは次のようになります。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;A = 「なでしこ」をアピール
Aを表示
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;これをcnako2/bin/Debug/test.nakoに保存&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;あとは下のコマンドを実行すれば結果が表示されます&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ &lt;span class="nb"&gt;cd&lt;/span&gt; cnako2/bin/Debug/
$ mono cnako2.exe test.nako
なでしこ最高！
&lt;/pre&gt;&lt;/div&gt;</summary><category term="nadesiko"></category><category term="nadesiko2"></category><category term="CSharp"></category></entry><entry><title>C#で作ったdllをなでしこで使う</title><link href="http://blog.shigepon.info/blog/2014/01/28/nadesiko-plugin-cs2/" rel="alternate"></link><updated>2014-01-28T22:42:43+09:00</updated><author><name>shigepon</name></author><id>tag:blog.shigepon.info,2014-01-28:blog/2014/01/28/nadesiko-plugin-cs2/</id><summary type="html">&lt;p&gt;C#のdllを呼び出せるように、C#のdllを参照した後、Plugin.cppの一部を以下のように書き換えました&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;PHiValue&lt;/span&gt; &lt;span class="nt"&gt;__stdcall&lt;/span&gt; &lt;span class="nt"&gt;sample01&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nt"&gt;DWORD&lt;/span&gt; &lt;span class="nt"&gt;param&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;PHiValue&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;ClassLibrary1&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;Class1&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;Method1&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;nako_var_new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;hi_setStr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;cedil&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;quot&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="n"&gt;abc&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;quot&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;cedil&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;sizeof&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;quot&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="n"&gt;abc&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;quot&lt;/span&gt;&lt;span class="p"&gt;;));&lt;/span&gt;
    &lt;span class="n"&gt;return&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nt"&gt;NAKO_API&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nt"&gt;void&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="nt"&gt;ImportNakoFunction&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nt"&gt;void&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="o"&gt;//&lt;/span&gt; &lt;span class="err"&gt;ユーザー命令の追加&lt;/span&gt;
    &lt;span class="n"&gt;nako_addFunction&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;quot&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="n"&gt;sample01&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;quot&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;cedil&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;quot&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;quot&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;cedil&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;sample01&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;cedil&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;!-- more --&gt;

&lt;p&gt;なでしこ側のソースは以下のようにして呼び出してみました&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;結果=sample01
結果を言う
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;これでダイアログボックスに「method1」が表示され、続いて「abc」が表示されればOKです。&lt;/p&gt;
&lt;p&gt;しかし・・・結果は外部例外　E0434F4Dを出力してちゃんと動きませんでしたorz。この例外はtry...catchで掴もうとしても掴めません。どうも処理の関数（ここではsample01）に入った瞬間にエラーを返してしまうようです。ちなみにこのコードでググっても原因は理解できませんでした。ということで、クジラ飛行机氏（なでしこ作者）にメールで泣きつきました。&lt;/p&gt;
&lt;p&gt;すると&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;vnako.exe と同じフォルダに配置したらエラー出ませんでした。たぶん、plug-ins フォルダにパスを通さない限り、DLLがもう一方を参照できなくなるのだと思います。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;という返事が！まじで！？と思い試してみると・・・上手くいくじゃないですか！これでC#で作ったdllもなでしこで利用できるようになりました。&lt;/p&gt;</summary><category term="nadesiko"></category><category term="CSharp"></category><category term="CPlusPlus"></category></entry><entry><title>C#で作ったdllをC++/CLIで使う</title><link href="http://blog.shigepon.info/blog/2014/01/28/nadesiko-plugin-cs/" rel="alternate"></link><updated>2014-01-28T22:27:58+09:00</updated><author><name>shigepon</name></author><id>tag:blog.shigepon.info,2014-01-28:blog/2014/01/28/nadesiko-plugin-cs/</id><summary type="html">&lt;p&gt;&lt;strong&gt;画像やファイルが無くなっていますがご了承下さい&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;なでしこでプラグインを作る時にC#を使いたかったので、本格的にdllを作る前に、C++/CLIからMessageBoxを表示する程度のC#のdllを呼び出してみました。&lt;/p&gt;
&lt;p&gt;C#のdllコード&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;using System;
using System.Collections.Generic;
using System.Windows.Forms;
using System.Text;
namespace ClassLibrary1{
    public class Class1
    {
        public static void Method1()
        {
            MessageBox.Show(&amp;amp;quot;method1&amp;amp;quot;);
        }
    }
}
&lt;/pre&gt;&lt;/div&gt;


&lt;!-- more --&gt;

&lt;p&gt;C++フォームアプリケーション&lt;/p&gt;
&lt;p&gt;C#で作ったdllの参照とかフォームの構成とか画像が消えちゃったので適当に想像してください。
用はC++のアプリケーションでC#のdllを参照します。&lt;/p&gt;
&lt;p&gt;ボタンクリック時のコード&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="nt"&gt;private&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nt"&gt;System&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="nd"&gt;:Void&lt;/span&gt; &lt;span class="nt"&gt;button1_Click&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nt"&gt;System&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="nd"&gt;:Object&lt;/span&gt;&lt;span class="o"&gt;^&lt;/span&gt;  &lt;span class="nt"&gt;sender&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="nt"&gt;cedil&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="nt"&gt;System&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="nd"&gt;:EventArgs&lt;/span&gt;&lt;span class="o"&gt;^&lt;/span&gt;  &lt;span class="nt"&gt;e&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
         &lt;span class="n"&gt;try&lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;ClassLibrary1&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;Class1&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;Method1&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
         &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="nt"&gt;catch&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nt"&gt;Exception&lt;/span&gt;&lt;span class="o"&gt;^&lt;/span&gt; &lt;span class="nt"&gt;e&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;System&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;Windows&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;Forms&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;MessageBox&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;Show&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="o"&gt;-&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;gt&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="n"&gt;Message&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
         &lt;span class="p"&gt;}&lt;/span&gt;
     &lt;span class="err"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;で動かしてみるときちんと動かせました。&lt;/p&gt;</summary><category term="CSharp"></category><category term="CPlusPlus"></category><category term="nadesiko"></category></entry><entry><title>C++/CLIでなでしこのプラグインを作る方法(Visual C++ Express Edition)</title><link href="http://blog.shigepon.info/blog/2014/01/28/nadesiko-plugin/" rel="alternate"></link><updated>2014-01-28T21:45:15+09:00</updated><author><name>shigepon</name></author><id>tag:blog.shigepon.info,2014-01-28:blog/2014/01/28/nadesiko-plugin/</id><summary type="html">&lt;p&gt;なでしこでプラグインを作る時にC#を使いたかったので、その前段階としてC++/CLIでプラグインを作る方法を探ってみました。&lt;/p&gt;
&lt;p&gt;C++/CLIが使えると、.Netを使えるようになり、C#で作ったdllもVC++の参照設定から読み込んで使えるようになります。&lt;/p&gt;
&lt;p&gt;なでしこにはC++でプラグイン開発するためのsdkがあります。&lt;/p&gt;
&lt;p&gt;ただし、VC++で使用するには&lt;a href="http://www.himanavi.net/cgi/nade-bbs2/cbbs.cgi?mode=one&amp;amp;number=7462&amp;amp;type=7446&amp;amp;space=60&amp;amp;no=0"&gt;なでしこ質問掲示板&lt;/a&gt;にあるような設定をしなければいけません。（以下引用）&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Win32プロジェクトを作成&lt;/li&gt;
&lt;li&gt;plugins_sdk_cからソースを追加&lt;/li&gt;
&lt;li&gt;dnako_import.defを作成&lt;/li&gt;
&lt;li&gt;すべての構成でプロジェクトのプロパティを修正　全般→文字セットを「マルチ バイト文字セットを使用する」に変更　リンカ→入力→モジュール定義ファイルに「dnako_import.def」と入力&lt;/li&gt;
&lt;li&gt;ビルド&lt;/li&gt;
&lt;/ol&gt;
&lt;!-- more --&gt;

&lt;p&gt;dnako_import.defは以下&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;EXPORTS
ImportNakoFunction
PluginInfo
PluginVersion
PluginRequire
PluginInit
PluginFin
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;実際こちらで試した場合は他にも4の箇所で&lt;/p&gt;
&lt;p&gt;全般→共通言語ランタイムサポートを「共通言語ランタイムサポートを使用しない」に
C/C++→プリコンパイル済みヘッダー→プリコンパイル済みヘッダーの作成/使用を「プリコンパイル済みヘッダーを使用しない」に&lt;/p&gt;
&lt;p&gt;変更が必要でした。&lt;/p&gt;
&lt;p&gt;ただし、この方法だとC++/CLIを使えないので、.Netを使うことは出来ません。そこで、次のように変更しました。&lt;/p&gt;
&lt;p&gt;+sdkに含まれる.cファイルを全て.cppに変更
+dnako_import\let.h内にある各GetProcAddressの第一引数hDllをstatic_castでHMODULE型にキャスト&lt;/p&gt;
&lt;p&gt;すると問題なくビルドが通り、.Netを使用することが出来ました。と言ってもMessageBoxを試した程度ですが。&lt;/p&gt;</summary><category term="nadesiko"></category><category term="CPlusPlus"></category><category term="CSharp"></category></entry><entry><title>なでしこでLuaエディタ？を作る（ネタ）</title><link href="http://blog.shigepon.info/blog/2014/01/28/nadesiko-lua/" rel="alternate"></link><updated>2014-01-28T21:37:03+09:00</updated><author><name>shigepon</name></author><id>tag:blog.shigepon.info,2014-01-28:blog/2014/01/28/nadesiko-lua/</id><summary type="html">&lt;p&gt;なでしこではLuaを使えるので、なでしこのGUIと組み合わせたら簡単にLuaエディタ作れるんじゃね？ということで作ってみました。（ただのネタです）&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;母艦は「メインフォーム」
そのクライアントW=640#数値
そのクライアントH=400#数値
そのタイトル=「なでしこ」#文字列
※ ---
LuaエディタとはTエディタ##生成
そのX=8#数値
そのY=8#数値
そのW=616#数値
そのH=344#数値
そのテキスト=「」#文字列
そのスクロールバー=「」#文字列
※ ---
Luaボタンとはボタン##生成
そのX=280#数値
そのY=360#数値
そのW=64#数値
そのH=32#数値
そのテキスト=「luaする」#文字列
そのクリックした時は～Luaボタン__クリックした時#イベント
※※※積み木デザイナ:ここまで※
●Luaボタン__クリックした時　　# ここにイベントを書きます。
# 字下げした部分がイベント範囲です。
    エラー監視
        ソース=Luaエディタのテキスト
        A=50
        結果とは変数
        LUA(&amp;amp;quot;---
        {ソース}
        ---&amp;amp;quot;)
    エラーならば
        「エラー」と言う。
&lt;/pre&gt;&lt;/div&gt;


&lt;!-- more --&gt;

&lt;p&gt;セーブやロードなどは全て省いてますが実装は簡単です。&lt;/p&gt;
&lt;p&gt;あとLUA(&amp;quot;&lt;del&gt;...&lt;/del&gt;&amp;quot;)の箇所を変更すれば、返り値を得ることも簡単にできます。例えばこんな感じ&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;LUA(&amp;amp;quot;---ret=0{ソース}nako_set(&amp;amp;#039;結果&amp;amp;#039;&amp;amp;cedil;ret)---&amp;amp;quot;)結果を言う。
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Luaをちょっといじってみたいなと思う時に使えるんじゃないかと思います。&lt;/p&gt;
&lt;p&gt;※なぜか「LUAする」命令だとieとかexcelを立ち上げた時にvisible=trueに出来ませんでした。何かやり方が悪かったのかな。（なでしこのバージョンはデラックス版1.5322です）&lt;/p&gt;
&lt;p&gt;※LuaComではUTF-8を扱うので、日本語をまぜる場合はソースをUTF-8に変換しておく必要があります&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;LUA(UTF8N変換(&amp;amp;quot;...&amp;amp;quot;))
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;結果もnako_setでセットした値もUTF8で返ってきますのでSJIS変換命令で変換する必要があります。&lt;/p&gt;</summary><category term="nadesiko"></category><category term="Lua"></category></entry></feed>