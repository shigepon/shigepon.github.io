<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: rhaco | shigeponが関心のある技術情報など]]></title>
  <link href="http://blog.shigepon.info/blog/categories/rhaco/atom.xml" rel="self"/>
  <link href="http://blog.shigepon.info/"/>
  <updated>2016-01-06T12:21:35+09:00</updated>
  <id>http://blog.shigepon.info/</id>
  <author>
    <name><![CDATA[shigepon]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[突然サーバエラーが頻発したので、調べてみたらエラーログが原因だった]]></title>
    <link href="http://blog.shigepon.info/blog/2015/03/03/error-log-make-php-error/"/>
    <updated>2015-03-03T09:56:56+09:00</updated>
    <id>http://blog.shigepon.info/blog/2015/03/03/error-log-make-php-error</id>
    <content type="html"><![CDATA[<p>参考：<a href="http://zapanet.info/blog/item/2489">PHPのエラーログが肥大してPHPが動かなくなった話</a></p>

<p>ある日、運用しているサービスがサーバエラーを頻出しだしたので、調べてみた。環境はUbuntu、nginx、php-fpm、postgresql。</p>

<ul>
<li>他のサーバへのdbアクセスがおかしくなったのかと思い、他の方法でdbアクセス→問題無し</li>
<li>サービスを色々再起動してみた。→変化なし</li>
<li>サーバを再起動。しばらくエラーでないが、しばらくするとエラーががが</li>
<li>php-fpmを再起動。しばらくエラーでないが、しばらくするとエラーががが</li>
<li>php周りかなと思ったので、phpのログを開く→開かない！</li>
<li>良く見たらphp-fpmのログが2GB超えてた。ナンテコッタイ。</li>
<li>ログを退避して、ローテーション設定して改めてphp-fpmを再起動したら直った。めでたしめでたし。</li>
</ul>


<p>メモがてらローテーション設定を書いておく</p>

<!-- more -->


<p>/etc/logrotate.d/php.conf
<code>
/path/to/php5-fpm.log {
  daily
  missingok
  rotate 52
  compress
  delaycompress
  notifyempty
  create 0644 group username
  dateext
}
</code>
エラーチェックテストはこんな感じ
<code>sh
logrotate -dv /etc/logrotate.d/php.conf
</code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[rhaco3 memo]]></title>
    <link href="http://blog.shigepon.info/blog/2014/03/15/rhaco3-memo/"/>
    <updated>2014-03-15T13:28:55+09:00</updated>
    <id>http://blog.shigepon.info/blog/2014/03/15/rhaco3-memo</id>
    <content type="html"><![CDATA[<p>rhaco3を使ってる人なんて世界で何人居るのかなと思いつつ、あまりに情報が少ないので、メモ書きしていく。
大きめネタは別記事にまとめるが小さいネタはここに追記する。</p>

<h3>Daoで作ったSQLを確認する方法</h3>

<p>Daoを継承したモデルとして、Hogeモデルがあるとして</p>

<p><code>php
\Hoge::start_record();
\Hoge::find_get(\org\rhaco\store\db\Q::eq("id",1));//\Hogeモデルからid=1のデータを1件取得する命令
$queries = \Hoge::stop_record();
var_dump($queries);
</code></p>

<!-- more -->


<p>こんな感じで使う。出力は</p>

<!-- more -->


<p>```html
array(1) {
  [0]=>
  array(2) {</p>

<pre><code>[0]=&gt;
string(291) "select t4."id" as c5,t4."name" as c10 from hoge t4 where  ( (t4."id" = ?) )   offset 0 limit 1 "
[1]=&gt;
array(1) {
  [0]=&gt;
  string(1) "1"
}
</code></pre>

<p>  }
```</p>

<p>みたいに出る</p>

<h3>あるクラス用に設定したConfを別クラスから参照したい</h3>

<p>\org\rhaco\Confはクラス用に設定値を決めるのに良く使う。
大体commons/hoge.phpみたいにrhaco3で設定値を書くファイルに書くことが多い。</p>

<p>例としてFlowクラスでルートURLを設定するには</p>

<p><code>php
\org\rhaco\Conf::set("org.rhaco.Flow","app_url","localhost");
</code></p>

<p>こんな感じでcommons/hoge.phpに書いたりする。Flowクラス内では</p>

<p><code>php
$app_url = \org\rhaco\Conf::get("app_url");
</code></p>

<p>で設定した値を読み込める。
他のクラスで読み込みたい場合にどうするか良く分からなかったがソース読んだら分かったのでメモしておく</p>

<p><code>php
$app_url = \org\rhaco\Conf::get("org.rhaco.Flow@app_url");
</code></p>

<p>これでおk。@で区切ってクラス名と取得したい値のキーを書くと値を取って来れる。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Basic認証する時に気をつけること]]></title>
    <link href="http://blog.shigepon.info/blog/2014/02/03/basic-auth/"/>
    <updated>2014-02-03T07:48:33+09:00</updated>
    <id>http://blog.shigepon.info/blog/2014/02/03/basic-auth</id>
    <content type="html"><![CDATA[<p>rhaco3で作ったWebサービス全体にBasic認証をかけた時にちょっとハマったのでメモ。</p>

<h2>症状</h2>

<p>rhaco3の認証が入っているサービスで全体にBasic認証をかけると、</p>

<ol>
<li>トップページに入る時にBasic認証がかかる</li>
<li>認証完了</li>
<li>ログインページに移動</li>
<li>またBasic認証がかかる</li>
</ol>


<p>というケースが見られました。Webサーバにはnginxを使いました。</p>

<!-- more -->


<h2>原因</h2>

<p>nginx側の設定が悪いのかなとか色々試行錯誤しましたが、結論としてrhaco3の認証部分が401のレスポンスを吐いてたのが問題でした。</p>

<!-- more -->


<p><a href="http://www.slogical.co.jp/tech/http_basicauth.html">Basic認証の動作</a>というページで詳しく書かれています（以下に引用します）が</p>

<blockquote><ol>
<li>ユーザーがクライアント（IE等のWebブラウザ）に目的のURLを入力する。</li>
<li>クライアントが、Authorization: ヘッダを付加しないで、
目的のコンテンツにアクセスする。</li>
<li>サーバーは、401 Authorization Required のレスポンスを返して、
クライアントに認証が必要である旨を伝える。</li>
<li>クライアントがユーザーに ID/PW の入力を求める
（IE等のブラウザが、ポップアップウインドウを出して、
　ID/PW の入力をユーザーに求めるアレです。）</li>
<li>ユーザーが ID/PW を入力する。</li>
<li>クライアントが、Authorization: ヘッダに ID/PW の情報を付加
して目的のコンテンツに再度アクセスする。</li>
<li>サーバが ID/PW を解析して、認証OKであればコンテンツをクライ
アントに返す。</li>
<li>クライアントがコンテンツを表示して、ユーザーがそれを閲覧する。</li>
</ol>
</blockquote>

<p>```</p>

<pre><code>    +------+  1---&gt;  +--------+  2---&gt;  +-------+
    |      |  &lt;---4  |        |  &lt;---3  |       |
    | User |         | Client |         | httpd |
    |      |  5---&gt;  |        |  6---&gt;  |       |
    +------+  &lt;---8  +--------+  &lt;---7  +-------+
</code></pre>

<p>```</p>

<blockquote><p>（コンテンツデータを１つ取得するために、リクエスト・レスポンスの
　やりとりが２回行われています。）</p>

<p>なお、
Authorization: ヘッダには、
Basic認証の ID と PW とを :（半角のコロン）でつなげた文字列を、
base64した値が格納さています。
（例えば、
　Authorization: Basic dXNlcjAxOnBhc3N3b3JkCg==　といったようになります。）</p></blockquote>

<p>ように、Basic認証ではサーバが401のレスポンスを返すことで、ブラウザ側にポップアップを出させているようです。その為rhaco3の認証部分で401のレスポンスを出した時に認証の情報がリセットされてしまったのではないかと思われます。</p>

<h2>対処</h2>

<p>rhaco3の認証部分(\org\rhaco\flow\parts\RequestFlow::do_login)で401を送信していた部分で200を送信することで対処できました。</p>

<p>rhaco3で見られた症状でしたが、他のフレームワークでも特に何も考えてなかったら引っかかる可能性があります。というかBasic認証とフレームワークの認証両方掛けるとか普通無いですよねそうですよね。</p>
]]></content>
  </entry>
  
</feed>
