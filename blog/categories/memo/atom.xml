<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: memo | shigeponが関心のある技術情報など]]></title>
  <link href="http://blog.shigepon.info/blog/categories/memo/atom.xml" rel="self"/>
  <link href="http://blog.shigepon.info/"/>
  <updated>2015-09-03T23:12:55+09:00</updated>
  <id>http://blog.shigepon.info/</id>
  <author>
    <name><![CDATA[shigepon]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Javascript memo]]></title>
    <link href="http://blog.shigepon.info/blog/2015/08/12/javascript-memo/"/>
    <updated>2015-08-12T09:01:59+09:00</updated>
    <id>http://blog.shigepon.info/blog/2015/08/12/javascript-memo</id>
    <content type="html"><![CDATA[<p>Javascript関連のメモ</p>

<h2>HighChartで日本時間をx軸に利用</h2>

<p>チャートを表示するライブラリに<a href="http://www.highcharts.com/">HighChart</a>ってのを使ってるけど、横軸の時間がUTCになってしまうので、ちょっとはまった。</p>

<p>こうすればいいらしい</p>

<p>```js
Highcharts.setOptions({</p>

<pre><code>global: {
    useUTC: false
}
</code></pre>

<p>});
var chart = new HighChart(&hellip;);
```</p>

<p>グローバルな設定として使うらしい。
参考（ほぼそのまま）<a href="http://mtc.hatenablog.com/">mtcdotcom&rsquo;s blog</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[uwsgiメモ]]></title>
    <link href="http://blog.shigepon.info/blog/2015/03/05/uwsgi-memo/"/>
    <updated>2015-03-05T10:21:54+09:00</updated>
    <id>http://blog.shigepon.info/blog/2015/03/05/uwsgi-memo</id>
    <content type="html"><![CDATA[<p>uwsgi関連ではまった点などをメモ</p>

<h2>invalid request block size</h2>

<p>ajaxでサーバ側からデータを読み込むライブラリを使ってると、条件によって502エラーが出てる(=大体djangoとかのプログラム側のエラーで出る)ので、uwsgiのログを調べると、invalid request block sizeというエラーが出てた。</p>

<p>んで、調べてみると、uwsgiがリクエストのサイズが大きすぎるとエラーを吐いているらしい。ライブラリ側で勝手にパラメーター付けて送られてリクエストのサイズが大きくなっているので、こりゃ調整しないとなということで調べてみた。起動時にオプション設定するか、iniファイルで設定したらいけるらしい</p>

<p><code>sh
$ uwsgi --buffer-size=xxxx
</code></p>

<!-- more -->


<p><code>ini
...
buffer-size= xxxx
...
</code></p>

<!-- more -->


<p>参考：<a href="http://stackoverflow.com/questions/15878176/uwsgi-invalid-request-block-size">uwsgi invalid request block size &ndash; Stack Overflow</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Django Memo]]></title>
    <link href="http://blog.shigepon.info/blog/2014/11/23/django-memo/"/>
    <updated>2014-11-23T22:35:38+09:00</updated>
    <id>http://blog.shigepon.info/blog/2014/11/23/django-memo</id>
    <content type="html"><![CDATA[<p>Djangoやってて忘れっぽいところとかをメモ</p>

<h2>リクエストパラメーターをモデルに入れる</h2>

<p>```py views.py
def a_view(request):</p>

<pre><code>hoge = Fuga(request.GET) #新たにインスタンス作る場合
fuga = Fuga.objects.get(pk=1)
hage = Fuga(request.GET,instance=fuga) #既にあるインスタンスに入れる場合
</code></pre>

<p>```</p>

<p>instance=xxxとやるのを何度か忘れた＞＜</p>

<!-- more -->


<h2>forms.DateFieldでISO-8601フォーマットの入力を受入れる</h2>

<p>html5でdatetime-localとか扱おうとすると、入力値がISO-8601形式になって、そのままだとDateFieldが入力をdatetimeの正しい形式として認識してくれない。</p>

<p>で、input_formatsを設定するといけるらしいんだけど、あまりマニュアルでちゃんと説明してない。Stack Overflowの情報とかをググると設定方法が間違ってるコードとかあって、正しいのが良く分からない。で、結局色々調べたら</p>

<p><code>py models.py
date = forms.DateField(input_formats=('%Y-%m-%dT%H:%M:%S',))
</code></p>

<p>とタプルで渡す必要があるらしい</p>

<p>参考：<a href="http://labs.uechoco.com/blog/2011/08/django-dateform-inputs_format-wrong.html">うえちょこ＠ぼろぐ» [Django]forms.DateFieldのinputs_formatではまった</a></p>

<h2>ModelForm使ってフォーム出力する時にrequeied属性をテンプレートで参照するとか</h2>

<p><code>py models.py
hoge = forms.CharField(max_length=100,widget=TextInput(attrs={"required":"true"}))↲
</code></p>

<p>こんな感じで定義したフィールドの属性取ってきたい場合、</p>

<p><code>html
\{\% for field in form \%\}
  \{\% if field.field.required \%\}&lt;p&gt;必須&lt;/p&gt;\{\% endif \%\}
\{\% endfor \%\}
</code></p>

<p>適当だけど、こんな感じでアクセスできる。</p>

<h2>DjangoでGroup By</h2>

<p>DjangoでGroup Byして何個かのフィールドのデータで例えば、日付とその日に登録したデータの件数だけ欲しい時</p>

<p>```py views.py
q = Hoge.objects.filter(date<strong>gte = date).filter(date</strong>lt = dto).extra({&lsquo;date&rsquo;:&ldquo;date_trunc(&lsquo;day&rsquo;,date)&rdquo;})
q.query.group_by = [&lsquo;date&rsquo;]
values = q.values(&lsquo;date&rsquo;).order_by().annotate(c = Count(&lsquo;id&rsquo;))</p>

<p>こんな感じでいける。ちなみにPostgreSQL。dateが時間の情報も持っているのでPostgreSQLのdate_trunc関数を使ってdateを日付の情報だけにしてから、group_byする。
annotateは集計した値を新しいフィールド（ここだとc）に入れる。
例えばvalues[0].cでアクセスできる。このコードで、日付とその日に登録したデータ件数が入った辞書のリストを得ることが出来る
```</p>

<h2>QuerySetで吐いたクエリを出力</h2>

<p><code>py views.py
h = Hoge.objects.all()
print h.query
</code></p>

<p>でおk。でもクエリが例外出す時には出せないような・・・</p>

<p>参考：<a href="http://programmer-jobs.blogspot.jp/2013/01/djangosql.html">Djangoで、デバック用のSQLクエリの表示 一言多いプログラマーの独り言</a></p>

<h2>ModelFormでcleanを使ってデータの検証する時に、updateしようとしてるかcreateしようとしてるか判断する</h2>

<p>createの時だけチェックしたかったので、色々調べてみたらclean(self)内で、self.instanceでチェックすると良いみたい。例えばプライマリーキーでidがある場合こんな感じ</p>

<p>```py models.py
class Hoge(forms.ModelForm):</p>

<pre><code>def clean(self):
    cleaned_data = self.cleaned_data
    if self.instance.id is None:
        #create用の処理
        raise ValidationError('例外出すのはこんな感じ')
    else:
        #update用の処理
    return cleaned_data
</code></pre>

<p>```</p>

<p>instanceの型チェックする方が正攻法かも。例外のメッセージは</p>

<p>```py views.py
def test(request):</p>

<pre><code>form = Hoge(request.POST)
if form.is_valid():
    #例外が無かった場合
else:
    for k,v in form.errors.item():
        #kが例外のフィールド。cleanの場合は__all__
        #vが例外のメッセージ
</code></pre>

<p>```</p>

<p>みたいな感じで取り出せる。</p>

<h2>runserver実行時にコンソールにスタックとレースを出力する</h2>

<p>```py settings.py
LOGGING={</p>

<pre><code>'version':1,
'handlers':{
    'console':{
        'level':'DEBUG',
        'class':'logging.StreamHandler',
    },
},
'loggers':{
    'django.request':{
        'handlers':['console'],
        'propagate':True,
        'level':'DEBUG',
    }
},
</code></pre>

<p>}
```
これを書いておけばコンソールにスタックトレースを出力してくれる。apiのコード書いてる時とかajaxで呼び出してる場合とかに便利。</p>

<p>参考：<a href="http://stackoverflow.com/questions/5886275/print-a-stack-trace-to-stdout-on-errors-in-django-while-using-manage-py-runserve">python &ndash; Print a stack trace to stdout on errors in Django while using manage.py runserver &ndash; Stack Overflow</a>というかここのコード丸コピー</p>

<h2>Gmail送信</h2>

<p><code>py settings.py
EMAIL_USE_TLS=True
EMAIL_HOST='smpt.gmail.com'
EMAIL_HOST_USER='mymail@gmail.com'
EMAIL_HOST_PASSWORD='mypassword'
EMAIL_PORT=587
</code></p>

<p>```py views.py
from django.core.mail import send_mail</p>

<p>def mail(request):</p>

<pre><code>send_mail('Subject','message','mymail.gmail.com',['to@mail.address'],fail_silently=False)
</code></pre>

<p>```</p>

<p>こんだけ</p>

<p>参考：<a href="http://d.hatena.ne.jp/yuheiomori0718/20120714/1342266647">DjangoでGmailを使ってメール送信 &ndash; brainstorm</a>、</p>

<h2>MultiValueDictKeyError</h2>

<p>モデルをgetする時にキーに何も値が指定されてなかったりすると起こる。例えば</p>

<p><code>py
instance = SampleModel.objects.get(id=key)
</code></p>

<p>でkeyに何も設定されてないと起こるみたい。出た時に何回かイチイチぐぐったのでメモ</p>

<h2>PostgreSQLでDateTimeFieldの値を日付に対してグルーピングしたい</h2>

<p>PostgreSQLではタイムゾーン入りのタイムスタンプで登録されるので、</p>

<p><code>py
q = Hoge.objects.extra({"date":"date_trunc('day',date)"})
q.query.group_by['date']
</code></p>

<p>みたいな構文で日付だけ取り出して、グルーピングしようとすると、PostgreSQLの設定でタイムゾーンがUTCになっていた場合に、2014/12/17 00:00:00+9のデータは2014/12/16 15:00:00+0と認識されるので12/16のデータとしてグルーピングされてしまう。日本のタイムゾーンでやってると、これはまずいので、以下のようなコードにすると良い</p>

<p><code>py
q = Hoge.objects.extra({"date":"date_trunc('day',date AT TIME ZONE 'JST')"})
q.query.group_by['date']
</code></p>

<h2>django+uwsgi+nginxで502エラーが出た原因の１つ</h2>

<p>djangoはあまり関係無いけどuwsgiの設定の問題だったので、こちらに。django+uwsgi+nginxで502エラーが出て、runserverでは普通に動いたので、しばらくググって解答が得られたのでメモ</p>

<p><a href="http://datatables.net/">DataTables</a>を使って動的にテーブルデータをロードしようとしたら、runserverでは上手く行くのにuwsgiだと502エラーが出てロード出来なかった。最初にnginxのログを見てみると、uwsgiのとこでエラーと書いてあったので、uwsgiのログをチェックした。すると</p>

<p><code>
invalid request block size: xxxxx (max 4096)...
</code></p>

<p>みたいなエラーが出ていた。リクエストが大きすぎるのかなと思い、リクエストの一部を削ってみたらエラーが出なかった。んで、対策をググってみたら書いてあったので、そのまま下のコードを実装してみた。</p>

<p><code>ini uwsgi.ini
buffer-size=65535
</code></p>

<p>みたいにバッファーサイズを大きく(例では64k)した。これでエラーが消えたのでめでたしめでたし。</p>

<p>参考：<a href="http://stackoverflow.com/questions/22697584/nginx-uwsgi-104-connection-reset-by-peer-while-reading-response-header-from-u">django &ndash; Nginx uwsgi (104: Connection reset by peer) while reading response header from upstream &ndash; Stack Overflow</a></p>

<h2>運用環境と開発環境で設定を切り分ける</h2>

<p>開発環境用にlocalアプリを作って、local/settings.pyを作成し、開発環境での設定を書いて、プロジェクトのsettings.pyの最後に以下を追加すると良い</p>

<p>```py
try:</p>

<pre><code>from local.settings import *
</code></pre>

<p>except ImportError:</p>

<pre><code>pass
</code></pre>

<p>```</p>

<p>参考：<a href="http://surgo.jp/2010/02/django.html">パーフェクトな Django の設定ファイル &mdash; Kosei Kitahara&rsquo;s Blog</a></p>

<h2>テンプレートの読み込まれ順</h2>

<ul>
<li>TEMPLATE_DIRSで指定されたディレクトリの順番で、そこを起点にした全てのテンプレート</li>
<li>INSTALLED_APPSに指定した順にアプリケーション直下のtemplatesディレクトリを調べる</li>
</ul>


<p>hogeアプリでテンプレートを指定した場合に、hogeアプリ直下のtemplatesディレクトリを調べてくれる訳ではないので注意が必要。</p>

<p>例えば</p>

<p>```py
TEMPLATE_DIRS = [&lsquo;/home/hoge/templates&rsquo;,]
INSTALLED_APPS = (</p>

<pre><code>'hoge',
'fuga',
</code></pre>

<p>)
```</p>

<p>と書いてあり、プロジェクトが/www/a_project/に置いてある場合、</p>

<ul>
<li>/home/hoge/templates</li>
<li>/www/a_project/hoge/templates</li>
<li>/www/a_project/fuga/templates</li>
</ul>


<p>の順でテンプレートの存在を調べる</p>

<p>参考：<a href="http://www.tsuyukimakoto.com/blog/2006/11/22/django-template-loader/">DjangoのTemplateローダ | tsuyuki.makoto</a></p>

<h2>Many to manyなモデルで中間テーブルをthroughで指定、かつ自己参照な場合の設定</h2>

<p>参考：<a href="http://stackoverflow.com/questions/3880489/how-do-i-write-a-django-model-with-manytomany-relationsship-with-self-through-a">How do I write a Django model with ManyToMany relationsship with self through a Model &ndash; Stack Overflow</a></p>

<p>symmetrical設定をすると良いらしい</p>

<p>```py
class Member(models.Model):</p>

<pre><code>name = models.CharField(max_length=100)
friends = models.ManyToManyField('self', through = 'MemberFriends', symmetrical = False)
</code></pre>

<p>class MemberFriends(models.Model):</p>

<pre><code>f = models.ForeignKey(Member, related_name = 'f')
t = models.ForeignKey(Member, related_name = 't')
comment = model.CharField(max_length = 100)
</code></pre>

<p>```</p>

<p>こんな感じ</p>

<h2>url末尾に必ずスラッシュを入れる</h2>

<p>url末尾にスラッシュが無い場合、スラッシュ有りにリダイレクトする設定</p>

<p><code>py settings.py
APPEND_SLASH = True
</code></p>

<h2>Django rest apiで日時としてタイムスタンプを出力する</h2>

<p>参考：<a href="http://stackoverflow.com/questions/26083583/serialize-a-datetime-as-an-integer-timestamp">django rest framework &ndash; serialize a datetime as an integer timestamp &ndash; Stack Overflow</a></p>

<p>どうもDjango rest frameworkのDateTimeFieldで指定するformatパラメータだとタイムスタンプが指定出来ないみたいなのでこんな感じにすると出来る。</p>

<p>```py serialize.py
from rest_framework import serializers
import time
class HogeSerializer(serializers.Serializer):</p>

<pre><code>date = serializers.DateTimeField()
timestamp = serializers.SerializerMethodField()
def get_timestamp(self, obj):
    return time.mktime(obj.date.timetuple())
</code></pre>

<p>```</p>

<p>javascriptのタイムスタンプに対応するためにはget_timestampの返り値を1000倍すればおk</p>

<h2>Paginatorでcount文を実行させずに指定件数分のページングを行う</h2>

<p>分量が多くて、先頭1000件を100件ずつページング表示させるので十分かなという時に、いちいちcount文を発行させたくない時</p>

<p><code>py
paginator = Paginator(query, 100)
paginator._count = 1000
</code></p>

<p>queryは適当なQuerySet</p>

<p>参考：<a href="http://stackoverflow.com/questions/7707035/how-to-implement-a-paginator-that-doesnt-call-count">django &ndash; How to implement a paginator that doesn&rsquo;t call count(*) &ndash; Stack Overflow</a></p>

<h2>メソッドの呼び出し元オブジェクトを取得</h2>

<p>inspectモジュールってのが使えるらしい</p>

<p>```py
import inspect
&hellip;</p>

<pre><code>(frame, filename, line_number, function_name, lines, index) = inspect.getouterframes(inspect.currentframe())[1]
print(frame, filename, line_number, function_name, lines, index)
</code></pre>

<p>```</p>

<p>参考：<a href="http://stackoverflow.com/questions/3711184/how-to-use-inspect-to-get-the-callers-info-from-callee-in-python">How to use inspect to get the caller&rsquo;s info from callee in Python? &ndash; Stack Overflow</a></p>

<p>プロファイラ使った時に、socket.pyが呼ばれてるのは分かったけど、その呼び出し元がイマイチわからなかった時に使った。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Titanium Mobileメモ]]></title>
    <link href="http://blog.shigepon.info/blog/2014/11/23/titanium-mobile-memo/"/>
    <updated>2014-11-23T09:48:44+09:00</updated>
    <id>http://blog.shigepon.info/blog/2014/11/23/titanium-mobile-memo</id>
    <content type="html"><![CDATA[<p>Titanium Mobileに関するメモ</p>

<h2>アプリ固有の設定を登録する</h2>

<p>アプリを終了して、再起動させた時も保存される設定をしたい時はTitanium.App.Propertiesを使う</p>

<p><code>js
Ti.App.Properties.setString("hoge","fuga");//設定
hoge = Ti.App.Properties.getString("hoge");//取得
</code></p>

<p>stringを例にしてるが、ListとかObjectとかBoolとか色々入れられる。</p>

<!-- more -->


<h2>Titanium MobileのUIで本家以外に参考にしてるサイト</h2>

<p><a href="https://code.google.com/p/titanium-mobile-doc-ja/w/list">Wiki Pages &ndash; titanium-mobile-doc-ja &ndash; Appcelerator Titanium Mobileに関するドキュメントを日本語でまとめていくプロジェクト &ndash; Google Project Hosting</a></p>

<h2>Android実機で文字が小さくなる</h2>

<p>```xml tiapp.xml
<android xmlns:android="http://schemas.android.com/apk/res/android"></p>

<pre><code>&lt;manifest&gt;
     &lt;supports-screens android:anyDensity="false"/&gt;
&lt;/manifest&gt;
</code></pre>

<p></android>
```</p>

<p>もしくは文字サイズをdpで指定</p>

<p>参考：<a href="http://www.fujimotohajime.net/pukiwiki/index.php?TitaniumMobile%2FAndroid%E3%81%A7%E5%AE%9F%E6%A9%9F%E3%83%86%E3%82%B9%E3%83%88%E3%81%99%E3%82%8B%E3%81%A8%E6%96%87%E5%AD%97%E3%81%8C%E5%B0%8F%E3%81%95%E3%81%84">TitaniumMobile/Androidで実機テストすると文字が小さい &ndash; Wiki</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[git memo]]></title>
    <link href="http://blog.shigepon.info/blog/2014/04/09/git-memo/"/>
    <updated>2014-04-09T12:36:49+09:00</updated>
    <id>http://blog.shigepon.info/blog/2014/04/09/git-memo</id>
    <content type="html"><![CDATA[<p>git関連のメモ</p>

<h3>変更履歴を見る</h3>

<p><code>sh
$ git log -p
</code></p>

<p>で全体の変更履歴</p>

<p><code>sh
$ git log -p filename
</code></p>

<!-- more -->


<p>でfilenameの変更履歴を表示する</p>

<h3>ブランチ間の変更ファイル一覧を取得</h3>

<p><code>sh
$ git diff --name-only -b parent_branch -b child_branch
</code></p>

<p>参考：<a href="http://qa.atmarkit.co.jp/q/2047">gitの指定ブランチで変更されたファイルの一覧を取得したい &ndash; QA@IT</a></p>

<h2>GitHubで色々やる手順</h2>

<p>参考：</p>

<ul>
<li><a href="http://kik.xii.jp/archives/179">Github で Fork してから Pull Request をするまでの流れ | けーこ in サンフランシスコ</a></li>
<li><a href="http://qiita.com/xtetsuji/items/555a1ef19ed21ee42873">GitHubでFork/cloneしたリポジトリを本家リポジトリに追従する &ndash; Qiita</a></li>
<li><a href="http://misapon.blogspot.jp/2014/10/github.html">明日に向かって昇龍拳: GitHubでプルリクエストがマージされた後にすること</a></li>
</ul>


<h3>1.準備</h3>

<p>まずは開発に関わりたいプロジェクトのリポジトリをFork</p>

<p>次にローカルにクローン</p>

<p><code>sh
$ git clone https://github.com/path/to/repository.git
$ cd repository
</code></p>

<h3>2.開発〜Pull Request</h3>

<p>Pull Request用にブランチを切る</p>

<p><code>sh
$ git checkout -b issue
</code></p>

<p>コード変更後、コミット</p>

<p><code>sh
$ git add -A
$ git commit -m "commit message"
$ git push origin issue
</code></p>

<p>まだrebeseは良く分かってない。で、GitHub上でPull Requestを作成する。</p>

<h3>3.Pull Requestが反映された後</h3>

<h4>Pull Requestに使ったブランチを削除</h4>

<p><code>sh
$ git checkout master
$ git branch -D issue
$ git push origin :issue
</code></p>

<h4>GitHubでForkしたリポジトリを本家に合わせる</h4>

<p><code>sh
$ git remote add honke https://github.com/honke/path/to/repository.git
</code></p>

<p>リポジトリの追加は1回で良い。後は合わせたいタイミングで下のコマンドを繰り返す</p>

<p><code>sh
$ git fetch honke
$ git merge honke/master
$ git push origin master
</code></p>

<p>以下2〜3を繰り返す</p>

<h3>別の場所に開発中のブランチをダウンロードしたい場合</h3>

<p>参考：
<a href="http://glassylamp.blogspot.jp/2010/11/git.html">GlassyLamp: git でブランチを指定してダウンロードする方法</a></p>

<p>issueブランチをダウンロードしたい場合</p>

<p><code>sh
$ git clone https://github.com/path/to/repository.git
$ git checkout -b issue-local remotes/origin/issue
</code></p>

<h3>masterブランチの変更を別ブランチに反映する</h3>

<p><code>sh
$ git checkout hoge
$ git merge master
</code></p>

<h3>mergeでコンフリクトしたファイルの一覧</h3>

<p><code>sh
$ git ls-files -u
</code></p>
]]></content>
  </entry>
  
</feed>
