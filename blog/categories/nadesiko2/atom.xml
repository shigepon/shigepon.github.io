<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: nadesiko2 | shigeponが関心のある技術情報など]]></title>
  <link href="http://blog.shigepon.info/blog/categories/nadesiko2/atom.xml" rel="self"/>
  <link href="http://blog.shigepon.info/"/>
  <updated>2015-05-13T12:43:36+09:00</updated>
  <id>http://blog.shigepon.info/</id>
  <author>
    <name><![CDATA[shigepon]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Jenkinsでなでしこ2をCIする]]></title>
    <link href="http://blog.shigepon.info/blog/2015/05/08/nadesiko2-continuous-integration-with-jenkins/"/>
    <updated>2015-05-08T09:19:18+09:00</updated>
    <id>http://blog.shigepon.info/blog/2015/05/08/nadesiko2-continuous-integration-with-jenkins</id>
    <content type="html"><![CDATA[<p><a href="http://blog.shigepon.info/blog/2015/05/05/nunit-console-test-for-nadesiko2/">なでしこ2をubuntu cuiでテストする &ndash; shigeponが関心のある技術情報など</a>
までやったので、CIできると便利かなと思ってやってみた。と言いつつ、単にやってみたかっただけ。mono developとかvisual studio使って開発する場合も同じように出来ると思う。例によって環境はUbuntu 12.04</p>

<p>参考：</p>

<ul>
<li><a href="http://d.hatena.ne.jp/Crest/20121220/1356023823">.NETとJenkinsで始めるCI開発 &ndash; CREST’S WEBLOG</a></li>
<li><a href="http://blog.bekijkhet.com/2013/01/create-mono-c-buildserver-using-jenkins.html">Create a Mono C# Buildserver using Jenkins and GitHub ~ BroersA Blog</a></li>
</ul>


<h2>1. Jenkinsインストール</h2>

<p>(略) 追記するかも？</p>

<!-- more -->


<h2>2. Jenkins設定</h2>

<!-- more -->


<h3>一般</h3>

<p>(略) 追記するかも？</p>

<h3>C#関連</h3>

<p>Jenkins > Jenkinsの管理 > プラグインの管理 > 利用可能(タブ)</p>

<p>からプラグインをインストールする。インストールするプラグインは</p>

<ul>
<li>GIT Plugin</li>
<li>MSBuild Plugin</li>
<li>NUnit plugin</li>
</ul>


<p>Jenkins > Jenkinsの管理 > システム設定</p>

<p>から</p>

<p>MSBuildの項目を編集。</p>

<ul>
<li>インストール済みMSBuild&hellip;をクリック</li>
<li>name</li>
<li>適当（とりあえず「mono」とした）</li>
<li>Path to MSBuild</li>
<li>/usr/bin/xbuild  (Warning出るけど気にしない)</li>
<li>Default Parameters</li>
<li>なし(Debugでビルドするかとか指定したりするかも。)</li>
<li>適用ボタンを押す</li>
</ul>


<p>Gitの項目は編集したか覚えてないけど</p>

<ul>
<li>Path to Git executable</li>
<li>/usr/bin/git</li>
</ul>


<p>くらいやっとけばいいかも？　</p>

<h2>3. プロジェクト作成</h2>

<p>Jenkins > 新規ジョブ作成　から</p>

<ul>
<li>ジョブ名</li>
<li>適当(nadesiko2とか付けてみた)</li>
<li>フリースタイル・プロジェクトのビルドを選択</li>
<li>OKボタンを押す</li>
</ul>


<h2>4. プロジェクト設定</h2>

<p>プロジェクトの設定画面に移動するので編集。Jenkins > プロジェクト(今回はnadesiko2) > 設定　からいつでも編集可能。</p>

<ul>
<li>ソースコード管理</li>
<li>Gitを選択</li>
<li>Repository URL</li>
<li> なでしこ2のリポジトリの場所。今回は<a href="http://blog.shigepon.info/blog/2015/05/01/develop-nadesiko2-on-ubuntu-cui/">ubuntuのcui環境でなでしこ2をビルドする &ndash; shigeponが関心のある技術情報など</a>の続きなので/home/username/nadesiko2</li>
<li>Branches to build</li>
<li> なでしこ2では変更点はpull requestする予定なので、pull requestする時のブランチを指定した。ここは色んな設定がありえる。</li>
<li>ビルド・トリガ</li>
<li>SCMをポーリングを選択</li>
<li>スケジュール</li>
<li> H/30 * * * * (大体30分おき)</li>
<li>ビルド</li>
<li>ビルド手順の追加 > Build a Visual Studio project or solution using MSBuild</li>
<li>Build a Visual Studio project or solution using MSBuildの設定</li>
<li> MSBuild Version

<ul>
<li>monoを選択</li>
</ul>
</li>
<li> MSBuild Build File

<ul>
<li>cnakoのソリューションファイルとしてNako2_CNako.slnを指定した。プラグインのソリューションファイルでも出来ると思う</li>
</ul>
</li>
<li>ビルド手順の追加 > シェルの実行(Windowsだと多分Windowsバッチコマンドの実行)</li>
<li>シェルの実行</li>
<li> nunit-console $WORKSPACE/CNako2Test/bin/Debug/CNako2Test.dll -xml cnako2test.xml -noshadow</li>
<li>ビルド後の処理</li>
<li>ビルド後の処理の追加 > Publish NUnit test result report</li>
<li>cnako2test.xml</li>
</ul>


<h2>5. 実行</h2>

<p>Jenkins > プロジェクト(今回はnadesiko2)
で、ビルド実行をクリックすると実行してくれる。あと、gitの指定したブランチでコミットした後もこの設定の場合30分おきにコミットをチェックしてビルドを実行してくれる。まだまだテストが通ってない部分もあるので、結果は失敗になるけど、とりあえずこれで進められる。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[なでしこ2をubuntu cuiでテストする]]></title>
    <link href="http://blog.shigepon.info/blog/2015/05/05/nunit-console-test-for-nadesiko2/"/>
    <updated>2015-05-05T23:02:32+09:00</updated>
    <id>http://blog.shigepon.info/blog/2015/05/05/nunit-console-test-for-nadesiko2</id>
    <content type="html"><![CDATA[<p><a href="http://blog.shigepon.info/blog/2015/05/01/develop-nadesiko2-on-ubuntu-cui/">ubuntuのcui環境でなでしこ2をビルドする</a>の続きで、cui環境でなでしこ2のテストを実行してみる。</p>

<p>cui環境でnunitを実行するには<a href="http://www.nunit.org/index.php?p=nunit-console&amp;r=2.5.10">nunit-console</a>を使う。なでしこ2のテストを実行するにはテスト関連のdllをnunitで実行すると良い。コマンドはなでしこ2をインストールしたディレクトリでこんな感じ。</p>

<p><code>sh
$ nunit-console CNako2Test/bin/Debug/CNako2Test.dll
</code></p>

<p>プラグインのテスト(NakoPluginTest)プロジェクトでは外部ファイルを利用するので</p>

<p><code>sh
$ nunit-console NakoPluginTest/bin/Debug/NakoPluginTest.dll
</code></p>

<!-- more -->


<p>だと、外部ファイルを読み込むテスト（例えばTest_read）で、Could not find fileと怒られる。なので、コマンドにnoshadowオプションを付ける。</p>

<p><code>sh
$ nunit-console -noshadow NakoPluginTest/bin/Debug/NakoPluginTest.dll
</code></p>

<p>とすると、外部ファイルを読み込んでくれる。
これでcui環境でなでしこ2をビルドからテストまで出来る。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ubuntuのcui環境でなでしこ2をビルドする]]></title>
    <link href="http://blog.shigepon.info/blog/2015/05/01/develop-nadesiko2-on-ubuntu-cui/"/>
    <updated>2015-05-01T08:23:00+09:00</updated>
    <id>http://blog.shigepon.info/blog/2015/05/01/develop-nadesiko2-on-ubuntu-cui</id>
    <content type="html"><![CDATA[<p>今までmono developでなでしこ2をビルド、テストして、cui環境にアップロードしてたんだけど、面倒になってきたのでcui環境で直接ビルド、テストしてみようと思ったのでついでに開発を始める段階からメモしてみる。</p>

<p>環境はubuntu 12.04とするが、上位バージョンでも問題無いはず</p>

<h1>mono環境の準備</h1>

<p>mono-develをインストールしたらmono関連で必要なものは勝手にインストールされたような気がする。ついでに<a href="http://blog.shigepon.info/blog/2014/08/20/vb-not-work-on-ubuntu/">VisualBasicが動かない件</a>にあるように、mono-vbnc、あとはnunitのインストール</p>

<p><code>sh
$ aptitude install mono-devel mono-vbnc nunit
</code></p>

<!-- more -->




<!-- more -->


<h1>なでしこ2リポジトリを取得</h1>

<p><a href="http://it.slashdot.jp/story/15/03/13/0340256/">Google Codeが2016年1月に閉鎖される</a>ので、なでしこ2のリポジトリはgithubに移動している。</p>

<p>なので、リポジトリの取得はgit cloneでいける。kujirahandさんのリポジトリをcloneするなら</p>

<p><code>sh
$ git clone https://github.com/kujirahand/nadesiko2.git
</code></p>

<p>shigeponがfolkしたリポジトリなら</p>

<p><code>sh
$ git clone https://github.com/shigepon/nadesiko2.git
</code></p>

<p>で、カレントディレクトリにnadesiko2ディレクトリが出来て、その下にプロジェクト1式が入っている。中にはソリューションが3つあり、それぞれ</p>

<ul>
<li>Nako2_CNako.sln → cui環境で動かすなでしこ2(cnako)関連</li>
<li>Nako2_Plugins.sln → なでしこ2のプラグイン関連</li>
<li>Nako2_Plugins_Office.sln → なでしこ2のOffice関係プラグイン</li>
</ul>


<p>のソリューションである。今回は\/home\/usernameディレクトリ上でcloneすると考える</p>

<h1>おもむろにビルド</h1>

<p>kujirahandさんのリポジトリをcloneしたとして、とりあえず何もせずにCNakoのソリューションをビルドしてみると</p>

<p><code>sh
$ xbuild Nako2_CNako.sln
...
NakoPluginArrayTest.cs(9,7): error CS0246: The type or namespace name `NUnit' could not be found. Are you missing a using directive or an assembly reference?
...
</code></p>

<p>みたいなエラーメッセージを出してビルド出来ない。一方でプラグイン関連のソリューションは</p>

<p>```sh
$ xbuild Nako2_Plugins.sln
&hellip;</p>

<pre><code>18 Warning(s)
 0 Error(s)
</code></pre>

<p>Time Elapsed 00:00:06.1095450
```</p>

<p>と出て、エラー無くビルド出来る。この違いはそれぞれのソリューションで参照しているテストプロジェクトにnunitへの参照パスが入っているかどうかの違いだったので、NakoPluginTest/NakoPluginTest.csprojを参考にしてCNakoTest/CNakoTest.csprojの</p>

<p><code>
&lt;Reference Include="nunit.framework.extensions, ..." /&gt;
</code></p>

<p>行に３行追記する</p>

<p>```xml
   <Reference Include="nunit.framework"></p>

<pre><code>   &lt;HintPath&gt;..\..\..\..\usr\lib\mono\gac\nunit.framework\2.5.10.0__96d09a1eb7f44a77\nunit.framework.dll&lt;/HintPath&gt;
</code></pre>

<p>   </Reference>
```</p>

<p>で、再度ビルドするとビルド出来た。shigeponのリポジトリには修正したものをアップしておくのでそのままビルド出来ると思う。パスはリポジトリをcloneするディレクトリによっては変更しないといけないと思う。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ubuntuのmonoでMicrosoft.VisualBasicが動かない件]]></title>
    <link href="http://blog.shigepon.info/blog/2014/08/20/vb-not-work-on-ubuntu/"/>
    <updated>2014-08-20T13:38:34+09:00</updated>
    <id>http://blog.shigepon.info/blog/2014/08/20/vb-not-work-on-ubuntu</id>
    <content type="html"><![CDATA[<p>なでしこ2にコミットしたりしつつ、実際にUbuntu 12.04で使ってみたりしているが、vb系のインポートが出来ないとか何とか言われたのでメモ</p>

<p>参考：<a href="http://stackoverflow.com/questions/10071836/vb-net-not-working-on-ubuntu-10-04-with-mono">.net &ndash; VB.NET Not working on Ubuntu 10.04 With Mono &ndash; Stack Overflow</a></p>

<p>要は普通にmonoをインストールしただけ</p>

<p><code>sh
$ sudo aptitude install mono-devel
</code></p>

<p>だとVB系のライブラリはインストールされないらしい。</p>

<p><code>sh
$ sudo aptitude install mono-vbnc
</code></p>

<!-- more -->


<p>を追加インストールしておこうということだった。情報無かったので結構はまった。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[なでしこ2のプラグインを作る方法]]></title>
    <link href="http://blog.shigepon.info/blog/2014/01/29/nadesiko2-make-plugin/"/>
    <updated>2014-01-29T09:49:17+09:00</updated>
    <id>http://blog.shigepon.info/blog/2014/01/29/nadesiko2-make-plugin</id>
    <content type="html"><![CDATA[<p>なでしこ2でプラグインを作りたい人向けというニッチすぎるネタです。現在なでしこの時期バージョンなでしこ2が開発中です(えらい長いこと開発中です)が、構文の実装がある程度終わっているので、プラグインを開発することが出来ます。try catchの実装どうするかなーとか考えて進んでないですが、それはそれ。</p>

<p>なでしこ2はC#で組まれているので、プラグインもC#で組むことができます。</p>

<p>まずは準備として、なでしこ2のソースをsvnでチェックアウトします。 <a href="http://code.google.com/p/nadesiko2/source/checkout">URL</a></p>

<p>SharpDevelopで開発中なので、SharpDevelopでソリューションを開きます。で、中にNakoPluginXXXというプロジェクトがあるので、それを参考にすれば良いわけですが、軽く説明しておきます。</p>

<p>プラグインのソースは下のようになります。</p>

<p>```
/<em>
 * Created by SharpDevelop.
 * User: shigepon
 * Date: 2011/04/04
 * Time: 9:42
 *
 * To change this template use Tools | Options | Coding | Edit Standard Headers.
 </em>/
using System;
using System.Collections.Generic;
using System.Text;
using Libnako.JPNCompiler;
using NakoPlugin;
namespace NakoPluginSample{</p>

<pre><code>public class NakoPluginSample : INakoPlugin    {
string _description = &amp;quot;サンプルプラグイン&amp;quot;;
    double _version = 1.0;
    //&lt;del&gt; プラグイン共通の部分 &lt;/del&gt;
    public double TargetNakoVersion { get { return 2.0; } }
    public bool Used { get; set; }
    public string Name { get { return this.GetType().FullName; } }
    public double PluginVersion { get { return _version; } }
    public string Description { get { return _description; } }
    //&lt;del&gt; 関数の定義 &lt;/del&gt;
    public void DefineFunction(INakoPluginBank bank)        {
        bank.AddFunc({関数名}&amp;cedil; {なでしこ形式の引数}&amp;cedil; {戻り値の形式}&amp;cedil; {実際の呼び出し先}&amp;cedil;{関数の説明}&amp;cedil; {関数のよみかた});
    }
// プラグインの初期化処理
    public void PluginInit(INakoInterpreter runner)        {
    }
    // プラグインの終了処理
    public void PluginFin(INakoInterpreter runner)        {
    }
   public Object {実際の処理}(INakoFuncCallInfo info){
        ...
    }
}
</code></pre>

<p>}
```</p>

<!-- more -->


<p>実装時に大事なとこを説明します。</p>

<p>+まずプラグイン共通部分とPluginInit、PluginFinはコピペでもかまわないと思います。私もまだ初期処理、終了処理の必要なプラグインは作っていません。
+なでしこ上での関数呼び出し方法の定義はDefineFunctionで行います。bank.AddFuncメソッドで関数を追加できます。メソッド内の引数は下のように設定します。
++関数名はなでしこで呼び出す名前になります。（例：文字検索）なでしこで使う助詞を使わないとか、他の命令の名称とかぶらないなどの制限があります。
++なでしこ形式の引数は「SでAを」のようになでしこで一般的に使う形式で指定します。引数を参照渡しにしたい場合は「{参照渡し}SでAを」のように指定します。助詞を複数指定したい場合は「SでAを|Sが」という形式で指定します。参照渡しを使う場合は実装が少々複雑になります。後日やり方を書こうと思います。
++戻り値の形式はenum NakoVarTypeで指定します。(Void&cedil; Int&cedil; Double&cedil; String&cedil; Array)
++実際の呼び出し先はそのままメソッド名を指定します。(_hogeとか)
++関数の説明と関数のよみかたは分かりやすさの為に必要です。個人用なら適当でも良いと思います。（多分今後エディタとかそういうのにつかわれると思います）
+実際の処理は必ずINakoFuncCallInfo型のインスタンスを引数に取ります。なでしこで渡された引数はこのインスタンスから取得します。取得方法は以下</p>

<p><code>
long l = info.StackPopAsInt();
double d = info.StackPopAsDouble();
String s = info.StackPopAsString();
Object o = info.StackPop();//配列の場合はこれを使う
</code></p>

<p>StackPopメソッドで得られる値はNakoVariable型なので、ちょっと扱いが難しくなります。実際の処理の実装方法はまた今度</p>
]]></content>
  </entry>
  
</feed>
