<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: postgresql | shigeponが関心のある技術情報など]]></title>
  <link href="http://blog.shigepon.com/blog/categories/postgresql/atom.xml" rel="self"/>
  <link href="http://blog.shigepon.com/"/>
  <updated>2014-05-12T22:22:23+09:00</updated>
  <id>http://blog.shigepon.com/</id>
  <author>
    <name><![CDATA[shigepon]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[PostgreSQLメモ]]></title>
    <link href="http://blog.shigepon.com/blog/2014/01/28/postgresql/"/>
    <updated>2014-01-28T21:24:42+09:00</updated>
    <id>http://blog.shigepon.com/blog/2014/01/28/postgresql</id>
    <content type="html"><![CDATA[<p>rhaco2をPostgreSQL8.3で使えるように色々調べていくうちに学んだメモ。</p>

<h2>insert時に「デフォルト値を入れる」だけの処理をしたい場合</h2>

<p><code>sql
insert into テーブル名 default value;
</code></p>

<p>でOK</p>

<h2>integerのカラムとかにlikeを適用したい場合</h2>

<p><code>sql
select * from テーブル名 where id::text like &amp;#039;%abc%&amp;#039;;
</code></p>

<p>のようにカラムをテキストにキャストする。MySQLのvarcharをselectする時はデフォルトignore case。ついでにtrimも勝手にかける？らしい</p>

<h2>show column</h2>

<p>Mysqlで使えるshow columnは無いが、information_schemaの情報をselectすることで同じようなことが出来る。
ただし、create table時にserialで指定してもinformation_schema.columnsから取得できるカラム情報はinteger(int4)のみ。
なのでserialと判定するにはカラムがintegerであり、かつデフォルト値としてnextvalが指定されていることなど、複合的にチェックする必要がある。</p>

<h2>cronでsqlを実行</h2>

<p>毎日0時0分に実行する場合</p>

<p><code>
0 0 * * * /path/to/psql -U username -c "sql" database &gt; /dev/null
</code></p>

<h2>select結果でinsert, update</h2>

<p>insertの場合はinsert文の後でselect文を書く。以下は一例</p>

<p><code>sql
insert into table select a,b from table2 where a like 'hoge%';
</code></p>

<p>別テーブルへの一部データのバックアップ代わりにも使える</p>

<p><code>sql
insert into backup_table (select * from table where id=1);
</code></p>

<p>updateは次のように行う</p>

<p><code>sql
update table set a = t.a from (select * from table2) t where table.b = t.b;
</code></p>

<p>どの範囲のデータが更新されるかに注意してwhere句を使う。上の場合、tの中でwhere句を使う場合とで異なる結果になる場合がある。</p>

<h2>インデックス一覧を表示</h2>

<p>インデックス一覧を表示。インデックスを2重に登録しようとするとエラーが出るので、チェックに使う</p>

<p><code>sql
SELECT tablename, indexname FROM pg_indexes;
</code></p>

<h2>ビューの一覧を表示</h2>

<p><code>sql
SELECT viewname FROM pg_views ORDER BY viewname;
</code></p>

<h2>psqlで実行結果を見やすくする</h2>

<p><code>sql
psql =&gt; \x
psql =&gt; select * from table;
</code></p>

<p>カラムの数が多いと表示が崩れやすいので、これで見やすくなる</p>

<h2>カラム追加時にNOT NULLを指定する手順</h2>

<p><code>sql
ALTER TABLE table_name ADD COLUMN column_name text;
ALTER TABLE table_name ALTER COLUMN column_name SET DEFAULT '';
UPDATE table_name SET column_name = '';
ALTER TABLE table_name ALTER COLUMN column_name SET NOT NULL;
</code></p>

<p>こんな感じで複数業使ってNOT NULL制約を入れる</p>

<h2>テーブル（ビュー）のスキーマをファイルに書き込む</h2>

<p><code>sh
$ pg_dump -s -t table_name db_name &gt; file_name
</code></p>

<p>これだけ。反映したい時は</p>

<p><code>sh
$ cat file_name | psql db_name
</code>
でおk</p>

<h2>csvの取り込み</h2>

<p><code>
1,"hoge"
</code></p>

<p>みたいなデータを/path/to/csvに保存して</p>

<p><code>sql
copy tablename from '/path/to/csv' with csv;
</code></p>

<p>とpsql で実行すると取り込みできる。</p>

<p><code>sql
copy tablename (column1,column2) from '/path/to/csv' with csv;
</code></p>

<p>とやれば、カラム名と順序の指定が可能</p>
]]></content>
  </entry>
  
</feed>
