<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: PostgreSQL | shigeponが関心のある技術情報など]]></title>
  <link href="http://blog.shigepon.info/blog/categories/postgresql/atom.xml" rel="self"/>
  <link href="http://blog.shigepon.info/"/>
  <updated>2015-09-07T16:15:20+09:00</updated>
  <id>http://blog.shigepon.info/</id>
  <author>
    <name><![CDATA[shigepon]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Djangoで複数データベースを使用する]]></title>
    <link href="http://blog.shigepon.info/blog/2015/07/07/use-multiple-databases-in-django/"/>
    <updated>2015-07-07T12:33:37+09:00</updated>
    <id>http://blog.shigepon.info/blog/2015/07/07/use-multiple-databases-in-django</id>
    <content type="html"><![CDATA[<p>Djangoでは複数データベースを扱える。でも色々コーディングや設定が必要なのでメモしておく。参考：<a href="https://docs.djangoproject.com/en/1.7/topics/db/multi-db/">Multiple databases | Django documentation | Django</a>。対応バージョンはDjango 1.7。使ったデータベースはPostgreSQL。</p>

<h2>settings.py</h2>

<p>settings.pyで複数データベースの接続設定をする</p>

<p>```py settings.py
DATABASES = {</p>

<pre><code>'default': {
    'NAME': 'app_data',
    'ENGINE': 'django.db.backends.postgresql_psycopg2',
    'USER': 'postgres_user',
    'PASSWORD': 's3krit'
},
'users': {
    'NAME': 'user_data',
    'ENGINE': 'django.db.backends.mysql',
    'USER': 'mysql_user',
    'PASSWORD': 'priv4te'
}
</code></pre>

<p>}
```</p>

<p>参考ページのをそのまま使った。さらに追加も出来る。</p>

<h2>ここまでの設定でのマイグレーション</h2>

<p><code>sh
$ python manage.py migrate
</code></p>

<p>だとdefault設定のデータベースへのマイグレーション、</p>

<p><code>sh
$ python manage.py migrate --database=users
</code></p>

<p>とするとusersで設定したデータベースへのマイグレーションとなる。
何も設定していないと、それぞれのデータベースに全アプリケーションの全てのモデルが反映される。</p>

<h2>データベースに保存するアプリ、モデルを限定したい</h2>

<p>ルーティング設定をする。</p>

<p><code>py settings.py
DATABASE_ROUTERS = ['myproject.routers.Router']
</code></p>

<p>settings.pyはこんな感じ。んでmyprojectフォルダにrouters.pyを作成して例えばuserアプリのものだけusersデータベースを使うという設定の場合次のように書く</p>

<p>```py routers.py
class Router(object):</p>

<pre><code>def db_for_read(self, model, **hints):
    #ここでランダムに選択すると、dbの負荷分散っぽいことが出来る
    #例：return random.choice['default','users']
    if model._meta.app_label == "user":
        return "users"
    return "default"
def db_for_write(self, model, **hints):
    if model._meta.app_label == "user":
        return "users"
    return "default"
def allow_relation(self, obj1, obj2, **hints):
    #Trueはリレーションを認める、Falseは認めない、Noneはこのコードでは関知しないという意味
    return None
def allow_migrate(self, db, model):
    #userアプリの場合はusers設定のデータベースへmigrate。
    #他のアプリはusers以外のデータベースへmigrateする設定
    if model._meta.app_label == "user"
        return db == "users":
    else:
        return True
    return False
</code></pre>

<p>```</p>

<p>routers.pyをちゃんと書かないと、色々不具合が出る（例：管理用のモデルがmigrateできないとか）ので気をつけた方が良い。</p>

<p>上に紹介した参考ページには色々コードが書いてあるので、参考になる。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Django1.6.5でPostgreSQLとBootstrap使ったアプリを作ってみた(1):とりあえずDjangoプロジェクトとアプリを作ってみた]]></title>
    <link href="http://blog.shigepon.info/blog/2014/06/18/start-django-project/"/>
    <updated>2014-06-18T12:49:29+09:00</updated>
    <id>http://blog.shigepon.info/blog/2014/06/18/start-django-project</id>
    <content type="html"><![CDATA[<p>Djangoはプロジェクトを作っておいて、アプリ毎に細かく機能を分けて、プロジェクトで統合するみたいな形式を取るみたい。なのでまずはDjangoプロジェクトを作成</p>

<p><code>sh
$ django-admin.py startproject myproject
</code></p>

<p>とすると、カレントフォルダにmyprojectフォルダが出来る。ファイル構成を見ると、</p>

<p>```
myproject/
  manage.py
  myproject/</p>

<pre><code>__init__.py
settings.py
urls.py
wsgi.py
</code></pre>

<p>```</p>

<!-- more -->


<p>となっている。myprojectフォルダ内のファイルに共通設定を書くという感じになりそうだ。PostgreSQLに接続するので、settings.pyを修正</p>

<p>```py
DATABASES = {</p>

<pre><code>'default': {
'ENGINE': 'django.db.backends.postgresql_psycopg2',
'NAME': 'hoge',
'USER': 'username',
'PASSWORD': '******',
'HOST': 'hostname or ip',
'PORT': '5432',
}
</code></pre>

<p>```</p>

<p>あと、psycopg2をインストールしていないので</p>

<p><code>sh
$ sudo pip install psycopg2
</code></p>

<p>とやって</p>

<p><code>sh
$ cd myproject
$ python manage.py syncdb
</code></p>

<p>とやると、hogeに色々テーブルが出来る。INSTALLED_APPSに書いてあるアプリに関するテーブルみたい。初期状態では以下のアプリが入るみたい。</p>

<p><code>
django.contrib.admin - 管理用サイト
django.contrib.auth - 認証
django.contrib.contenttypes - ??
django.contrib.sessions - セッション管理
django.contrib.messages - ??
django.contrib.staticfile - 静的ファイル用アプリ
</code></p>

<p>テーブルは以下のものが作られた
<code>
auth_group
auth_group_permissions
auth_permission
auth_user
auth_user_groups
auth_user_user_permissions
django_admin_log
django_content_type
django_session
</code></p>

<p>あと上のコマンド実行時に、管理者ユーザー作るかどうか聞かれる。とりあえず作った。</p>

<p>DB設定済ませたので、おもむろにアプリ作成。Railsの時と同様に傍聴情報の出力をやってみるか。</p>

<p><code>sh
$ python manage.py startapp bocho
</code></p>

<p>を実行するとbochoフォルダが出来てその中に</p>

<p><code>
bocho/
  __init__.py
  admin.py
  models.py
  tests.py
  views.py
</code></p>

<p>が出来た。とりあえずここまで。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ubuntuでodbcを用いてpostgresqlにアクセスする]]></title>
    <link href="http://blog.shigepon.info/blog/2014/05/12/access-postgresql-through-odbc-ubuntu/"/>
    <updated>2014-05-12T22:11:33+09:00</updated>
    <id>http://blog.shigepon.info/blog/2014/05/12/access-postgresql-through-odbc-ubuntu</id>
    <content type="html"><![CDATA[<p>なでしこ2のテストのためにubuntuにodbcドライバをインストールしたりしたのでメモ</p>

<h2>odbcドライバのインストール</h2>

<p><code>sh
$ sudo aptitude install unixodbc, odbc-postgresql
$ sudo odbcinst -i -d -f /usr/share/psqlodbc/odbcinst.ini.template
$ sudo odbcinst -i -s -l  -n adyoung-pg -f /usr/share/doc/odbc-postgresql/examples/odbc.ini.template
$ vim /etc/odbc.ini
</code></p>

<p>odbc.iniにはサンプルの設定が入っているので、それを参考にしながら設定</p>

<!-- more -->


<h2>odbcアクセスしてみる</h2>

<p><code>sh
$ isql -v DSN (UID (PWD))
</code></p>

<p>でアクセスできる。あとはSQLを入力すれば結果を見たりできる。</p>

<h2>monoを使ってアクセスする場合</h2>

<p>monoというかなでしこ2でアクセスする場合に必要だった。libodbc.soが必要というエラーが出るのでunixodbc-devの追加インストールが必要。インストールすればエラー出ずに動くようになる。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rails4でPostgreSQLとBootstrap使ったアプリを作ってみた(4):ビューにBootstrapを使う]]></title>
    <link href="http://blog.shigepon.info/blog/2014/03/14/a-way-of-creating-rails-application4/"/>
    <updated>2014-03-14T09:10:41+09:00</updated>
    <id>http://blog.shigepon.info/blog/2014/03/14/a-way-of-creating-rails-application4</id>
    <content type="html"><![CDATA[<p>参考にした記事URL一覧</p>

<ul>
<li><a href="http://ubiqlog.com/archives/8749">Ruby on Rails 4.0正式リリースとBootstrapの正しい設定法 | ユービックログ研究所</a></li>
<li><a href="http://railscasts.com/episodes/328-twitter-bootstrap-basics?language=ja&amp;view=asciicast">#328 Twitter Bootstrap Basics &ndash; RailsCasts</a></li>
</ul>


<p>今回はそっけない表示画面をそれっぽくするためにビューにBootstrapを当てはめる。</p>

<p>Gemfileを編集</p>

<p><code>
+gem 'less-rails'
+gem 'twitter-bootstrap-rails'
+gem 'execjs'
-gem 'sass-rails'
</code></p>

<!-- more -->


<p>以下のコマンドを実行</p>

<p><code>sh
$ bundle install
$ rails g bootstrap:install
$ rails g bootstrap:layout application
</code></p>

<p>と実行したけど、最後のコマンドはビューを勝手に色々いじるので、しない方が良いかもしれない。上のコマンドを実行すると</p>

<p><code>
app/assets/javascripts/application.js
app/assets/javascripts/bootstrap.js.coffee
app/assets/stylesheets/application.css
app/assets/stylesheets/bootstrap_and_overrides.css.less
</code></p>

<p>が出来る。さて、この状態で出力を見ると、ページ上部がナビゲーションバーで隠れてしまった。
app/assets/stylesheets/bootstrap_and_overrides.css.lessを修正することで対処する</p>

<p>変更前</p>

<p><code>css
@import "twitter/bootstrap/bootstrap";
@import "twitter/bootstrap/responsive";
</code></p>

<p>変更後</p>

<p><code>css
@import "twitter/bootstrap/bootstrap";
body {padding-top:60px;}
@import "twitter/bootstrap/responsive";
</code></p>

<p>これでページが隠れなくなる。レイアウト変更にはapp/views/layouts/application.html.erbを編集する必要がある。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rails4でPostgreSQLとBootstrap使ったアプリを作ってみた(3):データ一覧ページを作って、詳細ページへのリンクを貼る]]></title>
    <link href="http://blog.shigepon.info/blog/2014/03/10/a-way-of-creating-rails-application3/"/>
    <updated>2014-03-10T18:10:41+09:00</updated>
    <id>http://blog.shigepon.info/blog/2014/03/10/a-way-of-creating-rails-application3</id>
    <content type="html"><![CDATA[<p>参考にした記事URL一覧</p>

<ul>
<li><a href="http://openbook4.me/projects/92">小学生でもわかるRuby on Rails入門 | OpenBook</a></li>
<li><a href="http://qiita.com/somewhatgood@github/items/9890e75b4c195d47715a">Rails &ndash; link_to の引数と展開の違いまとめ &ndash; Qiita</a></li>
</ul>


<p>前回に引き続き<a href="http://openbook4.me/projects/92">小学生でもわかるRuby on Rails入門 | OpenBook</a>を参考にしているが、色々すっとばして16章から適当に確認しながら適当に実装する。</p>

<h3>一覧表示</h3>

<p><code>rb
def index
  @events = Event.all
end
</code></p>

<!-- more -->


<p>と書くとテーブルにあるデータ全て取ってくるらしい（DAOで良くある書式）。
ビューでは@eventsに対してループさせる必要があるので次のような書式になる。
app/views/events/index.html.erbを次のように書き換える</p>

<p>```erb</p>

<h1>Events</h1>


<table class="table">
    <thead>
        <th>日時</th><th>イベント名</th>
    </thead>
    <% @events.each do |event| %>
        <tr>
            <td><%= event.date.strftime('%Y/%m/%d %H:%m') %></td>
            <td><%= event.name %></td>
        </tr>
    <% end %>
</table>


<p>```</p>

<p>[<a href="http://0.0.0.0:3000/events/index">http://0.0.0.0:3000/events/index</a>]にアクセスすれば一覧が表示される。どこかのページでeachでなくeach_with_indexという書き方してるページあったけど、Rails4では動かなかった。
バージョン違い？</p>

<h3>リンクを貼る</h3>

<p>一覧と詳細を繋げたいので、リンクを貼る。link_toというのを使うらしい。 <a href="http://qiita.com/somewhatgood@github/items/9890e75b4c195d47715a">Rails &ndash; link_to の引数と展開の違いまとめ &ndash; Qiita</a>の「基本」を使えば今回は十分。上のerbを次のように書き換える</p>

<p>```erb</p>

<h1>Events</h1>


<table class="table">
    <thead>
        <th>日時</th><th>イベント名</th><th>link</th>
    </thead>
    <% @events.each do |event| %>
        <tr>
            <td><%= event.date.strftime('%Y/%m/%d %H:%m') %></td>
            <td><%= event.name %></td>
            <td><%= link_to "詳細",:controller=>"events",:action=>"show",:eventid=>event.id %></td>
        </tr>
    <% end %>
</table>


<p>```</p>

<p>controllerはコントローラー、actionはビュー？かどうか分からないけど、コントローラー内で定義してるメソッド、あとパラメーター名（eventid）はconfig/routes.rbで指定したパラメーター名が使用出来る（と思う）。とりあえずこう作ったけど、最終的にハッシュにした方がいいんだろな。</p>

<h3>一覧の範囲を絞り込む</h3>

<p>テーブルのデータ全部でなく、一部のデータに絞り込んで表示してみる。
日付のデータがあるので、今月のデータに絞り込んでみる。app/controllers/events_controller.rbを編集</p>

<p>```rb
  def index</p>

<pre><code>  from = Time.now.at_beginning_of_month
  to = from+1.month
  @events = Event.all(:conditions=&gt;["date&gt;=? and date&lt;=?",from,to],:order=&gt;'date')
</code></pre>

<p>  end
```</p>

<p>ここらへんは<a href="http://waka.hatenablog.com/entry/2013/04/05/083349">ActiveRecordで日付の範囲指定 &ndash; yo_waka&rsquo;s blog</a>を参考にしながら適当に実装した。ActiveRecordは色んな表現方法があるのでどうしたもんかな。ただ、数字も何でもオブジェクトってのは面白い。</p>
]]></content>
  </entry>
  
</feed>
