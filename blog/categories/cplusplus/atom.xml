<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: CPlusPlus | shigeponが関心のある技術情報など]]></title>
  <link href="http://blog.shigepon.info/blog/categories/cplusplus/atom.xml" rel="self"/>
  <link href="http://blog.shigepon.info/"/>
  <updated>2015-05-13T12:44:52+09:00</updated>
  <id>http://blog.shigepon.info/</id>
  <author>
    <name><![CDATA[shigepon]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[C#で作ったdllをなでしこで使う]]></title>
    <link href="http://blog.shigepon.info/blog/2014/01/28/nadesiko-plugin-cs2/"/>
    <updated>2014-01-28T22:42:43+09:00</updated>
    <id>http://blog.shigepon.info/blog/2014/01/28/nadesiko-plugin-cs2</id>
    <content type="html"><![CDATA[<p>C#のdllを呼び出せるように、C#のdllを参照した後、Plugin.cppの一部を以下のように書き換えました</p>

<p>```
PHiValue __stdcall sample01(DWORD param) {</p>

<pre><code>PHiValue result;
ClassLibrary1::Class1::Method1();
result = nako_var_new(NULL);
hi_setStr(result&amp;cedil; &amp;quot;abc&amp;quot;&amp;cedil; sizeof(&amp;quot;abc&amp;quot;));
return result;
</code></pre>

<p>}
NAKO_API(void) ImportNakoFunction(void) {</p>

<pre><code>// ユーザー命令の追加
nako_addFunction(&amp;quot;sample01&amp;quot;&amp;cedil;&amp;quot;&amp;quot;&amp;cedil; sample01&amp;cedil; 0);
</code></pre>

<p>}
```</p>

<!-- more -->


<p>なでしこ側のソースは以下のようにして呼び出してみました</p>

<p><code>
結果=sample01
結果を言う
</code></p>

<p>これでダイアログボックスに「method1」が表示され、続いて「abc」が表示されればOKです。</p>

<p>しかし・・・結果は外部例外　E0434F4Dを出力してちゃんと動きませんでしたorz。この例外はtry&hellip;catchで掴もうとしても掴めません。どうも処理の関数（ここではsample01）に入った瞬間にエラーを返してしまうようです。ちなみにこのコードでググっても原因は理解できませんでした。ということで、クジラ飛行机氏（なでしこ作者）にメールで泣きつきました。</p>

<p>すると</p>

<blockquote><p>vnako.exe と同じフォルダに配置したらエラー出ませんでした。たぶん、plug-ins フォルダにパスを通さない限り、DLLがもう一方を参照できなくなるのだと思います。</p></blockquote>

<p>という返事が！まじで！？と思い試してみると・・・上手くいくじゃないですか！これでC#で作ったdllもなでしこで利用できるようになりました。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[C#で作ったdllをC++/CLIで使う]]></title>
    <link href="http://blog.shigepon.info/blog/2014/01/28/nadesiko-plugin-cs/"/>
    <updated>2014-01-28T22:27:58+09:00</updated>
    <id>http://blog.shigepon.info/blog/2014/01/28/nadesiko-plugin-cs</id>
    <content type="html"><![CDATA[<p><strong>画像やファイルが無くなっていますがご了承下さい</strong></p>

<p>なでしこでプラグインを作る時にC#を使いたかったので、本格的にdllを作る前に、C++/CLIからMessageBoxを表示する程度のC#のdllを呼び出してみました。</p>

<p>C#のdllコード</p>

<p>```
using System;
using System.Collections.Generic;
using System.Windows.Forms;
using System.Text;
namespace ClassLibrary1{</p>

<pre><code>public class Class1
{
    public static void Method1()
    {
        MessageBox.Show(&amp;quot;method1&amp;quot;);
    }
}
</code></pre>

<p>}
```</p>

<!-- more -->


<p>C++フォームアプリケーション</p>

<p>C#で作ったdllの参照とかフォームの構成とか画像が消えちゃったので適当に想像してください。
用はC++のアプリケーションでC#のdllを参照します。</p>

<p>ボタンクリック時のコード</p>

<p>```</p>

<pre><code>private: System::Void button1_Click(System::Object^  sender&amp;cedil; System::EventArgs^  e) {
     try{
        ClassLibrary1::Class1::Method1();
     }catch(Exception^ e){
        System::Windows::Forms::MessageBox::Show(e-&amp;gt;Message);
     }
 }
</code></pre>

<p>```</p>

<p>で動かしてみるときちんと動かせました。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[C++/CLIでなでしこのプラグインを作る方法(Visual C++ Express Edition)]]></title>
    <link href="http://blog.shigepon.info/blog/2014/01/28/nadesiko-plugin/"/>
    <updated>2014-01-28T21:45:15+09:00</updated>
    <id>http://blog.shigepon.info/blog/2014/01/28/nadesiko-plugin</id>
    <content type="html"><![CDATA[<p>なでしこでプラグインを作る時にC#を使いたかったので、その前段階としてC++/CLIでプラグインを作る方法を探ってみました。</p>

<p>C++/CLIが使えると、.Netを使えるようになり、C#で作ったdllもVC++の参照設定から読み込んで使えるようになります。</p>

<p>なでしこにはC++でプラグイン開発するためのsdkがあります。</p>

<p>ただし、VC++で使用するには<a href="http://www.himanavi.net/cgi/nade-bbs2/cbbs.cgi?mode=one&amp;number=7462&amp;type=7446&amp;space=60&amp;no=0">なでしこ質問掲示板</a>にあるような設定をしなければいけません。（以下引用）</p>

<ol>
<li>Win32プロジェクトを作成</li>
<li>plugins_sdk_cからソースを追加</li>
<li>dnako_import.defを作成</li>
<li>すべての構成でプロジェクトのプロパティを修正　全般→文字セットを「マルチ バイト文字セットを使用する」に変更　リンカ→入力→モジュール定義ファイルに「dnako_import.def」と入力</li>
<li>ビルド</li>
</ol>


<!-- more -->


<p>dnako_import.defは以下</p>

<p><code>
EXPORTS
ImportNakoFunction
PluginInfo
PluginVersion
PluginRequire
PluginInit
PluginFin
</code></p>

<p>実際こちらで試した場合は他にも4の箇所で</p>

<p>全般→共通言語ランタイムサポートを「共通言語ランタイムサポートを使用しない」に
C/C++→プリコンパイル済みヘッダー→プリコンパイル済みヘッダーの作成/使用を「プリコンパイル済みヘッダーを使用しない」に</p>

<p>変更が必要でした。</p>

<p>ただし、この方法だとC++/CLIを使えないので、.Netを使うことは出来ません。そこで、次のように変更しました。</p>

<p>+sdkに含まれる.cファイルを全て.cppに変更
+dnako_import\let.h内にある各GetProcAddressの第一引数hDllをstatic_castでHMODULE型にキャスト</p>

<p>すると問題なくビルドが通り、.Netを使用することが出来ました。と言ってもMessageBoxを試した程度ですが。</p>
]]></content>
  </entry>
  
</feed>
