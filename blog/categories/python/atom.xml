<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Python | shigeponが関心のある技術情報など]]></title>
  <link href="http://blog.shigepon.com/blog/categories/python/atom.xml" rel="self"/>
  <link href="http://blog.shigepon.com/"/>
  <updated>2014-11-27T13:22:21+09:00</updated>
  <id>http://blog.shigepon.com/</id>
  <author>
    <name><![CDATA[shigepon]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[djangoで国際化やってみた]]></title>
    <link href="http://blog.shigepon.com/blog/2014/11/27/django-locale/"/>
    <updated>2014-11-27T13:02:12+09:00</updated>
    <id>http://blog.shigepon.com/blog/2014/11/27/django-locale</id>
    <content type="html"><![CDATA[<p>Djangoで他の人が作ったモジュールを使ってると、英語のメッセージが入ってることがあるので、日本語化してみた。とりあえず英語のメッセージを日本語に変換するとこまで。</p>

<h2>準備</h2>

<p>gettextが無かったらインストール。Ubuntuの場合</p>

<p><code>sh
$ sudo aptitude install gettext
</code></p>

<p>プロジェクトにlocaleフォルダを作る。無いと後のコマンドでエラーが出た</p>

<h2>poファイル作成</h2>

<p>おもむろにpoファイルを作るコマンドを実行</p>

<p><code>sh
django-admin.py makemessages -l ja
</code></p>

<p>するとpath/to/locale/ja/LC_MESSAGES/django.poってファイルが出来るので、それを修正していく。ただ、このコマンドプロジェクト内だけ捜査してファイルを作るみたいで、外部モジュールの場合、上手く読み取ってくれなかった。</p>

<p>今回はvirtualenvでpipしたdjango-allauthのテンプレートを日本語化したかったので、path/to/virtualenv/dir/lib/python2.7/site-packages/allauth/templates/account/内のファイルを全部path/to/project/templates/account/にコピーしてからコマンド実行すると上手く読み取ってくれた。</p>

<h2>翻訳</h2>

<p>出来たpoファイルを編集すればオッケー。ファイル内でmsgid以下に書いてあるのが元の文、その次のmsgstr以下に文章書くと、翻訳文になる。元の英文に何かパラメーター付いてる場合は必ずパラメーターを翻訳文に設定しないとエラーが出る。</p>

<p>```py 例</p>

<h1>: path/to/python/module.py:23</h1>

<p>msgid &ldquo;Welcome to my site.&rdquo;
msgstr &ldquo;いらっしゃーい&rdquo;
```</p>

<h2>moファイル作成</h2>

<p>おもむろにコマンドを実行するとmoファイルが出来る</p>

<p><code>sh
django-admin.py compilemessages
</code></p>

<h2>settings.pyの設定</h2>

<p>これだけで動くと思ったら動かなかったので色々調べてみたらLOCALE_PATHSを設定しないといけなかった。</p>

<p>```py settings.py
LOCALE_PATHS = (</p>

<pre><code>"path/to/locale",
</code></pre>

<p>)
```</p>

<p>これ設定しておいたらちゃんと動いた。</p>

<p>あとは普通にrunserverとかでサーバ起動したら翻訳されてる</p>

<p>参考：<a href="http://docs.djangoproject.jp/en/latest/topics/i18n/translation.html">翻訳 — Django 1.4 documentation</a></p>

<p>翻訳したい文字列をマークする方法とかはリンク見れば分かる。あと、使いたい言語を選択出来るようにするとかそういう場合はLocaleMiddlewareを使うとかなんとかあるみたいだけどやってない。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[django-allauthを使ってみた]]></title>
    <link href="http://blog.shigepon.com/blog/2014/11/25/use-django-allauth/"/>
    <updated>2014-11-25T14:55:16+09:00</updated>
    <id>http://blog.shigepon.com/blog/2014/11/25/use-django-allauth</id>
    <content type="html"><![CDATA[<p>ソーシャルログインだけでなく、通常のログインもやりたかったので、django-allauthを試してみた。</p>

<h2>インストール</h2>

<p>pipで</p>

<p><code>sh
pip install django-allauth
</code></p>

<h2>ファイルでの設定</h2>

<p>settings.pyとurls.pyを設定</p>

<p>```py settings.py
INSTALLED_APPS = (
&hellip;</p>

<pre><code>'allauth',
'allauth.account',
'allauth.socialaccount',
'allauth.socialaccount.providers.twitter', #例としてTwitter
</code></pre>

<p>)
AUTHENTICATION_BACKENDS = (
&hellip;</p>

<pre><code>'allauth.account.auth_backends.AuthenticationBackend',
</code></pre>

<p>)
TEMPLATE_CONTEXT_PROCESSORS = (
&hellip;</p>

<pre><code>"django.core.context_processors.request",
"django.contrib.auth.context_processors.auth",
"allauth.account.context_processors.account",
"allauth.socialaccount.context_processors.socialaccount",
</code></pre>

<p>)
SITE_ID = 1
```</p>

<p>`&ldquo;py urls.py
urlpatterns = patterns(&rdquo;,</p>

<pre><code>...
url('^accounts/', include('allauth.urls')),
url('^accounts/profile/?', include('profile.urls',namespace='profile')), #ログイン後のリダイレクト先
</code></pre>

<p>)
```</p>

<h2>adminページでの設定</h2>

<p>ソーシャルログインする場合のみ必要。 <a href="http://domain/admin/">http://domain/admin/</a> にアクセスして管理者ログインしてSocial applicationを追加する。
フォーム内では名前を適当に付けて、Twitterの場合Client idにConsumer keyを登録して、Secret keyにConsumer secretを登録すればおk
最後に、利用可能サイトから一番上のサイト(SITE_ID=1と指定してるので)を選択するとおk</p>

<p><a href="http://domain/accounts">http://domain/accounts</a> にアクセスすればログインフォームが出てくる。出来た。</p>

<h2>テンプレートを上書きする</h2>

<p>プロジェクトディレクトリ/templates/account以下にファイルを設定すればおk
例えばログインのテンプレートなら、login.htmlを設置すればおk</p>

<p>元のファイルはgithubを見れば分かる</p>

<h2>使える機能</h2>

<p><a href="https://github.com/pennersr/django-allauth/blob/master/allauth/account/urls.py">githubのコード</a>
見れば大体分かる感じ</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Django Memo]]></title>
    <link href="http://blog.shigepon.com/blog/2014/11/23/django-memo/"/>
    <updated>2014-11-23T22:35:38+09:00</updated>
    <id>http://blog.shigepon.com/blog/2014/11/23/django-memo</id>
    <content type="html"><![CDATA[<p>Djangoやってて忘れっぽいところとかをメモ</p>

<h2>リクエストパラメーターをモデルに入れる</h2>

<p>```py views.py
def a_view(request):</p>

<pre><code>hoge = Fuga(request.GET) #新たにインスタンス作る場合
fuga = Fuga.objects.get(pk=1)
hage = Fuga(request.GET,instance=fuga) #既にあるインスタンスに入れる場合
</code></pre>

<p>```</p>

<p>instance=xxxとやるのを何度か忘れた＞＜</p>

<h2>forms.DateFieldでISO-8601フォーマットの入力を受入れる</h2>

<p>html5でdatetime-localとか扱おうとすると、入力値がISO-8601形式になって、そのままだとDateFieldが入力をdatetimeの正しい形式として認識してくれない。</p>

<p>で、input_formatsを設定するといけるらしいんだけど、あまりマニュアルでちゃんと説明してない。Stack Overflowの情報とかをググると設定方法が間違ってるコードとかあって、正しいのが良く分からない。で、結局色々調べたら</p>

<p><code>py models.py
date = forms.DateField(input_formats=('%Y-%m-%dT%H:%M:%S',))
</code></p>

<p>とタプルで渡す必要があるらしい</p>

<p>参考：<a href="http://labs.uechoco.com/blog/2011/08/django-dateform-inputs_format-wrong.html">うえちょこ＠ぼろぐ» [Django]forms.DateFieldのinputs_formatではまった</a></p>

<h2>ModelForm使ってフォーム出力する時にrequeied属性をテンプレートで参照するとか</h2>

<p><code>py models.py
hoge = forms.CharField(max_length=100,widget=TextInput(attrs={"required":"true"}))↲
</code></p>

<p>こんな感じで定義したフィールドの属性取ってきたい場合、</p>

<p><code>html
\{\% for field in form \%\}
  \{\% if field.field.required \%\}&lt;p&gt;必須&lt;/p&gt;\{\% endif \%\}
\{\% endfor \%\}
</code></p>

<p>適当だけど、こんな感じでアクセスできる。</p>

<h2>DjangoでGroup By</h2>

<p>DjangoでGroup Byして何個かのフィールドのデータで例えば、日付とその日に登録したデータの件数だけ欲しい時</p>

<p>```py views.py
q = Hoge.objects.filter(date<strong>gte = date).filter(date</strong>lt = dto).extra({&lsquo;date&rsquo;:&ldquo;date_trunc(&lsquo;day&rsquo;,date)&rdquo;})
q.query.group_by = [&lsquo;date&rsquo;]
values = q.values(&lsquo;date&rsquo;).order_by().annotate(c = Count(&lsquo;id&rsquo;))</p>

<p>こんな感じでいける。ちなみにPostgreSQL。dateが時間の情報も持っているのでPostgreSQLのdate_trunc関数を使ってdateを日付の情報だけにしてから、group_byする。
annotateは集計した値を新しいフィールド（ここだとc）に入れる。
例えばvalues[0].cでアクセスできる。このコードで、日付とその日に登録したデータ件数が入った辞書のリストを得ることが出来る
```</p>

<h2>QuerySetで吐いたクエリを出力</h2>

<p><code>py views.py
h = Hoge.objects.all()
print h.query
</code></p>

<p>でおk。でもクエリが例外出す時には出せないような・・・</p>

<p>参考：<a href="http://programmer-jobs.blogspot.jp/2013/01/djangosql.html">Djangoで、デバック用のSQLクエリの表示 一言多いプログラマーの独り言</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[DjangoでDateTimeField received a naive datetimeってWarningが出た]]></title>
    <link href="http://blog.shigepon.com/blog/2014/11/22/django-datetimefield-received-a-naive-datetime/"/>
    <updated>2014-11-22T16:19:11+09:00</updated>
    <id>http://blog.shigepon.com/blog/2014/11/22/django-datetimefield-received-a-naive-datetime</id>
    <content type="html"><![CDATA[<p><code>sh
RuntimeWarning: DateTimeField received a naive datetime
</code></p>

<p>ってWarningが出るのに対する対処</p>

<p><code>py settings.py
USE_TZ = False
</code></p>

<p>を書けばおk。要はタイムゾーン入れてくれってエラーなので、そんなものはない！と指定すればいいっぽい</p>

<p>参考：<a href="http://stackoverflow.com/questions/18622007/runtimewarning-datetimefield-received-a-naive-datetime">django &ndash; RuntimeWarning: DateTimeField received a naive datetime &ndash; Stack Overflow</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Titanium MobileとDjangoでAjax認証を行う]]></title>
    <link href="http://blog.shigepon.com/blog/2014/11/20/titanium-ajax-post-to-django/"/>
    <updated>2014-11-20T09:42:26+09:00</updated>
    <id>http://blog.shigepon.com/blog/2014/11/20/titanium-ajax-post-to-django</id>
    <content type="html"><![CDATA[<p>最近Titanium Mobile使ってスマホアプリを作ろうかなと思って色々試してるんだけど、ログイン認証する時にはまったので、メモ</p>

<p>参考<a href="http://stackoverflow.com/questions/26022797/in-appcelerator-titanium-how-can-i-get-djangos-csrf-token">In Appcelerator Titanium, how can I get Django&rsquo;s CSRF token?(Stack Overflow)</a></p>

<h2>Titanium MobileでのPOST</h2>

<p>HTTPClientを使って、例えば次のように書く。UIの設計部分とかそんなのは省略。</p>

<p>```sh</p>

<pre><code>var client = Ti.Network.createHTTPClient({
    onerror: function(e){
        Ti.API.debug(e.error);
        alert('error');
    },
    onload: function(e){
        var item = JSON.parse(this.responseText);
        if(item.status==1){//例としてstatusを返すという設定にしているのでこんな感じにしてる
            alert('ログインしました');
        }else{
            alert('ログイン失敗しました');
        }
    }
});
client.open('POST','http://url/to/login');
client.send({username:'hoge',password:'fuga'});
</code></pre>

<p>```</p>

<h2>Djangoでのユーザー認証</h2>

<p>Djangoでユーザー認証しようとすると例えばこんな感じ(viewだけ)
REST API作るために、<a href="http://www.django-rest-framework.org/">Django REST framework</a>を使ってるので、そのままコピペしても使えないけど、@部分を消して、Responseとなっている箇所を自力でJSON出力すれば良いと思う。Django REST frameworkについてはどっかで書く。</p>

<p>```py views.py
from rest_framework import viewsets↲
from rest_framework.response import Response↲
from rest_framework.decorators import api_view
from django.contrib.auth import login,authenticate</p>

<p>@api_view([&lsquo;GET&rsquo;,&lsquo;POST&rsquo;])
def do_login(request):↲                                               <br/>
 status = 0↲                                  <br/>
 if request.user.is_authenticated():↲</p>

<pre><code> status = 1↲                                                  
</code></pre>

<p> else:↲</p>

<pre><code> if request.method == 'POST':↲                                 
     username = request.POST['username']↲                          
     password = request.POST['password']↲                      
     user = authenticate(username=username,password=password)↲     
     if user is not None:↲                                     
         status = 1↲                                      
         login(request,user)↲                       
 else:↲                                                      
     return Response({"status":status})↲                 
</code></pre>

<p> return Response({&ldquo;status&rdquo;:status})↲                               <br/>
↲</p>

<p>で、実際やってみるとレスポンスはこんな感じになる</p>

<p>```js
{</p>

<pre><code>"detail": "CSRF Failed: CSRF token missing or incorrect."
</code></pre>

<p>}
```</p>

<p>そういえばDjangoでCSRF対策してるんだった。</p>

<p><code>py settings.py
</code>
MIDDLEWARE_CLASSES = (
&hellip;.</p>

<pre><code>'django.middleware.csrf.CsrfViewMiddleware',
</code></pre>

<p>&hellip;.
)
```</p>

<p>ajaxでやり取りする部分だけ、MIDDLEWARE_CLASSESから削除するって手もあるけど、<a href="http://docs.djangoproject.jp/en/latest/ref/contrib/csrf.html">Django APIリファレンス</a>に書いてあるようにX-CSRFToken という独自ヘッダーに CSRF トークンの 値を設定するという対処をやってみた。</p>

<p>```js
function getCRSF(){</p>

<pre><code>var xhr = Ti.Network.createHTTPClient({
    onload: function(e){
        var item = JSON.parse(this.responseText);
        Ti.App.Properties.setString("csrf", item.csrf);
    }
});
xhr.open('GET','http://url/to/login');
xhr.send();
</code></pre>

<p>}
```</p>

<p>これを書いて、getCRSFを先にどこかで実行しておいて
実際のリクエストはさっきのコードをこんな感じで修正する</p>

<p> ```js</p>

<pre><code>client.open('POST','http://url/to/login');
client.setRequestHeader('X-CSRFToken', Ti.App.Properties.getString("csrf"));//これを追加

client.send({username:'hoge',password:'fuga'});
</code></pre>

<p>```</p>

<p>Django側のコードはGETの時にcsrfのトークンを戻すように書き換える</p>

<p> ```py views.py
from django.core.context_processors import csrf #を追加</p>

<h1>上のviews.pyの14行目をこんな感じで修正</h1>

<p>return Response({&ldquo;status&rdquo;:status,&ldquo;csrf&rdquo;:csrf(request)[&lsquo;csrf_token&rsquo;]})↲</p>

<p>これでいけたみたい。</p>
]]></content>
  </entry>
  
</feed>
