<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Python | shigeponが関心のある技術情報など]]></title>
  <link href="http://blog.shigepon.com/blog/categories/python/atom.xml" rel="self"/>
  <link href="http://blog.shigepon.com/"/>
  <updated>2014-11-23T23:35:50+09:00</updated>
  <id>http://blog.shigepon.com/</id>
  <author>
    <name><![CDATA[shigepon]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Django Memo]]></title>
    <link href="http://blog.shigepon.com/blog/2014/11/23/django-memo/"/>
    <updated>2014-11-23T22:35:38+09:00</updated>
    <id>http://blog.shigepon.com/blog/2014/11/23/django-memo</id>
    <content type="html"><![CDATA[<p>Djangoやってて忘れっぽいところとかをメモ</p>

<h2>リクエストパラメーターをモデルに入れる</h2>

<p>```py views.py
def a_view(request):</p>

<pre><code>hoge = Fuga(request.GET) #新たにインスタンス作る場合
fuga = Fuga.objects.get(pk=1)
hage = Fuga(request.GET,instance=fuga) #既にあるインスタンスに入れる場合```
</code></pre>

<p>instance=xxxとやるのを何度か忘れた＞＜</p>

<h2>forms.DateFieldでISO-8601フォーマットの入力を受入れる</h2>

<p>html5でdatetime-localとか扱おうとすると、入力値がISO-8601形式になって、そのままだとDateFieldが入力をdatetimeの正しい形式として認識してくれない。</p>

<p>で、input_formatsを設定するといけるらしいんだけど、あまりマニュアルでちゃんと説明してない。Stack Overflowの情報とかをググると設定方法が間違ってるコードとかあって、正しいのが良く分からない。で、結局色々調べたら</p>

<p><code>py models.py
date = forms.DateField(input_formats=('%Y-%m-%dT%H:%M:%S',))
</code></p>

<p>とタプルで渡す必要があるらしい</p>

<p>参考：<a href="http://labs.uechoco.com/blog/2011/08/django-dateform-inputs_format-wrong.html">うえちょこ＠ぼろぐ» [Django]forms.DateFieldのinputs_formatではまった</a></p>

<h2>ModelForm使ってフォーム出力する時にrequeied属性をテンプレートで参照するとか</h2>

<p><code>py models.py
hoge = forms.CharField(max_length=100,widget=TextInput(attrs={"required":"true"}))↲
</code></p>

<p>こんな感じで定義したフィールドの属性取ってきたい場合、</p>

<p><code>html

</code></p>

<p>適当だけど、こんな感じでアクセスできる。</p>

<h2>DjangoでGroup By</h2>

<p>DjangoでGroup Byして何個かのフィールドのデータで例えば、日付とその日に登録したデータの件数だけ欲しい時</p>

<p>```py views.py
q = Hoge.objects.filter(date<strong>gte = date).filter(date</strong>lt = dto).extra({&lsquo;date&rsquo;:&ldquo;date_trunc(&lsquo;day&rsquo;,date)&rdquo;})
q.query.group_by = [&lsquo;date&rsquo;]
values = q.values(&lsquo;date&rsquo;).order_by().annotate(c = Count(&lsquo;id&rsquo;))</p>

<p>こんな感じでいける。ちなみにPostgreSQL。dateが時間の情報も持っているのでPostgreSQLのdate_trunc関数を使ってdateを日付の情報だけにしてから、group_byする。
annotateは集計した値を新しいフィールド（ここだとc）に入れる。
例えばvalues[0].cでアクセスできる。このコードで、日付とその日に登録したデータ件数が入った辞書のリストを得ることが出来る
```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[DjangoでDateTimeField received a naive datetimeってWarningが出た]]></title>
    <link href="http://blog.shigepon.com/blog/2014/11/22/django-datetimefield-received-a-naive-datetime/"/>
    <updated>2014-11-22T16:19:11+09:00</updated>
    <id>http://blog.shigepon.com/blog/2014/11/22/django-datetimefield-received-a-naive-datetime</id>
    <content type="html"><![CDATA[<p><code>sh
RuntimeWarning: DateTimeField received a naive datetime
</code></p>

<p>ってWarningが出るのに対する対処</p>

<p><code>py settings.py
USE_TZ = False
</code></p>

<p>を書けばおk。要はタイムゾーン入れてくれってエラーなので、そんなものはない！と指定すればいいっぽい</p>

<p>参考：<a href="http://stackoverflow.com/questions/18622007/runtimewarning-datetimefield-received-a-naive-datetime">django &ndash; RuntimeWarning: DateTimeField received a naive datetime &ndash; Stack Overflow</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Titanium MobileとDjangoでAjax認証を行う]]></title>
    <link href="http://blog.shigepon.com/blog/2014/11/20/titanium-ajax-post-to-django/"/>
    <updated>2014-11-20T09:42:26+09:00</updated>
    <id>http://blog.shigepon.com/blog/2014/11/20/titanium-ajax-post-to-django</id>
    <content type="html"><![CDATA[<p>最近Titanium Mobile使ってスマホアプリを作ろうかなと思って色々試してるんだけど、ログイン認証する時にはまったので、メモ</p>

<p>参考<a href="http://stackoverflow.com/questions/26022797/in-appcelerator-titanium-how-can-i-get-djangos-csrf-token">In Appcelerator Titanium, how can I get Django&rsquo;s CSRF token?(Stack Overflow)</a></p>

<h2>Titanium MobileでのPOST</h2>

<p>HTTPClientを使って、例えば次のように書く。UIの設計部分とかそんなのは省略。</p>

<p>```sh</p>

<pre><code>var client = Ti.Network.createHTTPClient({
    onerror: function(e){
        Ti.API.debug(e.error);
        alert('error');
    },
    onload: function(e){
        var item = JSON.parse(this.responseText);
        if(item.status==1){//例としてstatusを返すという設定にしているのでこんな感じにしてる
            alert('ログインしました');
        }else{
            alert('ログイン失敗しました');
        }
    }
});
client.open('POST','http://url/to/login');
client.send({username:'hoge',password:'fuga'});
</code></pre>

<p>```</p>

<h2>Djangoでのユーザー認証</h2>

<p>Djangoでユーザー認証しようとすると例えばこんな感じ(viewだけ)
REST API作るために、<a href="http://www.django-rest-framework.org/">Django REST framework</a>を使ってるので、そのままコピペしても使えないけど、@部分を消して、Responseとなっている箇所を自力でJSON出力すれば良いと思う。Django REST frameworkについてはどっかで書く。</p>

<p>```py views.py
from rest_framework import viewsets↲
from rest_framework.response import Response↲
from rest_framework.decorators import api_view
from django.contrib.auth import login,authenticate</p>

<p>@api_view([&lsquo;GET&rsquo;,&lsquo;POST&rsquo;])
def do_login(request):↲                                               <br/>
 status = 0↲                                  <br/>
 if request.user.is_authenticated():↲</p>

<pre><code> status = 1↲                                                  
</code></pre>

<p> else:↲</p>

<pre><code> if request.method == 'POST':↲                                 
     username = request.POST['username']↲                          
     password = request.POST['password']↲                      
     user = authenticate(username=username,password=password)↲     
     if user is not None:↲                                     
         status = 1↲                                      
         login(request,user)↲                       
 else:↲                                                      
     return Response({"status":status})↲                 
</code></pre>

<p> return Response({&ldquo;status&rdquo;:status})↲                               <br/>
↲</p>

<p>で、実際やってみるとレスポンスはこんな感じになる</p>

<p>```js
{</p>

<pre><code>"detail": "CSRF Failed: CSRF token missing or incorrect."
</code></pre>

<p>}
```</p>

<p>そういえばDjangoでCSRF対策してるんだった。</p>

<p><code>py settings.py
</code>
MIDDLEWARE_CLASSES = (
&hellip;.</p>

<pre><code>'django.middleware.csrf.CsrfViewMiddleware',
</code></pre>

<p>&hellip;.
)
```</p>

<p>ajaxでやり取りする部分だけ、MIDDLEWARE_CLASSESから削除するって手もあるけど、<a href="http://docs.djangoproject.jp/en/latest/ref/contrib/csrf.html">Django APIリファレンス</a>に書いてあるようにX-CSRFToken という独自ヘッダーに CSRF トークンの 値を設定するという対処をやってみた。</p>

<p>```js
function getCRSF(){</p>

<pre><code>var xhr = Ti.Network.createHTTPClient({
    onload: function(e){
        var item = JSON.parse(this.responseText);
        Ti.App.Properties.setString("csrf", item.csrf);
    }
});
xhr.open('GET','http://url/to/login');
xhr.send();
</code></pre>

<p>}
```</p>

<p>これを書いて、getCRSFを先にどこかで実行しておいて
実際のリクエストはさっきのコードをこんな感じで修正する</p>

<p> ```js</p>

<pre><code>client.open('POST','http://url/to/login');
client.setRequestHeader('X-CSRFToken', Ti.App.Properties.getString("csrf"));//これを追加

client.send({username:'hoge',password:'fuga'});
</code></pre>

<p>```</p>

<p>Django側のコードはGETの時にcsrfのトークンを戻すように書き換える</p>

<p> ```py views.py
from django.core.context_processors import csrf #を追加</p>

<h1>上のviews.pyの14行目をこんな感じで修正</h1>

<p>return Response({&ldquo;status&rdquo;:status,&ldquo;csrf&rdquo;:csrf(request)[&lsquo;csrf_token&rsquo;]})↲</p>

<p>これでいけたみたい。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Django1.6.5でPostgreSQLとBootstrap使ったアプリを作ってみた(4):djangoで作ったプロジェクトをnginx+uwsgiで使って公開する]]></title>
    <link href="http://blog.shigepon.com/blog/2014/11/04/use-django-with-uwsgi/"/>
    <updated>2014-11-04T21:33:54+09:00</updated>
    <id>http://blog.shigepon.com/blog/2014/11/04/use-django-with-uwsgi</id>
    <content type="html"><![CDATA[<p>nginxのインストールは省略。ubuntuならaptitudeでインストールすればいい。デフォルトはちょっと古いけど。
djangoで作ったmysiteプロジェクトを/path/to/mysiteに置いているという前提。</p>

<h2>uwsgiをインストール</h2>

<p>全てvirtualenv上で行うとよさげ。
<a href="http://docs.djangoproject.jp/en/latest/howto/deployment/wsgi/uwsgi.html">uWSGI で Django を使う方法 — Django 1.4 documentation</a>ほぼそのまま</p>

<p><code>sh
$ source path/to/virtualenv/bin/activate
$(virtualenv) pip install uwsgi
</code></p>

<h2>uwsgi.iniを作る</h2>

<p>djangoのプロジェクトを/path/to/mysiteに置いた場合の設定。pidfile,daemonizeはプロジェクト毎に適当に設定。</p>

<p><code>ini uwsgi.ini
[uwsgi]
chdir=/path/to/mysite
module='mysite.wsgi:application'
master=True
pidfile=/tmp/project-master.pid
vacuum=True
max-requests=5000
daemonize=/var/log/uwsgi/mysite.log
socket=127.0.0.1:1234 #適当なポート
env= DJANGO_SETTINGS_MODULE=mysite.settings
</code></p>

<p>virtualenvで使う場合、sudoを使わないでuwsgiを起動するので、/var/log/uwsgi/yourproject.logの権限に注意する。
uwsgiの起動や終了のコマンドは以下の通り</p>

<p><code>sh
起動
$ uwsgi --ini uwsgi.ini
再起動
$ uwsgi --reload /tmp/project-master.pid
終了
$ uwsgi --stop /tmp/project-master.pid
</code></p>

<h2>nginxの設定</h2>

<p><a href="http://uwsgi-docs.readthedocs.org/en/latest/tutorials/Django_and_nginx.html">Setting up Django and your web server with uWSGI and nginx — uWSGI 2.0 documentation</a>を参考にした。</p>

<h3>uwsgi_params</h3>

<p>uwsgi_paramsは/etc/nginx/uwsgi_paramsに入ってるけど、修正する可能性もあるので、/path/to/mysite/uwsgi_paramsにコピーして、それを修正する。</p>

<h3>nginx.conf</h3>

<p>```
upstream django {</p>

<pre><code>server 127.0.0.1:1234; #uwsgi.iniで設定したポート番号
</code></pre>

<p>}</p>

<p>server {</p>

<pre><code>server_name hoge.example.com; # substitute your machine's IP address or FQDN
    charset     utf-8;
</code></pre>

<h1>max upload size</h1>

<pre><code>client_max_body_size 75M;   # adjust to taste
</code></pre>

<h1>Django media</h1>

<h1>Finally, send all non-media requests to the Django server.</h1>

<pre><code>location / {
    uwsgi_pass  django;
    include     /path/to/mysite/uwsgi_params; # the uwsgi_params file you installed
}
</code></pre>

<p>}
```</p>

<p>これを作成して、/etc/nginx/sites-enabledへシンボリックリンクを貼っておけば良い</p>

<p><code>sh
$ service nginx restart #reloadでもいい？
</code></p>

<p>でWebアクセスできるようになる。はず。</p>

<h2>静的ファイルの設定手順</h2>

<p>nginx+uwsgiでプロジェクトを公開した場合、manage.py runserverの場合と違い、静的ファイルの置場を設定しないといけないっぽい</p>

<p><code>
location ~ ^/static/ {
root /path/to/mysite;
break;
}
</code></p>

<p>settings.pyにSTATIC_URL, STATIC_ROOTを追加</p>

<p><code>py settings.py
STATIC_URL = '/static/'
STATIC_ROOT = "/path/to/mysite/static"
</code></p>

<p>テンプレでは次のように静的ファイルにアクセスする</p>

<p>```html</p>

<script type="text/javascript" src="js/hoge.js"></script>


<p>```</p>

<p>この設定だけでは静的ファイルが/path/to/mysite/staticに入ってないので、collectstaticコマンドを使ってファイルを集める</p>

<p><code>sh
$ python manage.py collectstatic
</code></p>

<p>これで各アプリに入ってる静的ファイルとadmin関連の静的ファイル全て持って来てくれる</p>

<h2>設定反映</h2>

<p><code>sh
$ sudo service nginx reload #ubuntuの場合
</code></p>

<h2>deploy時に良く使うメモ</h2>

<p>mysite/settings.pyを以外を設定ファイルとして読み込む場合はmanage.pyに以下のオプションを付ける
uwsgi.iniのenvも変更しておく</p>

<p><code>sh
--settings=mysite.settings_deploy
</code></p>

<p>設定ファイルは例えばこんな感じで書いて、元のsettings.pyを上書きする</p>

<p>```py
from pystock.settings import *
DATABASES = {</p>

<pre><code>.......
</code></pre>

<p>}</p>

<p>```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[PhantomJSとSeleniumをpythonから使ってみる]]></title>
    <link href="http://blog.shigepon.com/blog/2014/10/10/phantomjs/"/>
    <updated>2014-10-10T13:33:48+09:00</updated>
    <id>http://blog.shigepon.com/blog/2014/10/10/phantomjs</id>
    <content type="html"><![CDATA[<p>スクレーピングするのに便利な方法を調べてる内に、PhantomJSが良さげだなと思ったので、軽く使ってみた。参考<a href="http://blog.kzfmix.com/entry/1379417397">Python+Selenium+PhantomJSが快適すぎる</a></p>

<h2>PhantomJSのインストール</h2>

<p>Ubuntuを使ってるので<a href="http://phantomjs.org/build.html">PhantomJSのページ</a>を参考に</p>

<p><code>sh
$ sudo aptitude update
$ sudo aptitude install build-essential chrpath git-core libssl-dev libfontconfig1-dev libxft-dev
$ git clone git://github.com/ariya/phantomjs.git
$ cd phantomjs
$ git checkout 1.9
$ ./build.sh
</code></p>

<p>あとは./bin/にphantomjsが入っているので、./bin/にパスを通しておしまい</p>

<h2>Seleniumをpythonから使えるようにする</h2>

<p><code>sh
$ pip install selenium
</code></p>

<p>これだけでおk</p>

<h2>SeleniumでPhantomJSのドライバを使う</h2>

<p>```py
import selenium import webdriver</p>

<p>driver = webdriver.PhantomJS()
driver.get(&ldquo;<a href="http://www.yahoo.co.jp">http://www.yahoo.co.jp</a>&rdquo;)
print driver.current_url
```</p>

<p>こんな感じ。何が出来るかは<a href="http://selenium-python.readthedocs.org/en/latest/api.html">Selenium Python BindingsのWebDriver API</a>を見ると良い。</p>

<p>Javascriptをちゃんと評価してくれるので、すんげーやりやすい。昔ながらのフレームや、新規ウィンドウが出るようなものも上手く再現してくれる。すげーすげー</p>
]]></content>
  </entry>
  
</feed>
