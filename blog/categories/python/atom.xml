<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Python | shigeponが関心のある技術情報など]]></title>
  <link href="http://blog.shigepon.info/blog/categories/python/atom.xml" rel="self"/>
  <link href="http://blog.shigepon.info/"/>
  <updated>2015-05-13T12:44:52+09:00</updated>
  <id>http://blog.shigepon.info/</id>
  <author>
    <name><![CDATA[shigepon]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[PythonでSparql使ってLinked Open Dataをいじってみた]]></title>
    <link href="http://blog.shigepon.info/blog/2015/03/19/use-sparql-with-python/"/>
    <updated>2015-03-19T22:07:12+09:00</updated>
    <id>http://blog.shigepon.info/blog/2015/03/19/use-sparql-with-python</id>
    <content type="html"><![CDATA[<p>以前<a href="http://blog.shigepon.info/blog/2014/11/25/kobe-dot-r-no-13/">Kobe.R no 13に参加してきました &ndash; shigeponが関心のある技術情報など</a>でLinked Open Dataが気になってたので、Pythonでいじれるライブラリを探してみて遊んでみた。</p>

<p>Sparqlで色々試してみると面白そうなので、pip search sparqlで出た結果とググってみた結果から、SPARQLWrapperが何となく良さげかなと思い、インストールしてみた。</p>

<p><code>sh
$ pip install SPARQLWrapper
</code></p>

<p>これだけでおk</p>

<p>djangoのshellから使ってみる</p>

<!-- more -->


<p>```py
$ python manage.py shell
from SPARQLWrapper import SPARQLWrapper, JSON
sparql = SPARQLWrapper(&ldquo;<a href="http://dbpedia.org/sparql">http://dbpedia.org/sparql</a>&rdquo;)
sparql.setQuery(&ldquo;&rdquo;&ldquo;
  PREFIX rdfs: <a href="http://www.w3.org/2000/01/rdf-schema#">http://www.w3.org/2000/01/rdf-schema#</a>
  SELECT ?label
  WHERE { <a href="http://dbpedia.org/resource/Asturias">http://dbpedia.org/resource/Asturias</a> rdfs:label ?label }
&rdquo;&ldquo;&rdquo;)
sparql.setReturnFormat(JSON)
results = sparql.query().convert()</p>

<!-- more -->


<p>for result in results[&ldquo;results&rdquo;][&ldquo;bindings&rdquo;]:</p>

<pre><code>print(result["label]["value"])
</code></pre>

<p>```</p>

<p>とやるとこんな感じの結果が出た</p>

<p><code>sh
Asturias
منطقة أستورياس
Asturien
Asturias
Asturies
Asturie
アストゥリアス州
Asturië (regio)
Asturia
Astúrias
Астурия
阿斯图里亚斯
</code></p>

<p>参考：<a href="http://rdflib.github.io/sparqlwrapper/">SPARQL Endpoint interface to Python</a></p>

<p>Sparqlの書き方は<a href="http://kobexr.blogspot.jp/2014/12/kober-13-open-data.html">Kobe.R: Kobe.R #13 + Open Data</a>に載っているスライドが参考になる。</p>

<p>Linked Open Dataで１つ気になるのが、エンドポイントをどうやって探すかなんだけど、今の所ググってみるくらいしかやり方が分からない。ここらへん何か良い方法無いのかなー。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Django 1.6から1.7にアップデートしてみた]]></title>
    <link href="http://blog.shigepon.info/blog/2015/03/09/migrate-from-django-1-dot-6-to-1-dot-7/"/>
    <updated>2015-03-09T22:11:02+09:00</updated>
    <id>http://blog.shigepon.info/blog/2015/03/09/migrate-from-django-1-dot-6-to-1-dot-7</id>
    <content type="html"><![CDATA[<p>Djangoが去年の9月に1.7にバージョンアップしてて、今更ながらアップデートしてみた。色々教えて頂いた<a href="https://twitter.com/key3">@key3</a>さんに感謝！</p>

<p>※注　アップデートの前に必ずデータとかソースとか色々バックアップしておくこと。</p>

<h2>Django本体のアップデート</h2>

<p>Djangoはpipで管理してるので、pipコマンドでアップデート出来る</p>

<p><code>sh
$ pip install django -U
</code></p>

<!-- more -->


<p>これで本体はアップデート完了した。</p>

<!-- more -->


<h2>プロジェクトをDjango1.7で動かす</h2>

<p>何も変更せずにおもむろに</p>

<p><code>sh
$ python manage.py runserver
</code></p>

<p>とするとエラー出て動かなかった。</p>

<p><code>
raise AppRegistryNotReady("Models aren't loaded yet.")
</code></p>

<p>Tracebackを見てみるとどうもmodels.pyの中で</p>

<p><code>py models.py
admin.site.register(Model)
</code></p>

<p>とかやってたのがまずかったみたいで、管理サイトで使うモデル定義などのコードをadmin.pyに移動したら上のエラーは出なくなった。何となくで書いてたらいかんな。ちなみにアップデートには関係無いけど、Django1.7で@admin.register(Model)というデコレーターが使えるようになったので、そっちに変えた方がスマートな気がする。</p>

<p>次はSouthでマイグレーションやってるプロジェクトだったので、下のようなエラーが出た。</p>

<p><code>sh
raise RuntimeError("South does not support Django 1.7 or higher. Please use native Django migrations.")
</code></p>

<p>要はSouthはもうサポートしてないからDjango自身のマイグレーションでやってねということらしい。</p>

<p><a href="https://docs.djangoproject.com/en/1.7/topics/migrations/#upgrading-from-south">Migrations | Django documentation | Django</a>を見ながらやってみる。ざっくり手順を日本語で書いておく</p>

<ul>
<li>マイグレーションの状態がちゃんと最新になっているか確認する</li>
<li>settings.pyのINSTALLED_APPSの行から'south'を取り除く</li>
<li>数字の付いたマイグレーションファイルを全て削除する。ディレクトリと__init__.pyは残す。.pycファイルも削除すること。</li>
<li>python manage.py makemigrasionsを実行する。Djangoが空のマイグレーションディレクトリに新しい初期マイグレーションを作る。</li>
<li>python manage.py migrateを実行する。Djangoは初期マイグレーションをチェックして、実行しないで適用済みにする。</li>
</ul>


<p>以上やってみたら、エラーは出ずにプロジェクトをDjango1.7に対応できた。めでたしめでたし。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[djangoのModelFormでMultiWidgetを使って見る]]></title>
    <link href="http://blog.shigepon.info/blog/2015/01/24/django-modelform-multiwidget/"/>
    <updated>2015-01-24T17:23:07+09:00</updated>
    <id>http://blog.shigepon.info/blog/2015/01/24/django-modelform-multiwidget</id>
    <content type="html"><![CDATA[<p>ModelFormでModelの１つのカラムを複数のフォーム要素（inputとか）で表現したかったので調べてみた。フォーム要素を適当に作って、clean_xxxの時にくっつけるとかそんな実装の仕方も出来るみたいだけど、MultiWidgetを使うと、Modelの１つのカラムに対して複数のinput要素を使うことが出来るみたいなので、使ってみた。名前のカラムに対して姓、名の入力要素を作るとかそんなのが出来るみたい。</p>

<p>まずはMultiWidgetを継承したクラスを作る</p>

<p>```py models.py
from django.forms.widgets import MultiWidget</p>

<p>class NameWidget(MultiWidget):</p>

<p>```</p>

<p>次にクラスに対して、__init__をオーバーライドし、widgetとしてTextInputのフォームを2つ登録してみた。コードはこんな感じ。</p>

<!-- more -->


<p>```py models.py
class NameWidget(MultiWidget):</p>

<pre><code>def __init__(self,attrs=None):
    widgets = (
            forms.TextInput(attrs=attrs.update({"placeholder":"姓"})),
            forms.TextInput(attrs=attrs.update({"placeholder":"名"}))
            )
    super(NameWidget,self).__init__(widgets,attrs)
</code></pre>

<p>```</p>

<p>widgetsはリストでもタプルでも良さげ？ともかくやることはwidgetのリストかタプルを作って、親クラス(MultiWidget)のinitを呼び出すこと。</p>

<p>次に、decompress、value_from_datadictメソッドを書く。decompressはカラムの値を複数のフォームに振り分ける手順、value_from_datadictはModelFormの入力データからModelのカラムに入れる値を作る手順を記述する。姓名を半角スペースで繋げて、半角スペースで分割するように作ってみた。</p>

<p>```py models.py
class NameWidget(MultiWidget):</p>

<pre><code>def __init__(self,attrs={}):
    attrsSei = attrs.copy()
    attrsMei = attrs.copy()
    widgets = (
            forms.TextInput(attrs=attrsSei.update({"placeholder":"姓"})),
            forms.TextInput(attrs=attrsMei.update({"placeholder":"名"}))
            )
    super(NameWidget,self).__init__(widgets,attrs)
def decompress(self,value):
    if value:
        names = value.split(' ')
        return (names[0],names[1])
    return (None,None)
def value_from_datadict(self,data,files,name):
    ulist = [widget.value_from_datadict(data,files,name+'_{0}'.format(i)) for i, widget in enumerate(self.widgets)]
    return u"{0} {1}".format(ulist[0].replace(u' ',''),ulist[1].replace(u' ',''))
</code></pre>

<p>```</p>

<p>あとはこのWidgetを使いたい要素にwidgetとして指定すればおk</p>

<p>```py models.py
from django import forms
&hellip;（上のコードなど）&hellip;
class HogeForm(forms.ModelForm):</p>

<pre><code>name = forms.CharField(max_length=100,label=u'名前',widget=NameWidget())
</code></pre>

<p>```</p>

<p>このコードだと姓、名のフォームが2行に表示されている。1行にしたい場合はインライン指定とかそんなのを付けたクラスをattrsで指定して後はcssでやっちゃえばいいんじゃないかなと</p>

<p>```py models.py</p>

<pre><code>name = forms.CharField(max_length=100,label=u'名前',widget=NameWidget(attrs={"class":"inline"}))
</code></pre>

<p>```</p>

<p>とかそんな感じ</p>

<p>他にももっと細かくhtmlを記述出来るformat_outputとかあるみたいだけど、試してないので省略。なくても取りあえず出来る。</p>

<p>参考：<a href="https://docs.djangoproject.com/en/1.7/ref/forms/widgets/#django.forms.MultiWidget">Django英語ドキュメント</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[pythonのデコレーターをdjangoで使って見る]]></title>
    <link href="http://blog.shigepon.info/blog/2015/01/06/python-decorator/"/>
    <updated>2015-01-06T08:55:46+09:00</updated>
    <id>http://blog.shigepon.info/blog/2015/01/06/python-decorator</id>
    <content type="html"><![CDATA[<p>pythonのデコレーターを使ってみたらとても便利だなと思ったのでメモ</p>

<p>参考にしたページを読んでいくと理解できた。要はデコレーターとして使う関数は引数に呼び出し元の関数を貰っておいて、内部で作った関数を返せば良い。内部の関数は適当に作れるみたい（今のとこそういう理解をしている）。djangoのビューで呼び出したかったので、内部の関数で可変長引数を取れるようにして下のようにしたら動いた。</p>

<p>```py
def outer(func):</p>

<pre><code>def inner(*args,**kwargs):
    print "hoge"
    return func(*args,**kwargs)
return inner
</code></pre>

<p>```</p>

<!-- more -->


<p>この時、args[0]にHttpRequestオブジェクトが入ってるので、これをいじると適当に値を追加したり整形したりするのをビューの外部に持っていけるので、使いようによっては共通部分と個別部分の分離や、ビューに直接関係ない処理（ログとか）を分離出来るので便利な感じがする。ただ、やりすぎるとコードが分割されすぎて読みにくくなる気もする。</p>

<!-- more -->


<p>```py
def outer(func):</p>

<pre><code>def inner(*args,**kwargs):
    request = args[0]
    request.hoge = "fuga"
    return func(*args,**kwargs)
return inner
</code></pre>

<p>@outer
def hoge(request):</p>

<pre><code>print request.hoge
....
</code></pre>

<p>```</p>

<p>とやったりすることが出来る。個人的にはWebサービスでサイドメニューに必要な情報をデコレーターでやって、メインコンテンツに必要な情報をビューでやるとかそんな感じで使ってみようと思う。</p>

<p>参考：<a href="http://qiita.com/_rdtr/items/d3bc1a8d4b7eb375c368">Pythonのデコレータを理解するための12Step &ndash; Qiita</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Southをすでにあるプロジェクトに適用する]]></title>
    <link href="http://blog.shigepon.info/blog/2014/11/30/use-south-to-existing-project/"/>
    <updated>2014-11-30T23:19:26+09:00</updated>
    <id>http://blog.shigepon.info/blog/2014/11/30/use-south-to-existing-project</id>
    <content type="html"><![CDATA[<p>Southってのを使うとモデルを変更した時に、サクッとDB(PostgreSQL)に反映出来るらしんだけど、今すでに作成中のプロジェクトに反映させたかったので、メモ</p>

<h2>インストール</h2>

<p><code>sh
$ pip install south
</code></p>

<h2>設定</h2>

<p>```py settings.py
INSTALLED_APPS = (
&hellip;.</p>

<pre><code>'south',
</code></pre>

<p>)
```</p>

<!-- more -->


<h2>作成中のアプリをsouthに追加</h2>

<p>データベースが関連しているモデルが作成されているアプリにコマンドを実行すればおk</p>

<p><code>sh
$ python manage.py schemamigration アプリ名 --init
$ python manage.py syncdb --all
$ python manage.py migrate アプリ名 --fake
</code></p>

<p>syncdbしないでmigrateすると、PostgreSQLだとエラーが出たので、先にsyncdbするのが必要みたい</p>

<p>実際にモデル変更した時の作業を追記</p>

<h2>モデル変更</h2>

<p>モデルを変更したら次のコマンドでデータベースに反映する</p>

<p><code>sh
$ python manage.py schemamigration アプリ名 --auto
$ python manage.py migrate アプリ名
</code></p>

<p>この時にデータベース内の値が変更した制約等に引っ掛かる場合は途中で止まったりするので、制約に合うようにデータを変更するとか修正する。</p>

<p>参考：<a href="http://yu-write.blogspot.jp/2014/01/django-south.html">Yura YuWrite: [django] 既存のプロジェクトにsouthを追加する方法</a>、<a href="http://stackoverflow.com/questions/22236029/trouble-getting-django-set-up-on-heroku-using-south-keep-getting-programminger">postgresql &ndash; Trouble getting Django set up on Heroku using South &ndash; keep getting ProgrammingError: relation does not exist &ndash; Stack Overflow</a></p>
]]></content>
  </entry>
  
</feed>
