<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: linux | shigeponが関心のある技術情報など]]></title>
  <link href="http://blog.shigepon.info/blog/categories/linux/atom.xml" rel="self"/>
  <link href="http://blog.shigepon.info/"/>
  <updated>2016-01-06T12:12:22+09:00</updated>
  <id>http://blog.shigepon.info/</id>
  <author>
    <name><![CDATA[shigepon]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[virtualenv上のpythonでmecabを使う (ubuntu1 12.04)]]></title>
    <link href="http://blog.shigepon.info/blog/2015/11/02/use-mecab-in-python-virtualenv-ubuntu1-12-dot-04/"/>
    <updated>2015-11-02T17:28:17+09:00</updated>
    <id>http://blog.shigepon.info/blog/2015/11/02/use-mecab-in-python-virtualenv-ubuntu1-12-dot-04</id>
    <content type="html"><![CDATA[<p>ubuntu 12.04でapt使ってmecabをインストールしている状態、virtualenvのpythonに切り替えているところからスタート</p>

<h2>先に結論</h2>

<p>mecabをソースからインストールして最新版にして、natto-pyをpipでインストールすれば出来た。</p>

<h2>1. mecab-pythonをvirtualenv上で使用してみる</h2>

<p>ファイルにmecab-pythonを置いてる場所を指定して、pip使えば良い</p>

<p><code>sh requirements.txt
https://mecab.googlecode.com/files/mecab-python-0.996.tar.gz
</code></p>

<p><code>sh
$ pip install -r requirements.txt
</code></p>

<p>これでvirtualenv上にmecab-pythonをインストール出来た。
参考：<a href="http://qiita.com/hagino3000/items/4cb73fb53537c0714044">travisでpython-mecabを動かしたい時の設定 &ndash; Qiita</a></p>

<p>でもこれでおもむろに</p>

<p><code>py
import MeCab
m = MeCab.Tagger('-Ochasen')
print '今日は良い天気'
</code></p>

<p>エラーが出たorz</p>

<h2>2. natto-pyを使ってみる</h2>

<p>pip search mecabで調べて、その後ググると、natto-pyってのがmecab使えるライブラリであるっぽいのでインストールしてみた</p>

<p>参考：<a href="https://github.com/buruzaemon/natto-py">buruzaemon/natto-py</a></p>

<p><code>sh
$ pip install natto-py
</code></p>

<p>これだけでインストール出来た。使ってみたらインストールしてあるmecabのバージョンが古過ぎて使えないと怒られたorz。</p>

<h2>3. mecabを最新バージョンにする</h2>

<p>仕方ないので</p>

<h3>aptのmecabをアンインストール</h3>

<p><code>sh
$ sudo aptitude remove mecab
</code></p>

<h3>mecabをソースからインストール</h3>

<p><code>sh
$ wget https://drive.google.com/uc?export=download&amp;id=0B4y35FiV1wh7cENtOXlicTFaRUE
$ tar zxvf mecab-0.996.tar.gz
$ cd mecab-0.996
$ ./configure
$ make
$ make check
$ sudo make install
</code></p>

<h3>mecab辞書のインストール</h3>

<p><code>sh
$ wget https://drive.google.com/uc?export=download&amp;id=0B4y35FiV1wh7MWVlSDBCSXZMTXM
$ tar zvxf mecab-ipadic-2.7.0-20070801.tar.gz
$ cd mecab-ipadic-2.7.0-20070801
$ ./configure --with-charset=utf8
$ make
$ sudo make install
</code></p>

<p>urlはそれぞれ<a href="http://taku910.github.io/mecab/#download">mecabのページ</a>からリンクされているものを用いた。</p>

<p>参考：<a href="http://tatsuyaoiw.hatenablog.com/entry/20120414/1334397985">MeCabのインストール方法 &ndash; tatsuyaoiw.hatenablog.com</a></p>

<h2>natto-pyを改めて使う</h2>

<p>```py</p>

<h1>coding: utf-8↲</h1>

<p>from natto import MeCab
nm = MeCab()
print nm.parse(&lsquo;ピンチの時には必ずヒーローが現れる。&rsquo;)</p>

<h1>MeCab result as a single string</h1>

<p>ピンチ    名詞,一般,<em>,</em>,<em>,</em>,ピンチ,ピンチ,ピンチ
の      助詞,連体化,<em>,</em>,<em>,</em>,の,ノ,ノ
時      名詞,非自立,副詞可能,<em>,</em>,<em>,時,トキ,トキ
に      助詞,格助詞,一般,</em>,<em>,</em>,に,ニ,ニ
は      助詞,係助詞,<em>,</em>,<em>,</em>,は,ハ,ワ
必ず    副詞,助詞類接続,<em>,</em>,<em>,</em>,必ず,カナラズ,カナラズ
ヒーロー  名詞,一般,<em>,</em>,<em>,</em>,ヒーロー,ヒーロー,ヒーロー
が      助詞,格助詞,一般,<em>,</em>,<em>,が,ガ,ガ
現れる  動詞,自立,</em>,<em>,一段,基本形,現れる,アラワレル,アラワレル
。      記号,句点,</em>,<em>,</em>,*,。,。,。
EOS
```</p>

<p>うまくいった。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Vmware Esxiがfatal error 33を出したのでインストールしなおしてついでに色々試した話]]></title>
    <link href="http://blog.shigepon.info/blog/2015/08/05/esxi-shows-fatal-error-33/"/>
    <updated>2015-08-05T16:45:31+09:00</updated>
    <id>http://blog.shigepon.info/blog/2015/08/05/esxi-shows-fatal-error-33</id>
    <content type="html"><![CDATA[<p>Vmware Esxiがある日</p>

<p><code>sh
error loading /s.v00
fatal error: 33 inconsistent data
</code></p>

<p>というメッセージを出して起動しなくなったので、修復方法をメモしておく</p>

<h2>結論</h2>

<p>まず結論から言うと、Vmware Esxiを入れ直すことになった。他にも方法があるらしいが、その方法のページが途中で会員登録しないと見れなくなったので、参考にしなかった。</p>

<p>参考：
<a href="https://communities.vmware.com/thread/342182">error loading s.v00 fatal error 33 inconsistent&hellip; | VMware Communities</a></p>

<h2>Vmware Esxiの入れ直し</h2>

<p>USBにインストールしていたので、要はそのままインストールし直すだけなんだけど、以下手順</p>

<ul>
<li>Esxiのisoをダウンロード

<ul>
<li><a href="https://my.vmware.com/jp/web/vmware/login">my vmware</a>からログイン(ユーザー登録はフォームに記入して・・・という良くある方法なので省略)
&mdash; <a href="https://my.vmware.com/group/vmware/downloads#tab2">製品ダウンロード</a>に移動</li>
<li>VMware vSphere Hypervisor (ESXi)の横の<a href="https://my.vmware.com/group/vmware/info/slug/datacenter_cloud_infrastructure/vmware_vsphere_hypervisor_esxi/6_0">View Download Components</a>をクリック</li>
<li>左にバージョン選択用のコンボボックスがあるので、バージョンを選択して、Downloadリンクをクリック</li>
<li>Registerのボタンが出てる場合、まずクリックして、ライセンスの登録を行う</li>
<li>License Informationにlicense keysが出るので保存しておく。(Vmware ESXi Clientでのライセンスキー登録に使う)</li>
<li>ライセンスの登録が済んだらDownload Packages以下の項目からダウンロードするためのリンクが出るのでダウンロードする</li>
<li><strong><em>AdBlockを入れてるとダウンロードが開始しなかったので注意</em></strong></li>
</ul>
</li>
<li>ダウンロードしたisoをCDに焼く</li>
<li>Esxiのハード要件を全て満たすハード上でCD起動する</li>
<li>ESXiをインストールする

<ul>
<li>Boot MenuでESXi Installerを選択する</li>
<li>インストールを進めるかどうか聞かれる(Enter)</li>
<li>ライセンス許諾を聞かれる(F11でおk)</li>
<li>インストール先を選ぶ(入れたい場所を選ぶ。USB差しておけばUSBも出て選択出来る)</li>
<li>キーボードレイアウトを選択する</li>
<li>rootアカウントのパスワードを設定する(タブで移動、2回設定するEnterで完了)</li>
<li>最後の確認(F11でおk)</li>
<li>インストール終了後Enterで再起動</li>
</ul>
</li>
</ul>


<h2>バージョン5.5、6.0</h2>

<p>今まで入れてたのがEsxiバージョン5.0だったので、ついでに5.5、6.0を試してみた。インストール方法は入れ直し方法と同じ。</p>

<p>で、インストール後にクライアントをDLしてホストに接続してみた。どのバージョンでも問題なく出来たが、Windows XPの端末ではこの2つのバージョンは接続出来ないそうな。</p>

<p>Vmの操作（インベントリへの追加、起動、コンソール表示、終了）は全てのバージョンで同じように出来た。Vmはバージョン5で作ったものだが他のバージョンでの操作も問題ないらしい。これは便利。</p>

<h2>sshでEsxiホストを操作する</h2>

<p>linuxやmacからEsxiホストを操作して、vmの起動、終了とかやりたかったので、ついでに試してみた。手順は以下の通り</p>

<ul>
<li>EsxiホストでSSHを有効にする

<ul>
<li>初期画面からCustomize Systemへ移動(F2)</li>
<li>カーソルを上下移動して「Troubleshooting Options」のところでEnter</li>
<li>Disable ESXi Shellにカーソルを合わせてEnterを押すとEnable ESXi Shellに変わる</li>
<li>Disable SSHにカーソルを合わせてEnterを押すとEnable SSHに変わる</li>
<li>Restart Management Agentsにカーソルを合わせてEnterを押す</li>
</ul>
</li>
<li>ESXiクライアントでSSHを有効にする

<ul>
<li>インベントリが選択されている状態で、構成(Configuration) &ndash;> セキュリティプロファイル(Security Profile)の上部、サービス(Services)の「プロパティ(Properties)をクリック</li>
<li>SSHを選択し、オプション(Options)をクリック</li>
<li>ホストに連動して開始および停止(Start and stop with host)を選択し、サービスコマンドの開始(Start)ボタンを押す。その後okをクリックしてダイアログを消す。</li>
<li>同中部、ファイアウォール(Firewall)の「プロパティ(Properties)をクリック</li>
<li>SSHサーバ(SSH Server)をチェック</li>
<li>ファイアーウォール(Firewall)ボタンをクリック</li>
<li>IPアドレスの許可設定を行う。任意のIPアドレスからの接続を許可(Allow connections from any IP address)するのが一番楽。</li>
<li>okをクリックしていって、ダイアログを閉じる</li>
</ul>
</li>
</ul>


<p>以上で、linuxやmacから</p>

<p><code>sh
ssh root@ESXiのip
</code></p>

<p>でインストール時に指定したパスワードを入力するとsshでESXiホストにアクセス出来るようになる。</p>

<p>参考：<a href="http://www.serenity-networks.com/networking/how-to-enable-ssh-on-vmware-esxi-5-5-5-6-all-other-versions/">How To Enable SSH on VMware ESXi 5 / 5.5 / 6 &amp; All Other Versions | Serenity-Networks</a></p>

<h2>ESXiの管理コマンド(ごく一部。追記予定)</h2>

<h3>インベントリへのVMの追加、削除</h3>

<p>追加</p>

<p><code>sh
$ vim-cmd solo/registervm [vmxのパス.vmx] [vm名]
</code></p>

<p>削除</p>

<p><code>sh
$ vim-cmd vmsvc/unregister [vmのid]
</code></p>

<h3>vm一覧</h3>

<p><code>sh
$ vim-cmd vmsvc/getallvms
</code></p>

<p>ここで出て来たvmidをvmのidとして色んなコマンド内で使用する。</p>

<h3>vm起動、シャットダウン</h3>

<p>起動</p>

<p><code>sh
$ vim-cmd vmsvc/power.on [vmのid]
</code></p>

<p>終了</p>

<p><code>sh
$ vim-cmd vmsvc/power.shutdown [vmのid]
</code></p>

<p>参考：<a href="http://qiita.com/binzume/items/096ce77f73b6e853c342">VMware ESXiをSSHでがんばるぞい(コマンドライン操作色々) &ndash; Qiita</a></p>

<p>ちなみに各コマンドについてはヘルプを出すオプションとか無いみたい。コマンド失敗した時に使用法が出ることもあるが、失敗するまで分からないとか怖いわー。</p>

<h3>ESXiシャットダウン</h3>

<p>シャットダウンと同時に電源を切る作業も必要</p>

<p><code>sh
$ shutdown.sh &amp;&amp; poweroff
</code></p>

<p>でおk。USBにインストールしているせいか分からないが、poweroffが無い場合、SSHの設定が再起動後、元に戻っていた。</p>

<p>参考：<a href="http://www.nojokeit.com/2013/02/shut-down-esxi-51-guest-vms-and-host.html">No Joke IT: Shut down ESXi 5.1 guest VMs and the host (free edition) via SSH &ndash; the easy way!</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[なでしこ2でradikoの録音をやってみた]]></title>
    <link href="http://blog.shigepon.info/blog/2015/07/19/record-radiko-with-nadesiko2/"/>
    <updated>2015-07-19T17:22:00+09:00</updated>
    <id>http://blog.shigepon.info/blog/2015/07/19/record-radiko-with-nadesiko2</id>
    <content type="html"><![CDATA[<p>ネット上でラジオを聞けるサービス<a href="http://radiko.jp/">radiko</a>の録音ソフトが調子悪くなったので、自分で作ってみるかーとやってみたら出来たのでメモ。OSはUbuntu 12.04で、cui環境で行った。</p>

<p>参考：</p>

<ul>
<li><a href="https://gist.github.com/matchy2/3956266">簡易Radiko録音スクリプト</a></li>
<li><a href="http://d.hatena.ne.jp/zariganitosh/20130124/rtmpdump_radiko_access">rtmpdumpでradikoにアクセスする手順 &ndash; ザリガニが見ていた&hellip;。</a></li>
<li><a href="http://lifeonubuntu.com/ubuntu-missing-add-apt-repository-command/">Ubuntu Missing add-apt-repository command</a></li>
<li><a href="http://www.ubuntugeek.com/how-to-install-swftools-in-ubuntu-12-0411-10-using-ppa.html">How to install SWFTools in ubuntu 12.04/11.10 using PPA | Ubuntu Geek</a></li>
</ul>


<p>Radiko録音スクリプトをまず参考にしたが、実際に手順を手作業で追いたかったので、参考記事を見ながら再現してみた。するとまずswfextractコマンドが無くてつまずく。ぐぐるとaptのリポジトリを追加してインストールする必要があるらしい。しかもリポジトリ追加用コマンドも無いのでインストールする必要があった。swfextractを使えるようになるまでの手順は以下の通り</p>

<p><code>sh
$ sudo aptitude install software-properties-common python-software-properties
$ sudo add-apt-repository ppa:guilhem-fr/swftools
$ sudo aptitude update
$ sudo aptitude install swftools
</code></p>

<p>あとは参考ページの手順通りで録音出来た。<a href="http://www.dcc-jpl.com/foltia/wiki/radikomemo">radikomemo &ndash; foltia &ndash; Trac</a>で放送局のid（xml取得に使ったりする）をチェックした。</p>

<p>で、あとは一連の処理をなぞるスクリプトを書くだけ。pythonとかはググればあるので、なでしこ2でやってみた。</p>

<p><a href="https://gist.github.com/shigepon/01acb8686e6df6accce2">record_radiko.nako</a></p>

<p>gistを初めて使うので、こんなやり方で良いのかちょっと分からないけどこんな感じ。wgetとかddとかコマンドをそのまま使ってるので、windowsでは動かないはず。なでしこ2では7/19時点ではpostでヘッダー指定するとか出来ないので、こうせざるを得ない。</p>

<p>なでしこ2の一例ということで。ちなみにこれ作るのに3時間かかった。うち1時間半がググってインストールして手作業で動作確認に使って、1時間は休憩に使った。エラー処理とかtmpファイルの処理とか全然やってない適当コードですんません＞＜。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Jenkinsでなでしこ2をCIする]]></title>
    <link href="http://blog.shigepon.info/blog/2015/05/08/nadesiko2-continuous-integration-with-jenkins/"/>
    <updated>2015-05-08T09:19:18+09:00</updated>
    <id>http://blog.shigepon.info/blog/2015/05/08/nadesiko2-continuous-integration-with-jenkins</id>
    <content type="html"><![CDATA[<p><a href="http://blog.shigepon.info/blog/2015/05/05/nunit-console-test-for-nadesiko2/">なでしこ2をubuntu cuiでテストする &ndash; shigeponが関心のある技術情報など</a>
までやったので、CIできると便利かなと思ってやってみた。と言いつつ、単にやってみたかっただけ。mono developとかvisual studio使って開発する場合も同じように出来ると思う。例によって環境はUbuntu 12.04</p>

<p>参考：</p>

<ul>
<li><a href="http://d.hatena.ne.jp/Crest/20121220/1356023823">.NETとJenkinsで始めるCI開発 &ndash; CREST’S WEBLOG</a></li>
<li><a href="http://blog.bekijkhet.com/2013/01/create-mono-c-buildserver-using-jenkins.html">Create a Mono C# Buildserver using Jenkins and GitHub ~ BroersA Blog</a></li>
</ul>


<h2>1. Jenkinsインストール</h2>

<p>(略) 追記するかも？</p>

<!-- more -->


<h2>2. Jenkins設定</h2>

<!-- more -->


<h3>一般</h3>

<p>(略) 追記するかも？</p>

<h3>C#関連</h3>

<p>Jenkins > Jenkinsの管理 > プラグインの管理 > 利用可能(タブ)</p>

<p>からプラグインをインストールする。インストールするプラグインは</p>

<ul>
<li>GIT Plugin</li>
<li>MSBuild Plugin</li>
<li>NUnit plugin</li>
</ul>


<p>Jenkins > Jenkinsの管理 > システム設定</p>

<p>から</p>

<p>MSBuildの項目を編集。</p>

<ul>
<li>インストール済みMSBuild&hellip;をクリック</li>
<li>name</li>
<li>適当（とりあえず「mono」とした）</li>
<li>Path to MSBuild</li>
<li>/usr/bin/xbuild  (Warning出るけど気にしない)</li>
<li>Default Parameters</li>
<li>なし(Debugでビルドするかとか指定したりするかも。)</li>
<li>適用ボタンを押す</li>
</ul>


<p>Gitの項目は編集したか覚えてないけど</p>

<ul>
<li>Path to Git executable</li>
<li>/usr/bin/git</li>
</ul>


<p>くらいやっとけばいいかも？　</p>

<h2>3. プロジェクト作成</h2>

<p>Jenkins > 新規ジョブ作成　から</p>

<ul>
<li>ジョブ名</li>
<li>適当(nadesiko2とか付けてみた)</li>
<li>フリースタイル・プロジェクトのビルドを選択</li>
<li>OKボタンを押す</li>
</ul>


<h2>4. プロジェクト設定</h2>

<p>プロジェクトの設定画面に移動するので編集。Jenkins > プロジェクト(今回はnadesiko2) > 設定　からいつでも編集可能。</p>

<ul>
<li>ソースコード管理</li>
<li>Gitを選択</li>
<li>Repository URL</li>
<li> なでしこ2のリポジトリの場所。今回は<a href="http://blog.shigepon.info/blog/2015/05/01/develop-nadesiko2-on-ubuntu-cui/">ubuntuのcui環境でなでしこ2をビルドする &ndash; shigeponが関心のある技術情報など</a>の続きなので/home/username/nadesiko2</li>
<li>Branches to build</li>
<li> なでしこ2では変更点はpull requestする予定なので、pull requestする時のブランチを指定した。ここは色んな設定がありえる。</li>
<li>ビルド・トリガ</li>
<li>SCMをポーリングを選択</li>
<li>スケジュール</li>
<li> H/30 * * * * (大体30分おき)</li>
<li>ビルド</li>
<li>ビルド手順の追加 > Build a Visual Studio project or solution using MSBuild</li>
<li>Build a Visual Studio project or solution using MSBuildの設定</li>
<li> MSBuild Version

<ul>
<li>monoを選択</li>
</ul>
</li>
<li> MSBuild Build File

<ul>
<li>cnakoのソリューションファイルとしてNako2_CNako.slnを指定した。プラグインのソリューションファイルでも出来ると思う</li>
</ul>
</li>
<li>ビルド手順の追加 > シェルの実行(Windowsだと多分Windowsバッチコマンドの実行)</li>
<li>シェルの実行</li>
<li> nunit-console $WORKSPACE/CNako2Test/bin/Debug/CNako2Test.dll -xml cnako2test.xml -noshadow</li>
<li>ビルド後の処理</li>
<li>ビルド後の処理の追加 > Publish NUnit test result report</li>
<li>cnako2test.xml</li>
</ul>


<h2>5. 実行</h2>

<p>Jenkins > プロジェクト(今回はnadesiko2)
で、ビルド実行をクリックすると実行してくれる。あと、gitの指定したブランチでコミットした後もこの設定の場合30分おきにコミットをチェックしてビルドを実行してくれる。まだまだテストが通ってない部分もあるので、結果は失敗になるけど、とりあえずこれで進められる。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[なでしこ2をubuntu cuiでテストする]]></title>
    <link href="http://blog.shigepon.info/blog/2015/05/05/nunit-console-test-for-nadesiko2/"/>
    <updated>2015-05-05T23:02:32+09:00</updated>
    <id>http://blog.shigepon.info/blog/2015/05/05/nunit-console-test-for-nadesiko2</id>
    <content type="html"><![CDATA[<p><a href="http://blog.shigepon.info/blog/2015/05/01/develop-nadesiko2-on-ubuntu-cui/">ubuntuのcui環境でなでしこ2をビルドする</a>の続きで、cui環境でなでしこ2のテストを実行してみる。</p>

<p>cui環境でnunitを実行するには<a href="http://www.nunit.org/index.php?p=nunit-console&amp;r=2.5.10">nunit-console</a>を使う。なでしこ2のテストを実行するにはテスト関連のdllをnunitで実行すると良い。コマンドはなでしこ2をインストールしたディレクトリでこんな感じ。</p>

<p><code>sh
$ nunit-console CNako2Test/bin/Debug/CNako2Test.dll
</code></p>

<p>プラグインのテスト(NakoPluginTest)プロジェクトでは外部ファイルを利用するので</p>

<p><code>sh
$ nunit-console NakoPluginTest/bin/Debug/NakoPluginTest.dll
</code></p>

<!-- more -->


<p>だと、外部ファイルを読み込むテスト（例えばTest_read）で、Could not find fileと怒られる。なので、コマンドにnoshadowオプションを付ける。</p>

<p><code>sh
$ nunit-console -noshadow NakoPluginTest/bin/Debug/NakoPluginTest.dll
</code></p>

<p>とすると、外部ファイルを読み込んでくれる。
これでcui環境でなでしこ2をビルドからテストまで出来る。</p>
]]></content>
  </entry>
  
</feed>
