<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: ansible | shigeponが関心のある技術情報など]]></title>
  <link href="http://blog.shigepon.info/blog/categories/ansible/atom.xml" rel="self"/>
  <link href="http://blog.shigepon.info/"/>
  <updated>2016-02-29T12:00:56+09:00</updated>
  <id>http://blog.shigepon.info/</id>
  <author>
    <name><![CDATA[shigepon]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[fluent-plugin-groongaをインストールして動かすまでをAnsibleでやってみた]]></title>
    <link href="http://blog.shigepon.info/blog/2016/01/23/install-and-setting-up-fluentd-pluhin-groonga-using-ansible/"/>
    <updated>2016-01-23T14:32:43+09:00</updated>
    <id>http://blog.shigepon.info/blog/2016/01/23/install-and-setting-up-fluentd-pluhin-groonga-using-ansible</id>
    <content type="html"><![CDATA[<p>ログ集計に何使うか迷ったんだけど、fluentdに<a href="https://github.com/groonga/fluent-plugin-groonga">fluent-plugin-groonga</a>ってのがあったのでfluentdを使ってgroongaにログを集計していくとこまでをやった。rbenvから色々やろうとしたら面倒だった。</p>

<h2>rbenvを使う</h2>

<p>バージョン管理が面倒なので、やっぱrbenv使わないといかんっしょと思ってやった。<a href="http://qiita.com/katsuhiko/items/56935225754a90d58314">Ansible と Vagrant を使って Rails 開発環境（Ubuntu + rbenv + MySQL5.6 + node.js）を構築する &ndash; Qiita</a>を参考にして変数を適当にしたりsudoのとこを変更したりして出来た</p>

<!-- more -->


<h2>```yml</h2>

<ul>
<li>hosts: all
user: hoge
tasks:

<ul>
<li>name: Install dependencies for rbenv
sudo: yes
apt: name= state=latest
with_items:

<ul>
<li>git</li>
</ul>
</li>
<li>name: Install rbenv
git: repo=<a href="https://github.com/sstephenson/rbenv.git">https://github.com/sstephenson/rbenv.git</a> dest=~/.rbenv</li>
<li>name: Add ~.rbenv/bin to PATH
lineinfile: >
  dest=&ldquo;~/.bashrc&rdquo;
  line=&ldquo;export PATH=$HOME/.rbenv/bin:$PATH&rdquo;</li>
<li>name: Eval rbenv init in ~/.bashrc
lineinfile: >
  dest=&ldquo;~/.bashrc&rdquo;
  line=&lsquo;eval &ldquo;$(rbenv init &ndash;)&rdquo;&rsquo;</li>
<li>name: Install dependencies for ruby-build (see. <a href="https://github.com/sstephenson/ruby-build/wiki">https://github.com/sstephenson/ruby-build/wiki</a>)
apt: name= state=latest
with_items:

<ul>
<li>autoconf</li>
<li>bison</li>
<li>build-essential</li>
<li>libssl-dev</li>
<li>libyaml-dev</li>
<li>libreadline6-dev</li>
<li>zlib1g-dev</li>
<li>libncurses5-dev</li>
<li>libffi-dev</li>
<li>libgdbm3</li>
<li>libgdbm-dev</li>
</ul>
</li>
<li><p>name: Install ruby-build as rbenv plugin
git: repo=<a href="https://github.com/sstephenson/ruby-build.git">https://github.com/sstephenson/ruby-build.git</a> dest=~/.rbenv/plugins/ruby-build</p></li>
<li><p>name: Check if version is installed ruby
shell: &ldquo;~/.rbenv/bin/rbenv versions | grep &rdquo;
register: rbenv_check_install
changed_when: False
ignore_errors: yes</p></li>
<li><p>name: Install ruby
command: &ldquo;~/.rbenv/bin/rbenv install &rdquo;
when: rbenv_check_install|failed</p></li>
<li><p>name: Check if version is the default ruby version
shell: &ldquo;~/.rbenv/bin/rbenv version | grep &rdquo;
register: rbenv_check_default
changed_when: False
ignore_errors: yes</p></li>
<li><p>name: Set default ruby version
command: &ldquo;~/.rbenv/bin/rbenv global &rdquo;
when: rbenv_check_default|failed</p></li>
</ul>
</li>
</ul>


<p>```</p>

<p>rbenv_ruby_versionはインベントリファイルで設定しておく。</p>

<p>shellのところrbenvだけにしたら何回やってもエラーで止まってしまった。なので結局rbenvはフルパス指定にした。bashrcに書いた分その後色々やった時に書いたので.profileでも良いかも知れない。</p>

<h2>fluentdのインストール</h2>

<p>こっから面倒だった。</p>

<p>```yml</p>

<pre><code>- name: Gem install fluentd
  gem: name=
   executable=~/.rbenv/versions//bin/gem user_install=no
  with_items:
    - fluentd
    - fluent-plugin-groonga
</code></pre>

<p>```</p>

<p>たったこれだけ書くのに2時間くらい掛かったorz。fluentdをインストールする前にtd-agentから何とかならないか試したり、gemがなかなかrbenvでインストールしたバージョンになってくれなかったり、fluentdが変な場所にインストールされたり・・・でも結論としてはこれでおk。フルパス指定とuserinstall=noがポイントかな。</p>

<h2>fluentdの設定</h2>

<p>設定やったこと無かったので、ここが手探りになるのは仕方ない。includeのパスを間違えてて設定を読み込めないとか色々しょーもないハマりをした。ログが正しく送られてるかどうかはsourceのタグをdebug.accessに変えて、デバッグ表示させてtailがちゃんとされているか確認→実際にlog.accessでやってみるという手順で行った</p>

<p>```yml
&ndash; name: setup fluentd dir</p>

<pre><code>  command: ~/.rbenv/versions//bin/fluentd --setup /path/to/fluent/config/file
- name: set fluent.conf
  lineinfile: dest=/path/to/fluent/config/file/fluent.conf insertafter=EOF line="@include conf.d/*" state=present
- name: create conf.d folder
  file: path=/path/to/fluent/config/file/conf.d state=directory
- name: copy groonga.fluentd.conf
  copy: src=groonga.fluentd.conf dest=~/path/to/fluent/config/file/conf.d
</code></pre>

<p>```</p>

<p>```xml
<source></p>

<pre><code>type tail
format ltsv
tag log.access
path /path/to/log/file
pos_file /path/to/pos/file
</code></pre>

<p></source>
<match log.*></p>

<pre><code>type groonga
store_table logs
host xxx.xxx.xxx.xx
port xxxxx
</code></pre>

<p></match>
```
としてIPがxxx.xxx.xxx.xxでポートがxxxxxのところにgroongaを用意すると勝手にフィールドとか色々作ってログを保存してくれるようになる。ちなみにfluentdの開始コマンドは</p>

<p><code>sh
$ fluentd -c /path/to/fluent/config/file -vv &amp;
</code></p>

<p>とした。</p>

<p>とりあえずここまでで十分ハマった。</p>

<h2>td-agentは使わない</h2>

<p>使用OSがubuntuなので、td-agentを使ってみたんだが、rbenv上のgemでインストールしたfluent-plugin-groongaを読み込む方法が最後まで分かんなかったので使わないことにした。td-agentだとserveceコマンドでリスタートとかやってくれるので楽なんだけどなー。</p>

<p>参考：<a href="http://mhag.hatenablog.com/entry/2014/07/04/151415">Ubuntu 14.04 LTS に Fluentd をインストールする &ndash; ´・ω・)＜ときどき書くよ</a>, <a href="http://qiita.com/h5y1m141@github/items/74029cab9706971c8dbe">Rubyが参照してるgemのパスやインストール済gemを確認する方法 &ndash; Qiita</a>, <a href="http://qiita.com/groonga/items/5c674be9daf25054c14c">Fluentdで集めたデータをGroongaに格納する方法 &ndash; Qiita</a>, <a href="http://chocoby.jp/blog/2013/03/05/fluentd-ltsv/">fluentd で LTSV がサポートされたのでメモ &ndash; 暇人じゃない</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ansible memo]]></title>
    <link href="http://blog.shigepon.info/blog/2014/07/01/ansible-memo/"/>
    <updated>2014-07-01T16:56:06+09:00</updated>
    <id>http://blog.shigepon.info/blog/2014/07/01/ansible-memo</id>
    <content type="html"><![CDATA[<p>ansibleで自分が欲しい情報が色んなページに散らばっていたので、メモ</p>

<!-- more -->


<h3>ansible-playbookのオプション</h3>

<ul>
<li>-K: sudoのパスワード入力</li>
<li>-C (&mdash;check): 実際に実行しないでチェックしてくれる</li>
<li>-l name: hostsファイルに[name]と書かれたホストにのみ実行</li>
<li>-i hostsfile: 初期状態では/etc/ansible/hostsを見に行くので、自分で指定したい場合に</li>
<li>&mdash;syntax-check: playbookの書式チェック。書いて最初にやるといい</li>
<li>&mdash;list-tasks: playbookで行う内容をリストアップ</li>
</ul>


<h2>ansibleで鍵認証のsshで処理したい</h2>

<p>-c paramikoでなく-c sshを使うとssh_configの値を使うことが出来る　</p>

<h2>ansibleで鍵認証のsshで処理したい</h2>

<p>-c paramikoでなく-c sshを使うとssh_configの値を使うことが出来る。　</p>

<p>参考：<a href="https://github.com/ansible/ansible/issues/1172">ansible is not using .ssh/config · Issue #1172 · ansible/ansible</a></p>

<h2>チェック時の注意点</h2>

<ul>
<li><p>何かをaptとかでインストールしてそのアプリを使って何かインストールしようとするとエラーが出る</p></li>
<li><p>aptにリポジトリ追加して、アップデートして何かインストールしようとするとエラーが出る</p></li>
</ul>


<p>どちらも実際に動かすとエラーは出ない</p>

<h2>postgresqlのデータベースロケール設定</h2>

<p>ロケール設定してから一旦サービスを再起動する</p>

<p>```yml</p>

<pre><code>- name: Install language-pack-ja 
  apt: name=language-pack-ja
- name: set locale
  locale_gen: name=ja_JP.UTF-8 state=present
- name: first restart
  service:
    name: 'postgresql'
    state: 'restarted'
- name: drop database stock if exist
  sudo_user: postgres
  postgresql_db: name=stock state=absent
- name: create database stock
  sudo_user: postgres
  postgresql_db: &gt;
    name=stock-
    encoding='UTF-8'
    lc_collate='ja_JP.UTF-8'
    lc_ctype='ja_JP.UTF-8'
    template='template0'
</code></pre>

<p>```
参考：<a href="http://serverfault.com/questions/491237/postgresql-9-2-invalid-locale-name-on-ubuntu-12-04">Postgresql 9.2 &ldquo;invalid locale name&rdquo; on Ubuntu 12.04 &ndash; Server Fault</a></p>

<h2>replaceとlineinfile</h2>

<p>単純な置換、削除ならreplaceが直感的なので良い。
追加とかある場合はlineinfileが色々できて良い。</p>

<h2>virtualenv関連</h2>

<p>virtualenvのインストールだけならpipでいけるが、virtualenvの環境を初期化しておきたいのでこんな感じ</p>

<p>```yml</p>

<pre><code>- name: install virtualenv
  pip: name=virtualenv state=latest
- name: initialize virtualenv
  command: virtualenv /path/to/env creates="/path/to/env"
- name: install request on vertualenv
  pip:
    name=requests
    virtualenv=/path/to/env
</code></pre>

<p>```</p>

<p>requestsは最低でも入れておかないとssl関連のwarningが出る</p>

<p>参考：<a href="http://stackoverflow.com/questions/29991041/why-am-i-getting-insecureplatformwarning-on-mac">python &ndash; Why am I getting InsecurePlatformWarning on mac? &ndash; Stack Overflow</a>、<a href="http://stackoverflow.com/questions/26402123/ansible-creating-a-virtualenv">python &ndash; Ansible creating a virtualenv &ndash; Stack Overflow</a></p>

<h2>GATHERING FACTSで止まる時</h2>

<ul>
<li>まずsudoを外して-Cで動くかチェック</li>
<li>いけるなら、host側のsudoパスワードが入力出来ていないのが原因なので、&mdash;ask-sudo-passを使う。</li>
</ul>

]]></content>
  </entry>
  
</feed>
