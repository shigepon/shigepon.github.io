<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Django | shigeponが関心のある技術情報など]]></title>
  <link href="http://blog.shigepon.com/blog/categories/django/atom.xml" rel="self"/>
  <link href="http://blog.shigepon.com/"/>
  <updated>2015-01-06T23:52:51+09:00</updated>
  <id>http://blog.shigepon.com/</id>
  <author>
    <name><![CDATA[shigepon]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[pythonのデコレーターをdjangoで使って見る]]></title>
    <link href="http://blog.shigepon.com/blog/2015/01/06/python-decorator/"/>
    <updated>2015-01-06T08:55:46+09:00</updated>
    <id>http://blog.shigepon.com/blog/2015/01/06/python-decorator</id>
    <content type="html"><![CDATA[<p>pythonのデコレーターを使ってみたらとても便利だなと思ったのでメモ</p>

<p>参考にしたページを読んでいくと理解できた。要はデコレーターとして使う関数は引数に呼び出し元の関数を貰っておいて、内部で作った関数を返せば良い。内部の関数は適当に作れるみたい（今のとこそういう理解をしている）。djangoのビューで呼び出したかったので、内部の関数で可変長引数を取れるようにして下のようにしたら動いた。</p>

<p>```py
def outer(func):</p>

<pre><code>def inner(*args,**kwargs):
    print "hoge"
    return func(*args,**kwargs)
return inner
</code></pre>

<p>```</p>

<p>この時、args[0]にHttpRequestオブジェクトが入ってるので、これをいじると適当に値を追加したり整形したりするのをビューの外部に持っていけるので、使いようによっては共通部分と個別部分の分離や、ビューに直接関係ない処理（ログとか）を分離出来るので便利な感じがする。ただ、やりすぎるとコードが分割されすぎて読みにくくなる気もする。</p>

<p>```py
def outer(func):</p>

<pre><code>def inner(*args,**kwargs):
    request = args[0]
    request.hoge = "fuga"
    return func(*args,**kwargs)
return inner
</code></pre>

<p>@outer
def hoge(request):</p>

<pre><code>print request.hoge
....
</code></pre>

<p>```</p>

<p>とやったりすることが出来る。個人的にはWebサービスでサイドメニューに必要な情報をデコレーターでやって、メインコンテンツに必要な情報をビューでやるとかそんな感じで使ってみようと思う。</p>

<p>参考：<a href="http://qiita.com/_rdtr/items/d3bc1a8d4b7eb375c368">Pythonのデコレータを理解するための12Step &ndash; Qiita</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[use bootstrap3 in django]]></title>
    <link href="http://blog.shigepon.com/blog/2014/12/18/use-bootstrap3-in-django/"/>
    <updated>2014-12-18T08:24:56+09:00</updated>
    <id>http://blog.shigepon.com/blog/2014/12/18/use-bootstrap3-in-django</id>
    <content type="html"><![CDATA[<p>そろそろbootstrap3を使ってみたいなと思い、Djangoでbootstrap3を使う方法を調べてみた。django-bootstrap-toolkitのページを見てみるとdjango-bootstrap3を使ってねと書いてあるので、それを使ってみることにした。</p>

<h2>インストール</h2>

<p>```sh</p>

<p>$ pip install django-bootstrap3
```</p>

<h2>設定</h2>

<p>```py settings.py
INSTALLED_APPS = (
&hellip;.</p>

<pre><code>'bootstrap3',
</code></pre>

<p>&hellip;.
)
```</p>

<h2>テンプレート</h2>

<p><code>html

{% load bootstrap3 %}
{% bootstrap_css %}
{% bootstrap_javascript %}
{% bootstrap_messages %}

</code></p>

<p>これで必要ファイルがロードされる。あとはbootstrap3で使うタグで構成すれば良い。bootstrap_formとかそういうタグもあるけどまだ試していない。</p>

<h2>Bootswatchにあるテーマを試す</h2>

<p>まずはBootswatchのテーマcssをダウンロード</p>

<p><code>sh
$ cd /static/css
$ wget http://bootswatch.com/cosmo/bootstrap.min.css
</code></p>

<p>/staticはアプリのフォルダ下に作る</p>

<p>次に設定ファイルに項目を追加</p>

<p>```py settings.py
STATIC_URL = &lsquo;/static/&rsquo;
BOOTSTRAP3 = {</p>

<pre><code>'css_url':'/static/css/bootstrap.min.css'
</code></pre>

<p>}
```</p>

<p>これだけでテンプレートいじらずに動いてくれる</p>

<p>bootstrap2だとnavbar表示の時に表示が重なるとか何とかあったけど、bootstrap3だと気にしなくて良いのかな？何も追加css書かなくても特に問題無さそう。これは嬉しい。</p>

<p>でも<a href="http://qiita.com/Alex_23drum/items/bbf80aff7dbb6fd1a7d9">Navbarに画像入れると下に偏った配置になる</a>とかあるみたいなので、調べてみる必要があるかも</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Southをすでにあるプロジェクトに適用する]]></title>
    <link href="http://blog.shigepon.com/blog/2014/11/30/use-south-to-existing-project/"/>
    <updated>2014-11-30T23:19:26+09:00</updated>
    <id>http://blog.shigepon.com/blog/2014/11/30/use-south-to-existing-project</id>
    <content type="html"><![CDATA[<p>Southってのを使うとモデルを変更した時に、サクッとDB(PostgreSQL)に反映出来るらしんだけど、今すでに作成中のプロジェクトに反映させたかったので、メモ</p>

<h2>インストール</h2>

<p><code>sh
$ pip install south
</code></p>

<h2>設定</h2>

<p>```py settings.py
INSTALLED_APPS = (
&hellip;.</p>

<pre><code>'south',
</code></pre>

<p>)
```</p>

<h2>作成中のアプリをsouthに追加</h2>

<p>データベースが関連しているモデルが作成されているアプリにコマンドを実行すればおk</p>

<p><code>sh
$ python manage.py schemamigration アプリ名 --init
$ python manage.py syncdb --all
$ python manage.py migrate アプリ名 --fake
</code></p>

<p>syncdbしないでmigrateすると、PostgreSQLだとエラーが出たので、先にsyncdbするのが必要みたい</p>

<p>実際にモデル変更した時の作業を追記</p>

<h2>モデル変更</h2>

<p>モデルを変更したら次のコマンドでデータベースに反映する</p>

<p><code>sh
$ python manage.py schemamigration アプリ名 --auto
$ python manage.py migrate アプリ名
</code></p>

<p>この時にデータベース内の値が変更した制約等に引っ掛かる場合は途中で止まったりするので、制約に合うようにデータを変更するとか修正する。</p>

<p>参考：<a href="http://yu-write.blogspot.jp/2014/01/django-south.html">Yura YuWrite: [django] 既存のプロジェクトにsouthを追加する方法</a>、<a href="http://stackoverflow.com/questions/22236029/trouble-getting-django-set-up-on-heroku-using-south-keep-getting-programminger">postgresql &ndash; Trouble getting Django set up on Heroku using South &ndash; keep getting ProgrammingError: relation does not exist &ndash; Stack Overflow</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[djangoで国際化やってみた]]></title>
    <link href="http://blog.shigepon.com/blog/2014/11/27/django-locale/"/>
    <updated>2014-11-27T13:02:12+09:00</updated>
    <id>http://blog.shigepon.com/blog/2014/11/27/django-locale</id>
    <content type="html"><![CDATA[<p>Djangoで他の人が作ったモジュールを使ってると、英語のメッセージが入ってることがあるので、日本語化してみた。とりあえず英語のメッセージを日本語に変換するとこまで。</p>

<h2>準備</h2>

<p>gettextが無かったらインストール。Ubuntuの場合</p>

<p><code>sh
$ sudo aptitude install gettext
</code></p>

<p>プロジェクトにlocaleフォルダを作る。無いと後のコマンドでエラーが出た</p>

<h2>poファイル作成</h2>

<p>おもむろにpoファイルを作るコマンドを実行</p>

<p><code>sh
django-admin.py makemessages -l ja
</code></p>

<p>するとpath/to/locale/ja/LC_MESSAGES/django.poってファイルが出来るので、それを修正していく。ただ、このコマンドプロジェクト内だけ捜査してファイルを作るみたいで、外部モジュールの場合、上手く読み取ってくれなかった。</p>

<p>今回はvirtualenvでpipしたdjango-allauthのテンプレートを日本語化したかったので、path/to/virtualenv/dir/lib/python2.7/site-packages/allauth/templates/account/内のファイルを全部path/to/project/templates/account/にコピーしてからコマンド実行すると上手く読み取ってくれた。</p>

<h2>翻訳</h2>

<p>出来たpoファイルを編集すればオッケー。ファイル内でmsgid以下に書いてあるのが元の文、その次のmsgstr以下に文章書くと、翻訳文になる。元の英文に何かパラメーター付いてる場合は必ずパラメーターを翻訳文に設定しないとエラーが出る。</p>

<p>```py 例</p>

<h1>: path/to/python/module.py:23</h1>

<p>msgid &ldquo;Welcome to my site.&rdquo;
msgstr &ldquo;いらっしゃーい&rdquo;
```</p>

<h2>moファイル作成</h2>

<p>おもむろにコマンドを実行するとmoファイルが出来る</p>

<p><code>sh
django-admin.py compilemessages
</code></p>

<h2>settings.pyの設定</h2>

<p>これだけで動くと思ったら動かなかったので色々調べてみたらLOCALE_PATHSを設定しないといけなかった。</p>

<p>```py settings.py
LOCALE_PATHS = (</p>

<pre><code>"path/to/locale",
</code></pre>

<p>)
```</p>

<p>これ設定しておいたらちゃんと動いた。</p>

<p>あとは普通にrunserverとかでサーバ起動したら翻訳されてる</p>

<p>参考：<a href="http://docs.djangoproject.jp/en/latest/topics/i18n/translation.html">翻訳 — Django 1.4 documentation</a></p>

<p>翻訳したい文字列をマークする方法とかはリンク見れば分かる。あと、使いたい言語を選択出来るようにするとかそういう場合はLocaleMiddlewareを使うとかなんとかあるみたいだけどやってない。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[django-allauthを使ってみた]]></title>
    <link href="http://blog.shigepon.com/blog/2014/11/25/use-django-allauth/"/>
    <updated>2014-11-25T14:55:16+09:00</updated>
    <id>http://blog.shigepon.com/blog/2014/11/25/use-django-allauth</id>
    <content type="html"><![CDATA[<p>ソーシャルログインだけでなく、通常のログインもやりたかったので、django-allauthを試してみた。</p>

<h2>インストール</h2>

<p>pipで</p>

<p><code>sh
pip install django-allauth
</code></p>

<h2>ファイルでの設定</h2>

<p>settings.pyとurls.pyを設定</p>

<p>```py settings.py
INSTALLED_APPS = (
&hellip;</p>

<pre><code>'allauth',
'allauth.account',
'allauth.socialaccount',
'allauth.socialaccount.providers.twitter', #例としてTwitter
</code></pre>

<p>)
AUTHENTICATION_BACKENDS = (
&hellip;</p>

<pre><code>'allauth.account.auth_backends.AuthenticationBackend',
</code></pre>

<p>)
TEMPLATE_CONTEXT_PROCESSORS = (
&hellip;</p>

<pre><code>"django.core.context_processors.request",
"django.contrib.auth.context_processors.auth",
"allauth.account.context_processors.account",
"allauth.socialaccount.context_processors.socialaccount",
</code></pre>

<p>)
SITE_ID = 1
```</p>

<p>`&ldquo;py urls.py
urlpatterns = patterns(&rdquo;,</p>

<pre><code>...
url('^accounts/', include('allauth.urls')),
url('^accounts/profile/?', include('profile.urls',namespace='profile')), #ログイン後のリダイレクト先
</code></pre>

<p>)
```</p>

<h2>adminページでの設定</h2>

<p>ソーシャルログインする場合のみ必要。 <a href="http://domain/admin/">http://domain/admin/</a> にアクセスして管理者ログインしてSocial applicationを追加する。
フォーム内では名前を適当に付けて、Twitterの場合Client idにConsumer keyを登録して、Secret keyにConsumer secretを登録すればおk
最後に、利用可能サイトから一番上のサイト(SITE_ID=1と指定してるので)を選択するとおk</p>

<p><a href="http://domain/accounts">http://domain/accounts</a> にアクセスすればログインフォームが出てくる。出来た。</p>

<h2>テンプレートを上書きする</h2>

<p>プロジェクトディレクトリ/templates/account以下にファイルを設定すればおk
例えばログインのテンプレートなら、login.htmlを設置すればおk</p>

<p>元のファイルはgithubを見れば分かる</p>

<h2>使える機能</h2>

<p><a href="https://github.com/pennersr/django-allauth/blob/master/allauth/account/urls.py">githubのコード</a>
見れば大体分かる感じ</p>

<h2>ユーザー登録時のメール確認後の処理でハマる</h2>

<p>ユーザー登録すると通常は登録したメールアドレスにメールが届いて、そこに書いてあるURLにアクセスすると登録完了する手順が表示される。そこらへんの文章とかも上のテンプレート上書きでいけて問題ないんだけど、初期状態では登録が最後まで完了すると、そのままログインしてログイン時のリダイレクト先に移動してしまう。完了画面を表示したい場合はこれではまずい。</p>

<p>ので、<a href="http://django-allauth.readthedocs.org/en/latest/advanced.html">ここらへん</a>のCustom Redirectsの項目を参考にしてアダプタを作ってみた</p>

<p><code>py settings.py
ACCOUNT_ADAPTER = 'project.users.adapter.MyAccountAdapter'
</code></p>

<p>```py project/users/adapter.py
from django.conf import settings
from allauth.account.adapter import DefaultAccountAdapter</p>

<p>class MyAccountAdapter(DefaultAccountAdapter):</p>

<pre><code>def get_email_confirmation_redirect_url(self,request):
    path = "/account/complete"
    return path
</code></pre>

<p>```</p>

<p>でもこれだけでは上手くいかなかった。普通にログイン時のリダイレクト先に移動してしまった。どうもACCOUNT_LOGIN_ON_EMAIL_CONFIRMATIONをFalseにしないとダメみたい</p>

<p><code>py settings.py
ACCOUNT_LOGIN_ON_EMAIL_CONFIRMATION = False
</code></p>

<p>これでやっと/account/completeにリダイレクトしてくれた。ログインした状態ではダメみたいなので、ログインは再度やってもらわないといけない。うーん今のとこ仕方ないか・・・。</p>
]]></content>
  </entry>
  
</feed>
