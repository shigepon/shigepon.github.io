<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Django | shigeponが関心のある技術情報など]]></title>
  <link href="http://blog.shigepon.com/blog/categories/django/atom.xml" rel="self"/>
  <link href="http://blog.shigepon.com/"/>
  <updated>2014-11-18T09:33:59+09:00</updated>
  <id>http://blog.shigepon.com/</id>
  <author>
    <name><![CDATA[shigepon]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Django1.6.5でPostgreSQLとBootstrap使ったアプリを作ってみた(4):djangoで作ったプロジェクトをnginx+uwsgiで使って公開する]]></title>
    <link href="http://blog.shigepon.com/blog/2014/11/04/use-django-with-uwsgi/"/>
    <updated>2014-11-04T21:33:54+09:00</updated>
    <id>http://blog.shigepon.com/blog/2014/11/04/use-django-with-uwsgi</id>
    <content type="html"><![CDATA[<p>nginxのインストールは省略。ubuntuならaptitudeでインストールすればいい。デフォルトはちょっと古いけど。
djangoで作ったmysiteプロジェクトを/path/to/mysiteに置いているという前提。</p>

<h2>uwsgiをインストール</h2>

<p>全てvirtualenv上で行うとよさげ。
<a href="http://docs.djangoproject.jp/en/latest/howto/deployment/wsgi/uwsgi.html">uWSGI で Django を使う方法 — Django 1.4 documentation</a>ほぼそのまま</p>

<p><code>sh
$ source path/to/virtualenv/bin/activate
$(virtualenv) pip install uwsgi
</code></p>

<h2>uwsgi.iniを作る</h2>

<p>djangoのプロジェクトを/path/to/mysiteに置いた場合の設定。pidfile,daemonizeはプロジェクト毎に適当に設定。</p>

<p><code>ini uwsgi.ini
[uwsgi]
chdir=/path/to/mysite
module='mysite.wsgi:application'
master=True
pidfile=/tmp/project-master.pid
vacuum=True
max-requests=5000
daemonize=/var/log/uwsgi/mysite.log
socket=127.0.0.1:1234 #適当なポート
env= DJANGO_SETTINGS_MODULE=mysite.settings
</code></p>

<p>virtualenvで使う場合、sudoを使わないでuwsgiを起動するので、/var/log/uwsgi/yourproject.logの権限に注意する。
uwsgiの起動や終了のコマンドは以下の通り</p>

<p><code>sh
起動
$ uwsgi --ini uwsgi.ini
再起動
$ uwsgi --reload /tmp/project-master.pid
終了
$ uwsgi --stop /tmp/project-master.pid
</code></p>

<h2>nginxの設定</h2>

<p><a href="http://uwsgi-docs.readthedocs.org/en/latest/tutorials/Django_and_nginx.html">Setting up Django and your web server with uWSGI and nginx — uWSGI 2.0 documentation</a>を参考にした。</p>

<h3>uwsgi_params</h3>

<p>uwsgi_paramsは/etc/nginx/uwsgi_paramsに入ってるけど、修正する可能性もあるので、/path/to/mysite/uwsgi_paramsにコピーして、それを修正する。</p>

<h3>nginx.conf</h3>

<p>```
upstream django {</p>

<pre><code>server 127.0.0.1:1234; #uwsgi.iniで設定したポート番号
</code></pre>

<p>}</p>

<p>server {</p>

<pre><code>server_name hoge.example.com; # substitute your machine's IP address or FQDN
    charset     utf-8;
</code></pre>

<h1>max upload size</h1>

<pre><code>client_max_body_size 75M;   # adjust to taste
</code></pre>

<h1>Django media</h1>

<h1>Finally, send all non-media requests to the Django server.</h1>

<pre><code>location / {
    uwsgi_pass  django;
    include     /path/to/mysite/uwsgi_params; # the uwsgi_params file you installed
}
</code></pre>

<p>}
```</p>

<p>これを作成して、/etc/nginx/sites-enabledへシンボリックリンクを貼っておけば良い</p>

<p><code>sh
$ service nginx restart #reloadでもいい？
</code></p>

<p>でWebアクセスできるようになる。はず。</p>

<h2>静的ファイルの設定手順</h2>

<p>nginx+uwsgiでプロジェクトを公開した場合、manage.py runserverの場合と違い、静的ファイルの置場を設定しないといけないっぽい</p>

<p><code>
location ~ ^/static/ {
root /path/to/mysite;
break;
}
</code></p>

<p>settings.pyにSTATIC_URL, STATIC_ROOTを追加</p>

<p><code>py settings.py
STATIC_URL = '/static/'
STATIC_ROOT = "/path/to/mysite/static"
</code></p>

<p>テンプレでは次のように静的ファイルにアクセスする</p>

<p>```html</p>

<script type="text/javascript" src="js/hoge.js"></script>


<p>```</p>

<p>この設定だけでは静的ファイルが/path/to/mysite/staticに入ってないので、collectstaticコマンドを使ってファイルを集める</p>

<p><code>sh
$ python manage.py collectstatic
</code></p>

<p>これで各アプリに入ってる静的ファイルとadmin関連の静的ファイル全て持って来てくれる</p>

<h2>設定反映</h2>

<p><code>sh
$ sudo service nginx reload #ubuntuの場合
</code></p>

<h2>deploy時に良く使うメモ</h2>

<p>mysite/settings.pyを以外を設定ファイルとして読み込む場合はmanage.pyに以下のオプションを付ける
uwsgi.iniのenvも変更しておく</p>

<p><code>sh
--settings=mysite.settings_deploy
</code></p>

<p>設定ファイルは例えばこんな感じで書いて、元のsettings.pyを上書きする</p>

<p>```py
from pystock.settings import *
DATABASES = {</p>

<pre><code>.......
</code></pre>

<p>}</p>

<p>```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Django1.6.5でPostgreSQLとBootstrap使ったアプリを作ってみた(3):データの一覧とページングを用意する]]></title>
    <link href="http://blog.shigepon.com/blog/2014/07/02/django-show-list-with-paging/"/>
    <updated>2014-07-02T11:51:44+09:00</updated>
    <id>http://blog.shigepon.com/blog/2014/07/02/django-show-list-with-paging</id>
    <content type="html"><![CDATA[<h2>データの一覧表示</h2>

<p>あとで参考ページとか追記する予定。
データの一覧表示には何種類かファイルが必要（モデル、ビュー、テンプレート、URLディスパッチャー）。
それぞれこんな感じで用意する。</p>

<h3>モデル</h3>

<p>```python models.py
from django.db import models
class Bocho(models.Model):</p>

<pre><code>name = models.TextField()
court = models.TextField()
date = models.DateField()
....
</code></pre>

<p>```</p>

<p>モデルではフィールドとその属性を決める。このコードではクラスの中でMetaクラスを定義すると、モデルのテーブル名とかそういうのを色々定義出来るみたい。定義出来るフィールドの種類はDjangoのマニュアルに書いてあるのですぐ分かる。</p>

<h3>ビュー</h3>

<p>データをテンプレートに設定する部分。リクエストパラメータから、必要なデータを取得する部分。多分。</p>

<p>```python views.py
from django.shortcuts import render
from django.core.paginator import Paginator, PageNotAnInteger, EmptyPage
from bocho.models import Bocho
def index(request): #requestはHttpRequestオブジェクト</p>

<pre><code>objects = Bocho.objects.order_by("-date")
paginator = Paginator(objects,10) #10行毎にページング
page=request.GET.get('page',1) #GETパラメータからページ番号を取得(初期値は1)
try:
    object_list = paginator.page(page) #ここでページング
except PageNotAnInteger:
    object_list = paginator.page(1) #変なページ番号なら1ページ目
except EmptyPage:
    object_list = paginator.page(paginator.num_pages) #存在しないページ番号なら最後のページ
return render(request, 'list.html', {'object_list':object_list})
</code></pre>

<p>```</p>

<p>参考<a href="http://www.djangoproject.jp/doc/ja/1.0/ref/request-response.html">リクエストオブジェクトとレスポンスオブジェクト — Django v1.0 documentation</a></p>

<h3>テンプレート</h3>

<p>bocho/templates/list.htmlを作る。中身は一部だけ。でビューで割り当てた変数を表示する。
あと、色々テンプレート用のタグがある。これもDjangoマニュアルを見ると分かる。</p>

<p>```html list.html
</p>

<table class="table">
    <thead><th class="span2">日付</th><th>名称</th><th>裁判所</th></thead>
{% for object in object_list %}
<tr>
    <td>{{ object.date|date:"Y-m-d" }}</td>
    <td>{{ object.name }}</td>
    <td>{{ object.court }}</td>
</tr>
{% endfor %}
</table>


<p>
```</p>

<h3>URLディスパッチャー</h3>

<p>ドメイン名/bocho/で一覧表示出来るように正規表現使ってviewsに割り当てる。</p>

<p>myproject/urls.py</p>

<p>`&ldquo;python urls.py
from django.conf.urls import patterns, include, url
urlpatterns = patterns(&rdquo;,</p>

<pre><code># Examples:
# url(r'^$', 'pycourt.views.home', name='home'),
# url(r'^blog/', include('blog.urls')),
url(r'bocho/^', include('bocho.urls',namespace='bocho')), #url(正規表現, 別のurlsに投げる設定。ここではbocho/urls.pyに投げる)
</code></pre>

<p>)
```</p>

<p>bocho/urls.pyは無いので作る。</p>

<p>`&ldquo;python urls.py
from django.conf.urls import patterns, include, url
from bocho import views
urlpatterns = patterns(&rdquo;,</p>

<pre><code>url(r'^$', views.index, name="index"), #url(正規表現, 割り当てるビュー, URL作ったりリダイレクトする時に付けておくと便利な名前)
</code></pre>

<p>)
```</p>

<p>一覧はどうせページングするので、views.pyはこの形で覚えておくと良いかも</p>

<h2>ページング</h2>

<p>どうせbootstrapを使うのでdjango-bootstrap-toolkitを使う方法を載せる。
ページ分けする対象をobject_list、ページ送りのURLにpage=以外に設定するパラメータをreqとすると、</p>

<p><code>html list.html

{% load bootstrap_toolkit %}↲
{% bootstrap_pagination object_list align="center" extra=req %}

</code></p>

<p>と設定しておけば良い。</p>

<h2>ページングにパラメータを付ける</h2>

<p>ついでにメモ
例えば"date=2001-01-01"みたいなパラメータを設定したいんだけど、割り当ててる変数？は日付オブジェクトの場合</p>

<p><code>html list.html

{% bootstrap\_pagination object\_list align="center" extra=date|date:"Y-m-d"|s    tringformat:"%date=%s"|slice:"1:" %}

</code></p>

<p>こんな感じで文字列をくっつけてパラメータにすることが出来る。かなり強引<a href="https://www.google.com/url?q=http://d.hatena.ne.jp/feiz/20110414/1302771447&amp;usd=2&amp;usg=AFQjCNFN9kzyrEJj_WZEatK2wIL07eaD0w">参考</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Django1.6.5でPostgreSQLとBootstrap使ったアプリを作ってみた(2):Bootstrapを使ってみる]]></title>
    <link href="http://blog.shigepon.com/blog/2014/06/25/django-with-bootstrap/"/>
    <updated>2014-06-25T21:41:23+09:00</updated>
    <id>http://blog.shigepon.com/blog/2014/06/25/django-with-bootstrap</id>
    <content type="html"><![CDATA[<p>テンプレートにBootstrapを当てはめたいので、Bootstrap関連のパッケージを探してみた。ググってみて<a href="https://github.com/dyve/django-bootstrap-toolkit">django-bootstrap-toolkit</a>が良さそうかなと思ったので、使ってみた。</p>

<p>インストール</p>

<p><code>sh
$ pip install django-bootstrap-toolkit
</code></p>

<p>myproject/settings.pyのINSTALLED_APPSに以下を追加</p>

<p><code>
'bootstrap-toolkit'
</code></p>

<p>テンプレートを書く</p>

<p><code>html

{% load bootstrap_toolkit %}} #bootstrap-toolkitを使うページ全てに必要っぽい
...
&lt;head&gt;
{% bootstrap_stylesheet_tag %}  #bootstrapのcssへのタグ(CDNから読み込み)
{% bootstrap_stylesheet_tag "responsive %} #bootstrapのレスポンシブページ用タグ(CDNから読み込み)
{% bootstrap_javascript_tag %}  #bootstrapのjavascriptへのタグ(CDNから読み込み)

&lt;/head&gt;
あとは普通にbootstrapのタグを書く
</code></p>

<p>こんな感じで最低限使える。フォームに関してはもっと色々出来るみたいだけど、まだやってない。パッケージ使ってみたけど、これだけなら普通にbootstrapのファイルを読み込めば済むんだけど、フォーム関連などフィルタやカスタムタグがあるみたい。便利そうなので、これを使うことにしよう。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Django1.6.5でPostgreSQLとBootstrap使ったアプリを作ってみた(1):とりあえずDjangoプロジェクトとアプリを作ってみた]]></title>
    <link href="http://blog.shigepon.com/blog/2014/06/18/start-django-project/"/>
    <updated>2014-06-18T12:49:29+09:00</updated>
    <id>http://blog.shigepon.com/blog/2014/06/18/start-django-project</id>
    <content type="html"><![CDATA[<p>Djangoはプロジェクトを作っておいて、アプリ毎に細かく機能を分けて、プロジェクトで統合するみたいな形式を取るみたい。なのでまずはDjangoプロジェクトを作成</p>

<p><code>sh
$ django-admin.py startproject myproject
</code></p>

<p>とすると、カレントフォルダにmyprojectフォルダが出来る。ファイル構成を見ると、</p>

<p>```
myproject/
  manage.py
  myproject/</p>

<pre><code>__init__.py
settings.py
urls.py
wsgi.py
</code></pre>

<p>```</p>

<p>となっている。myprojectフォルダ内のファイルに共通設定を書くという感じになりそうだ。PostgreSQLに接続するので、settings.pyを修正</p>

<p>```py
DATABASES = {</p>

<pre><code>'default': {
'ENGINE': 'django.db.backends.postgresql_psycopg2',
'NAME': 'hoge',
'USER': 'username',
'PASSWORD': '******',
'HOST': 'hostname or ip',
'PORT': '5432',
}
</code></pre>

<p>```</p>

<p>あと、psycopg2をインストールしていないので</p>

<p><code>sh
$ sudo pip install psycopg2
</code></p>

<p>とやって</p>

<p><code>sh
$ cd myproject
$ python manage.py syncdb
</code></p>

<p>とやると、hogeに色々テーブルが出来る。INSTALLED_APPSに書いてあるアプリに関するテーブルみたい。初期状態では以下のアプリが入るみたい。</p>

<p><code>
django.contrib.admin - 管理用サイト
django.contrib.auth - 認証
django.contrib.contenttypes - ??
django.contrib.sessions - セッション管理
django.contrib.messages - ??
django.contrib.staticfile - 静的ファイル用アプリ
</code></p>

<p>テーブルは以下のものが作られた
<code>
auth_group
auth_group_permissions
auth_permission
auth_user
auth_user_groups
auth_user_user_permissions
django_admin_log
django_content_type
django_session
</code></p>

<p>あと上のコマンド実行時に、管理者ユーザー作るかどうか聞かれる。とりあえず作った。</p>

<p>DB設定済ませたので、おもむろにアプリ作成。Railsの時と同様に傍聴情報の出力をやってみるか。</p>

<p><code>sh
$ python manage.py startapp bocho
</code></p>

<p>を実行するとbochoフォルダが出来てその中に</p>

<p><code>
bocho/
  __init__.py
  admin.py
  models.py
  tests.py
  views.py
</code></p>

<p>が出来た。とりあえずここまで。</p>
]]></content>
  </entry>
  
</feed>
