<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Bootstrap | shigeponが関心のある技術情報など]]></title>
  <link href="http://blog.shigepon.com/blog/categories/bootstrap/atom.xml" rel="self"/>
  <link href="http://blog.shigepon.com/"/>
  <updated>2014-12-17T14:56:03+09:00</updated>
  <id>http://blog.shigepon.com/</id>
  <author>
    <name><![CDATA[shigepon]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[javascriptでカレンダーを書くライブラリを調べてみた]]></title>
    <link href="http://blog.shigepon.com/blog/2014/12/17/check-table-library/"/>
    <updated>2014-12-17T13:37:38+09:00</updated>
    <id>http://blog.shigepon.com/blog/2014/12/17/check-table-library</id>
    <content type="html"><![CDATA[<p>Django使ったサイトでカレンダーを表示しようとしたんだけど、HTMLCalendarとかだとレスポンシブにならないし、カスタマイズ面倒だしということで、javascriptで生成して、イベントデータはajaxリクエストから取り出すようにしたいと思ってライブラリを調べてみたのと感想を書いておく。結論からすると、FullCalendarが汎用的で使えそう。</p>

<h2>Zabuto Calendar</h2>

<p><a href="https://github.com/zabuto/calendar">github</a>
jqueryプラグイン。イベントは数字が表示される。カレンダーの表示は月毎のみ。言語設定に日本語は無い。日本語で日付表示する方法はReadmeに書かれていなかった。</p>

<h2>Calendario</h2>

<p><a href="http://tympanus.net/codrops/2012/11/27/calendario-a-flexible-calendar-plugin/">ダウンロードページ</a></p>

<p>デモは奇麗に見えるんだけど、そもそもメインのcssが何故かdemo.cssみたいなのをインポートしてて、これは無いんじゃないと思ったのと背景画像無しだとイメージに合わなかった。あと、デモサイトがあるだけで、最初に必要なファイルとかが分かりにくかった。</p>

<h2>pickadate</h2>

<p><a href="http://amsul.ca/pickadate.js/">ダウンロードページ</a></p>

<p>カレンダーだけじゃなく、タイムスケジュールの表示もあるライブラリ。でもパッと使ってみただけだとモーダル以外での表示方法が分からなかった。デートピッカーとして使うなら良い？</p>

<h2>FullCalendar</h2>

<p><a href="http://fullcalendar.io/">Home</a></p>

<p>GoogleCalendarっぽいカレンダーが作れて、カスタマイズ出来て、タイムスケジュールも表示出来るライブラリ。bower使うとか書いてあるけど、zip解凍して出て来たファイルを使うことでとりあえずはいけた。jqueryと<a href="http://momentjs.com/">Moment</a>ってライブラリが要る。汎用的だけど、それだけに色々見ないといけないけど、マニュアルあるので分かるようになっている。日本語の言語ファイルは無いが、曜日等のカスタマイズ方法がマニュアルに書いてあるので、日本語化出来る。</p>

<h2>bootstrap-calendar</h2>

<p><a href="https://github.com/Serhioromano/bootstrap-calendar">github</a></p>

<p>試してない。結構汎用的な感じ？言語ファイルに日本語は無い。曜日を日本語化する方法がReadmeに無くて良くわからん。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Django1.6.5でPostgreSQLとBootstrap使ったアプリを作ってみた(3):データの一覧とページングを用意する]]></title>
    <link href="http://blog.shigepon.com/blog/2014/07/02/django-show-list-with-paging/"/>
    <updated>2014-07-02T11:51:44+09:00</updated>
    <id>http://blog.shigepon.com/blog/2014/07/02/django-show-list-with-paging</id>
    <content type="html"><![CDATA[<h2>データの一覧表示</h2>

<p>あとで参考ページとか追記する予定。
データの一覧表示には何種類かファイルが必要（モデル、ビュー、テンプレート、URLディスパッチャー）。
それぞれこんな感じで用意する。</p>

<h3>モデル</h3>

<p>```python models.py
from django.db import models
class Bocho(models.Model):</p>

<pre><code>name = models.TextField()
court = models.TextField()
date = models.DateField()
....
</code></pre>

<p>```</p>

<p>モデルではフィールドとその属性を決める。このコードではクラスの中でMetaクラスを定義すると、モデルのテーブル名とかそういうのを色々定義出来るみたい。定義出来るフィールドの種類はDjangoのマニュアルに書いてあるのですぐ分かる。</p>

<h3>ビュー</h3>

<p>データをテンプレートに設定する部分。リクエストパラメータから、必要なデータを取得する部分。多分。</p>

<p>```python views.py
from django.shortcuts import render
from django.core.paginator import Paginator, PageNotAnInteger, EmptyPage
from bocho.models import Bocho
def index(request): #requestはHttpRequestオブジェクト</p>

<pre><code>objects = Bocho.objects.order_by("-date")
paginator = Paginator(objects,10) #10行毎にページング
page=request.GET.get('page',1) #GETパラメータからページ番号を取得(初期値は1)
try:
    object_list = paginator.page(page) #ここでページング
except PageNotAnInteger:
    object_list = paginator.page(1) #変なページ番号なら1ページ目
except EmptyPage:
    object_list = paginator.page(paginator.num_pages) #存在しないページ番号なら最後のページ
return render(request, 'list.html', {'object_list':object_list})
</code></pre>

<p>```</p>

<p>参考<a href="http://www.djangoproject.jp/doc/ja/1.0/ref/request-response.html">リクエストオブジェクトとレスポンスオブジェクト — Django v1.0 documentation</a></p>

<h3>テンプレート</h3>

<p>bocho/templates/list.htmlを作る。中身は一部だけ。でビューで割り当てた変数を表示する。
あと、色々テンプレート用のタグがある。これもDjangoマニュアルを見ると分かる。</p>

<p>```html list.html
</p>

<table class="table">
    <thead><th class="span2">日付</th><th>名称</th><th>裁判所</th></thead>
{% for object in object_list %}
<tr>
    <td>{{ object.date|date:"Y-m-d" }}</td>
    <td>{{ object.name }}</td>
    <td>{{ object.court }}</td>
</tr>
{% endfor %}
</table>


<p>
```</p>

<h3>URLディスパッチャー</h3>

<p>ドメイン名/bocho/で一覧表示出来るように正規表現使ってviewsに割り当てる。</p>

<p>myproject/urls.py</p>

<p>`&ldquo;python urls.py
from django.conf.urls import patterns, include, url
urlpatterns = patterns(&rdquo;,</p>

<pre><code># Examples:
# url(r'^$', 'pycourt.views.home', name='home'),
# url(r'^blog/', include('blog.urls')),
url(r'bocho/^', include('bocho.urls',namespace='bocho')), #url(正規表現, 別のurlsに投げる設定。ここではbocho/urls.pyに投げる)
</code></pre>

<p>)
```</p>

<p>bocho/urls.pyは無いので作る。</p>

<p>`&ldquo;python urls.py
from django.conf.urls import patterns, include, url
from bocho import views
urlpatterns = patterns(&rdquo;,</p>

<pre><code>url(r'^$', views.index, name="index"), #url(正規表現, 割り当てるビュー, URL作ったりリダイレクトする時に付けておくと便利な名前)
</code></pre>

<p>)
```</p>

<p>一覧はどうせページングするので、views.pyはこの形で覚えておくと良いかも</p>

<h2>ページング</h2>

<p>どうせbootstrapを使うのでdjango-bootstrap-toolkitを使う方法を載せる。
ページ分けする対象をobject_list、ページ送りのURLにpage=以外に設定するパラメータをreqとすると、</p>

<p><code>html list.html

{% load bootstrap_toolkit %}↲
{% bootstrap_pagination object_list align="center" extra=req %}

</code></p>

<p>と設定しておけば良い。</p>

<h2>ページングにパラメータを付ける</h2>

<p>ついでにメモ
例えば"date=2001-01-01"みたいなパラメータを設定したいんだけど、割り当ててる変数？は日付オブジェクトの場合</p>

<p><code>html list.html

{% bootstrap\_pagination object\_list align="center" extra=date|date:"Y-m-d"|s    tringformat:"%date=%s"|slice:"1:" %}

</code></p>

<p>こんな感じで文字列をくっつけてパラメータにすることが出来る。かなり強引<a href="https://www.google.com/url?q=http://d.hatena.ne.jp/feiz/20110414/1302771447&amp;usd=2&amp;usg=AFQjCNFN9kzyrEJj_WZEatK2wIL07eaD0w">参考</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Django1.6.5でPostgreSQLとBootstrap使ったアプリを作ってみた(2):Bootstrapを使ってみる]]></title>
    <link href="http://blog.shigepon.com/blog/2014/06/25/django-with-bootstrap/"/>
    <updated>2014-06-25T21:41:23+09:00</updated>
    <id>http://blog.shigepon.com/blog/2014/06/25/django-with-bootstrap</id>
    <content type="html"><![CDATA[<p>テンプレートにBootstrapを当てはめたいので、Bootstrap関連のパッケージを探してみた。ググってみて<a href="https://github.com/dyve/django-bootstrap-toolkit">django-bootstrap-toolkit</a>が良さそうかなと思ったので、使ってみた。</p>

<p>インストール</p>

<p><code>sh
$ pip install django-bootstrap-toolkit
</code></p>

<p>myproject/settings.pyのINSTALLED_APPSに以下を追加</p>

<p><code>
'bootstrap-toolkit'
</code></p>

<p>テンプレートを書く</p>

<p><code>html

{% load bootstrap_toolkit %}} #bootstrap-toolkitを使うページ全てに必要っぽい
...
&lt;head&gt;
{% bootstrap_stylesheet_tag %}  #bootstrapのcssへのタグ(CDNから読み込み)
{% bootstrap_stylesheet_tag "responsive %} #bootstrapのレスポンシブページ用タグ(CDNから読み込み)
{% bootstrap_javascript_tag %}  #bootstrapのjavascriptへのタグ(CDNから読み込み)

&lt;/head&gt;
あとは普通にbootstrapのタグを書く
</code></p>

<p>こんな感じで最低限使える。フォームに関してはもっと色々出来るみたいだけど、まだやってない。パッケージ使ってみたけど、これだけなら普通にbootstrapのファイルを読み込めば済むんだけど、フォーム関連などフィルタやカスタムタグがあるみたい。便利そうなので、これを使うことにしよう。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rails4でPostgreSQLとBootstrap使ったアプリを作ってみた(4):ビューにBootstrapを使う]]></title>
    <link href="http://blog.shigepon.com/blog/2014/03/14/a-way-of-creating-rails-application4/"/>
    <updated>2014-03-14T09:10:41+09:00</updated>
    <id>http://blog.shigepon.com/blog/2014/03/14/a-way-of-creating-rails-application4</id>
    <content type="html"><![CDATA[<p>参考にした記事URL一覧</p>

<ul>
<li><a href="http://ubiqlog.com/archives/8749">Ruby on Rails 4.0正式リリースとBootstrapの正しい設定法 | ユービックログ研究所</a></li>
<li><a href="http://railscasts.com/episodes/328-twitter-bootstrap-basics?language=ja&amp;view=asciicast">#328 Twitter Bootstrap Basics &ndash; RailsCasts</a></li>
</ul>


<p>今回はそっけない表示画面をそれっぽくするためにビューにBootstrapを当てはめる。</p>

<p>Gemfileを編集</p>

<p><code>
+gem 'less-rails'
+gem 'twitter-bootstrap-rails'
+gem 'execjs'
-gem 'sass-rails'
</code></p>

<p>以下のコマンドを実行</p>

<p><code>sh
$ bundle install
$ rails g bootstrap:install
$ rails g bootstrap:layout application
</code></p>

<p>と実行したけど、最後のコマンドはビューを勝手に色々いじるので、しない方が良いかもしれない。上のコマンドを実行すると</p>

<p><code>
app/assets/javascripts/application.js
app/assets/javascripts/bootstrap.js.coffee
app/assets/stylesheets/application.css
app/assets/stylesheets/bootstrap_and_overrides.css.less
</code></p>

<p>が出来る。さて、この状態で出力を見ると、ページ上部がナビゲーションバーで隠れてしまった。
app/assets/stylesheets/bootstrap_and_overrides.css.lessを修正することで対処する</p>

<p>変更前</p>

<p><code>css
@import "twitter/bootstrap/bootstrap";
@import "twitter/bootstrap/responsive";
</code></p>

<p>変更後</p>

<p><code>css
@import "twitter/bootstrap/bootstrap";
body {padding-top:60px;}
@import "twitter/bootstrap/responsive";
</code></p>

<p>これでページが隠れなくなる。レイアウト変更にはapp/views/layouts/application.html.erbを編集する必要がある。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rails4でPostgreSQLとBootstrap使ったアプリを作ってみた(3):データ一覧ページを作って、詳細ページへのリンクを貼る]]></title>
    <link href="http://blog.shigepon.com/blog/2014/03/10/a-way-of-creating-rails-application3/"/>
    <updated>2014-03-10T18:10:41+09:00</updated>
    <id>http://blog.shigepon.com/blog/2014/03/10/a-way-of-creating-rails-application3</id>
    <content type="html"><![CDATA[<p>参考にした記事URL一覧</p>

<ul>
<li><a href="http://openbook4.me/projects/92">小学生でもわかるRuby on Rails入門 | OpenBook</a></li>
<li><a href="http://qiita.com/somewhatgood@github/items/9890e75b4c195d47715a">Rails &ndash; link_to の引数と展開の違いまとめ &ndash; Qiita</a></li>
</ul>


<p>前回に引き続き<a href="http://openbook4.me/projects/92">小学生でもわかるRuby on Rails入門 | OpenBook</a>を参考にしているが、色々すっとばして16章から適当に確認しながら適当に実装する。</p>

<h3>一覧表示</h3>

<p><code>rb
def index
  @events = Event.all
end
</code></p>

<p>と書くとテーブルにあるデータ全て取ってくるらしい（DAOで良くある書式）。
ビューでは@eventsに対してループさせる必要があるので次のような書式になる。
app/views/events/index.html.erbを次のように書き換える</p>

<p>```erb</p>

<h1>Events</h1>


<table class="table">
    <thead>
        <th>日時</th><th>イベント名</th>
    </thead>
    <% @events.each do |event| %>
        <tr>
            <td><%= event.date.strftime('%Y/%m/%d %H:%m') %></td>
            <td><%= event.name %></td>
        </tr>
    <% end %>
</table>


<p>```</p>

<p>[<a href="http://0.0.0.0:3000/events/index">http://0.0.0.0:3000/events/index</a>]にアクセスすれば一覧が表示される。どこかのページでeachでなくeach_with_indexという書き方してるページあったけど、Rails4では動かなかった。
バージョン違い？</p>

<h3>リンクを貼る</h3>

<p>一覧と詳細を繋げたいので、リンクを貼る。link_toというのを使うらしい。 <a href="http://qiita.com/somewhatgood@github/items/9890e75b4c195d47715a">Rails &ndash; link_to の引数と展開の違いまとめ &ndash; Qiita</a>の「基本」を使えば今回は十分。上のerbを次のように書き換える</p>

<p>```erb</p>

<h1>Events</h1>


<table class="table">
    <thead>
        <th>日時</th><th>イベント名</th><th>link</th>
    </thead>
    <% @events.each do |event| %>
        <tr>
            <td><%= event.date.strftime('%Y/%m/%d %H:%m') %></td>
            <td><%= event.name %></td>
            <td><%= link_to "詳細",:controller=>"events",:action=>"show",:eventid=>event.id %></td>
        </tr>
    <% end %>
</table>


<p>```</p>

<p>controllerはコントローラー、actionはビュー？かどうか分からないけど、コントローラー内で定義してるメソッド、あとパラメーター名（eventid）はconfig/routes.rbで指定したパラメーター名が使用出来る（と思う）。とりあえずこう作ったけど、最終的にハッシュにした方がいいんだろな。</p>

<h3>一覧の範囲を絞り込む</h3>

<p>テーブルのデータ全部でなく、一部のデータに絞り込んで表示してみる。
日付のデータがあるので、今月のデータに絞り込んでみる。app/controllers/events_controller.rbを編集</p>

<p>```rb
  def index</p>

<pre><code>  from = Time.now.at_beginning_of_month
  to = from+1.month
  @events = Event.all(:conditions=&gt;["date&gt;=? and date&lt;=?",from,to],:order=&gt;'date')
</code></pre>

<p>  end
```</p>

<p>ここらへんは<a href="http://waka.hatenablog.com/entry/2013/04/05/083349">ActiveRecordで日付の範囲指定 &ndash; yo_waka&rsquo;s blog</a>を参考にしながら適当に実装した。ActiveRecordは色んな表現方法があるのでどうしたもんかな。ただ、数字も何でもオブジェクトってのは面白い。</p>
]]></content>
  </entry>
  
</feed>
