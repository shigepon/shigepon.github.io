<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: nginx | shigeponが関心のある技術情報など]]></title>
  <link href="http://blog.shigepon.info/blog/categories/nginx/atom.xml" rel="self"/>
  <link href="http://blog.shigepon.info/"/>
  <updated>2016-02-25T09:36:40+09:00</updated>
  <id>http://blog.shigepon.info/</id>
  <author>
    <name><![CDATA[shigepon]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[nginx memo]]></title>
    <link href="http://blog.shigepon.info/blog/2014/03/20/nginx-memo/"/>
    <updated>2014-03-20T16:04:53+09:00</updated>
    <id>http://blog.shigepon.info/blog/2014/03/20/nginx-memo</id>
    <content type="html"><![CDATA[<h2>Nginxで503コードのページをカスタマイズする</h2>

<p>なるべく手軽にメンテナンスページを出すための手順</p>

<ul>
<li>path/to/root/error/503.htmlにページを用意する。</li>
<li>path/to/root/error/以下に画像やcss、javascriptなど必要なものを用意する。</li>
<li>nginxの設定を変更する。必要な部分だけ抜粋</li>
</ul>


<p>```
server {</p>

<pre><code>server_name xxx.xxx;
    set $maintenance false;
    if (-f $document_root/error/503.html ){
            set $maintenance true;
    }
    if ($uri ~ "^/error/") {
        set $maintenance false;
    }
    if ($remote_addr = XXX.XXX.XXX.XXX ){
            set $maintenance false;#指定したIPからのアクセスは普通に見れるようにする
    }
    if ($maintenance = true) {
            return 503;
    }
    error_page 503 @maintenance;
    location @maintenance {
            rewrite ^(.*)$ /error/503.html break;
            expires 0;
    }
    location /error/ {}
</code></pre>

<!-- more -->


<p>}
```</p>

<p>path/to/root/error/503.htmlがあれば、メンテナンス画面を表示する。なければ表示しない。一度nginx設定をリロードすればその後はリロードの必要もない。</p>

<h2>末尾に必ずスラッシュを入れる</h2>

<p>djangoで末尾スラッシュで無い場合に上手くurlsを組み立てられなかったりしたので・・・djangoは悪くなく、自分の実装のせいなんだけど。</p>

<p><code>
rewrite ^([^.]*[^/])$ $1/ permanent;
</code></p>

<p>でおk</p>

<p>参考：<a href="http://stackoverflow.com/questions/645853/add-slash-to-the-end-of-every-url-need-rewrite-rule-for-nginx">regex &ndash; Add slash to the end of every url (need rewrite rule for nginx) &ndash; Stack Overflow</a>```</p>

<h2>書式チェック</h2>

<p><code>sh
$ sudo nginx -t -c /path/to/nginx.conf
</code></p>

<p>でチェック出来る</p>

<p>参考：<a href="http://qiita.com/yaotti/items/bd6774888a790c00e6fd">nginxで設定ファイルチェック &ndash; Qiita</a></p>

<h2>ltsvでログを取る</h2>

<p>※　まずerror_logでは指定出来ないので注意</p>

<p>ログのフォーマットにltsvを追加する。/etc/nginx/nginx.conf内でも
/etc/nginx/conf.d/*.conf内でもおk</p>

<p>```
log_format ltsv  &ldquo;time:$time_local&rdquo;</p>

<pre><code>            "\thost:$remote_addr"
            "\tforwardedfor:$http_x_forwarded_for"
            "\treq:$request"
            "\tstatus:$status"
            "\tsize:$body_bytes_sent"
            "\treferer:$http_referer"
            "\tua:$http_user_agent"
            "\treqtime:$request_time"
            "\tvhost:$host";
</code></pre>

<p>```</p>

<p>sites-available内でのaccess_logの設定を以下のように変更</p>

<p><code>
access_log /var/log/nginx/access.log ltsv;
</code></p>

<p>参考：<a href="http://toshitanian.hatenablog.com/entry/2013/10/25/023838">nginxのerror_logはformat指定できない． &ndash; としたにあんの左脳</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Basic認証する時に気をつけること]]></title>
    <link href="http://blog.shigepon.info/blog/2014/02/03/basic-auth/"/>
    <updated>2014-02-03T07:48:33+09:00</updated>
    <id>http://blog.shigepon.info/blog/2014/02/03/basic-auth</id>
    <content type="html"><![CDATA[<p>rhaco3で作ったWebサービス全体にBasic認証をかけた時にちょっとハマったのでメモ。</p>

<h2>症状</h2>

<p>rhaco3の認証が入っているサービスで全体にBasic認証をかけると、</p>

<ol>
<li>トップページに入る時にBasic認証がかかる</li>
<li>認証完了</li>
<li>ログインページに移動</li>
<li>またBasic認証がかかる</li>
</ol>


<p>というケースが見られました。Webサーバにはnginxを使いました。</p>

<!-- more -->


<h2>原因</h2>

<p>nginx側の設定が悪いのかなとか色々試行錯誤しましたが、結論としてrhaco3の認証部分が401のレスポンスを吐いてたのが問題でした。</p>

<!-- more -->


<p><a href="http://www.slogical.co.jp/tech/http_basicauth.html">Basic認証の動作</a>というページで詳しく書かれています（以下に引用します）が</p>

<blockquote><ol>
<li>ユーザーがクライアント（IE等のWebブラウザ）に目的のURLを入力する。</li>
<li>クライアントが、Authorization: ヘッダを付加しないで、
目的のコンテンツにアクセスする。</li>
<li>サーバーは、401 Authorization Required のレスポンスを返して、
クライアントに認証が必要である旨を伝える。</li>
<li>クライアントがユーザーに ID/PW の入力を求める
（IE等のブラウザが、ポップアップウインドウを出して、
　ID/PW の入力をユーザーに求めるアレです。）</li>
<li>ユーザーが ID/PW を入力する。</li>
<li>クライアントが、Authorization: ヘッダに ID/PW の情報を付加
して目的のコンテンツに再度アクセスする。</li>
<li>サーバが ID/PW を解析して、認証OKであればコンテンツをクライ
アントに返す。</li>
<li>クライアントがコンテンツを表示して、ユーザーがそれを閲覧する。</li>
</ol>
</blockquote>

<p>```</p>

<pre><code>    +------+  1---&gt;  +--------+  2---&gt;  +-------+
    |      |  &lt;---4  |        |  &lt;---3  |       |
    | User |         | Client |         | httpd |
    |      |  5---&gt;  |        |  6---&gt;  |       |
    +------+  &lt;---8  +--------+  &lt;---7  +-------+
</code></pre>

<p>```</p>

<blockquote><p>（コンテンツデータを１つ取得するために、リクエスト・レスポンスの
　やりとりが２回行われています。）</p>

<p>なお、
Authorization: ヘッダには、
Basic認証の ID と PW とを :（半角のコロン）でつなげた文字列を、
base64した値が格納さています。
（例えば、
　Authorization: Basic dXNlcjAxOnBhc3N3b3JkCg==　といったようになります。）</p></blockquote>

<p>ように、Basic認証ではサーバが401のレスポンスを返すことで、ブラウザ側にポップアップを出させているようです。その為rhaco3の認証部分で401のレスポンスを出した時に認証の情報がリセットされてしまったのではないかと思われます。</p>

<h2>対処</h2>

<p>rhaco3の認証部分(\org\rhaco\flow\parts\RequestFlow::do_login)で401を送信していた部分で200を送信することで対処できました。</p>

<p>rhaco3で見られた症状でしたが、他のフレームワークでも特に何も考えてなかったら引っかかる可能性があります。というかBasic認証とフレームワークの認証両方掛けるとか普通無いですよねそうですよね。</p>
]]></content>
  </entry>
  
</feed>
