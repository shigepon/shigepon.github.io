<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Rails | shigeponが関心のある技術情報など]]></title>
  <link href="http://blog.shigepon.com/blog/categories/rails/atom.xml" rel="self"/>
  <link href="http://blog.shigepon.com/"/>
  <updated>2014-08-29T09:07:48+09:00</updated>
  <id>http://blog.shigepon.com/</id>
  <author>
    <name><![CDATA[shigepon]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[find by sqlでプリペアードステートメントを使う]]></title>
    <link href="http://blog.shigepon.com/blog/2014/05/28/use-prepared-statement-in-find-by-sql/"/>
    <updated>2014-05-28T08:19:12+09:00</updated>
    <id>http://blog.shigepon.com/blog/2014/05/28/use-prepared-statement-in-find-by-sql</id>
    <content type="html"><![CDATA[<p>ActiveRecordは便利なのかどうか知らないけど、allなどのメソッドで:conditionとかで?を使うことが出来る。だけど、sqlを直接打ちたいケースは必ず出てくるので、その時に?使いたいなと思ったけど、なかなか例文が無かった。</p>

<p>んで結局こうするといいみたい。</p>

<p><code>rb
@results = Model.find_by_sql(["select * from hoge where fuga=?","hage"])
</code></p>

<p>しかし他にも直接sqlを実行する方法があって、</p>

<p><code>rb
ActiveRecord::Base.connection.raw_connection.exec("select * from hoge where fuga = :1", 'hage')
</code></p>

<p>こんな書き方も出来るらしい。ActiveRecord::Base.connectionでは無理らしい。うーむ。むか〜しからRailsはちょっとレールからはずれるととたんに難しくなるんだなー。やる気が減って来た＞＜。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Railsでurl forを使ったらshows proxy passで設定したURLになってしまう件]]></title>
    <link href="http://blog.shigepon.com/blog/2014/05/05/rails-url-for-shows-proxy-pass/"/>
    <updated>2014-05-05T14:00:54+09:00</updated>
    <id>http://blog.shigepon.com/blog/2014/05/05/rails-url-for-shows-proxy-pass</id>
    <content type="html"><![CDATA[<p>Nginx, Unicorn, Rails4でurl_forを使ったら変なURLになってしまったので対処法を書いておく</p>

<p>Ninxで</p>

<p><code>
server hoge.com;
proxy_pass http://upstream;
</code></p>

<p>のような設定をしているとurl_forで</p>

<p><code>
http://hoge.com
</code></p>

<p>となってほしいところが</p>

<p><code>
http://upstream
</code></p>

<p>となってしまうので、ググって対処を調べた。</p>

<p><a href="http://stackoverflow.com/questions/5834025/how-to-preserve-request-url-with-nginx-proxy-pass">ruby &ndash; How to preserve request url with nginx proxy_pass &ndash; Stack Overflow</a>を参考にして</p>

<p><code>
proxy_set_header Host http://hoge.com
</code></p>

<p>を追記したら上手く動いた。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Capistrano3でbitbucketからデプロイしようとしたらハマった話]]></title>
    <link href="http://blog.shigepon.com/blog/2014/05/04/capistrano3-shows-error-when-deploy-from-bitbucket/"/>
    <updated>2014-05-04T10:04:00+09:00</updated>
    <id>http://blog.shigepon.com/blog/2014/05/04/capistrano3-shows-error-when-deploy-from-bitbucket</id>
    <content type="html"><![CDATA[<p>まだデプロイ作業を途中までしか確認していないので、とりあえずハマったポイントを書いておく。
 デプロイ作業をテストしてみたらこんなエラーが出た</p>

<p><code>sh
$ bundle exec cap production deploy:check
 INFO [5f874a7e] Running /usr/bin/env mkdir -p /tmp/hoge/ on fuga
DEBUG [5f874a7e] Command: /usr/bin/env mkdir -p /tmp/hoge/
 INFO [5f874a7e] Finished in 0.321 seconds with exit status 0 (successful).
DEBUG Uploading /tmp/hoge/git-ssh.sh 0.0%
 INFO Uploading /tmp/hoge/git-ssh.sh 100.0%
 INFO [c2bf6ab8] Running /usr/bin/env chmod +x /tmp/hoge/git-ssh.sh on fuga
DEBUG [c2bf6ab8] Command: /usr/bin/env chmod +x /tmp/hoge/git-ssh.sh
 INFO [c2bf6ab8] Finished in 0.031 seconds with exit status 0 (successful).
DEBUG [ef8c5c38] Running /usr/bin/env git ls-remote -h git@bitbucket.org:fuga/hoge.git on fuga
DEBUG [ef8c5c38] Command: ( GIT_ASKPASS=/bin/echo GIT_SSH=/tmp/hoge/git-ssh.sh /usr/bin/env git ls-remote -h git@bitbucket.org:fuga/hoge.git )
DEBUG [cb27da31]    Error reading response length from authentication socket
DEBUG [ef8c5c38]    Permission denied (publickey).
DEBUG [ef8c5c38]    
DEBUG [ef8c5c38]    fatal: The remote end hung up unexpectedly
DEBUG [ef8c5c38]    
DEBUG [ef8c5c38] Finished in 2.287 seconds with exit status 128 (failed).
</code></p>

<p>うげげ。gitで鍵認証のエラー出てるわ。とりあえずbitbucketに公開鍵を登録してみた。
 <a href="http://morizyun.github.io/blog/ssh-key-bitbucket-github/">SSH認証キーをBitbucket/GitHubに設定しよう！ [Mac簡単手順] &ndash; 酒と泪とRubyとRailsと</a>の通りに登録したら出来た。~/.ssh/configに秘密鍵を追加して</p>

<p><code>sh
Host bitbucket.org
  HostName bitbucket.org
  IdentityFile ~/.ssh/id_rsa
  User git
  TCPKeepAlive yes
  IdentitiesOnly yes
</code></p>

<p> じゃあ再度デプロイをテストしてみたら・・・同じエラーが出た。
色々試行錯誤して、「Error reading response length from authentication socket」でググった結果、ssh_agentが動いてないことが判明したので</p>

<p><code>sh
$ eval `ssh-agent -s`
$ ssh-add ~/.ssh/id_rsa
</code></p>

<p>としてデプロイをテストしたら無事動いた。めでたしめでたし。でも一旦ログアウトしたりするとssh-agentに接続しないとまた同じエラーが出た。ssh-agentへの接続方法は<a href="http://tipspc.blogspot.jp/2010/02/ssh-agent.html">PC便利帳: ssh-agentを使用したパスワードなしの接続</a>を参考にして</p>

<p>```sh
$ ps ax | grep ssh-agent
$ ls /tmp | grep ssh
$ SSH_AUTH_SOCK=/tmp/ssh-XXXXX1111/agent.1111; export SSH_AUTH_SOCK;
$ SSH_AGENT_PID=2222; export SSH_AGENT_PID;
````</p>

<p>とやれば接続できて、デプロイできた。
 さらに実際にデプロイすると下のようにエラーでまくった。</p>

<h2>capistrano3でbundle exec cap production deloyしようとしたらエラーが出まくる</h2>

<p>Gemfileから色々省いてたらエラーが出まくる</p>

<ul>
<li>rubyが指定されてない（rbenvが足りない）</li>
<li>uglifierが無いとかsassが足りないとか</li>
<li>いちいちGemfile.lockをアップデートしないとエラー出る</li>
</ul>


<p>rbenvはcapistrano-rbenvをGemfileに追加して、Capfileにcapistrano/rbenvを指定して、config/deploy.rbに</p>

<p><code>rb
set :rbenv_ruby, '2.1.0'
</code></p>

<p>とか何とか設定するとおk。</p>

<p>uglifierとかsassとかproductionを指定した場合に使うような設定になってるみたいい（config/environments/production.rb）。とりあえずuglifierとかsassとかcofee-railsとか色々Gemfileに入れておけばエラーでなかった。</p>

<h2>デプロイした後でcss関連でエラーが出た</h2>

<p>sassが足らないと言われた。sass使わないので、sassが関わるファイル（app/assets/stylesheets内のscssファイル）を消すとエラーは消えた</p>

<h2>productionモードでデプロイすると、cssやjsを読み込んでくれない</h2>

<p>config/environments/production.rbに次の行を追記</p>

<p><code>rb
 config.assets.compile = true
 config.assets.precompile = ['*.js','*.css','*.css.erb']
</code></p>

<p>参考<a href="http://stackoverflow.com/questions/18700219/rails-4-assets-not-loading-in-production">ruby &ndash; Rails 4: assets not loading in production &ndash; Stack Overflow</a>
すると解決した。なんかバッドノウハウみたいでやだ。</p>

<h2>productionモードでunicornが起動してくれない</h2>

<p>capistranoとは関係なかったけどcapistrano関連と思い込んでたのでメモ。capistranoの設定にミスがあると思って苦しんでたけど、単にunicornのオプションを指定してなかったのが悪かった。</p>

<p><code>sh
$ bundle exec unicorn_rails -E production
</code></p>

<p>でおkだった。</p>

<p>Capistranoは確かに便利なんだけど、なんかハマりポイントが多いような印象。
バージョン変わって設定方法も変わったみたいだし。最初のハードルが高い感じがする。慣れたら楽になるのかな。</p>

<h2>capistrano3でunicornの再起動に失敗する</h2>

<p><a href="http://qiita.com/satococoa/items/9b0cc416ffc042680b9b">unicorn + rails 用 Capistrano 3 の設定ファイル &ndash; Qiita</a>と<a href="http://blog.dealforest.net/2014/02/failed_restart_unicorn_with_capistrano3/">Capistrano3 で Unicorn の再起動に失敗したのを対応したメモ | Supernova</a>が参考になった。</p>

<p>でもrestartでちゃんと再起動して修正箇所が反映しない。stopしてstartしないと。うーん。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[nginx,unicornをさくらvpsにインストールしてrailsアプリを手動でデプロイしてみる]]></title>
    <link href="http://blog.shigepon.com/blog/2014/05/02/use-nginxand-unicorn-on-sakura-vps/"/>
    <updated>2014-05-02T15:10:23+09:00</updated>
    <id>http://blog.shigepon.com/blog/2014/05/02/use-nginxand-unicorn-on-sakura-vps</id>
    <content type="html"><![CDATA[<p>さくらvpsのUbuntu12.04にnginxとunicornをインストールしてローカル環境に作ったRailsアプリを手動でアップロードして表示させてみた。何となくユニコーンって名前が好きなので、unicornを使うことにした。</p>

<h2>nginxインストール</h2>

<p>nginxは本当は手動でインストールするのがいいんだろうけど、面倒なので</p>

<p><code>sh
$ sudo aptitude install nginx
</code></p>

<p>でインストール</p>

<h2>unicornインストール</h2>

<p>rubyとかbundlerとかが必要なので、無い場合は<a href="http://blog.shigepon.com/blog/2014/02/26/rails-startup/">Ruby on Railsを入れてみた</a>に書いた通りにインストール。unicornはGemfileに</p>

<p><code>
gem "unicorn"
</code></p>

<p>と追記して</p>

<p><code>sh
$ bundle install -path vendor/bundle
</code></p>

<p>でインストール出来る。要らないかもしれないけどお約束のようにインストール後はrbenv rehashしておく。</p>

<h2>nginxの設定</h2>

<p>設定ファイルは最低限これくらい書いておけばよさげ</p>

<p>```
upstream unicorn-unix-domain-socket {</p>

<pre><code>    server unix:/var/run/unicorn/unicorn_[app_name].sock fail_timeout=0;
</code></pre>

<p>}</p>

<p>upstream unicorn-tcp {</p>

<pre><code>    server 127.0.0.1:8080;
</code></pre>

<p>}</p>

<p>server {</p>

<pre><code>    listen 80;
    server_name http://hoge;

    root /path/to/app_root/public;

    access_log  /var/log/nginx/access.log;
    error_log /var/log/nginx/error.log;

    location / {
            proxy_pass http://unicorn-tcp;
    }
</code></pre>

<p>}
```</p>

<p>/var/run/unicornディレクトリは前もって作っておく。/tmpとかでも良さげなんだけど、どうなんだろう？</p>

<h2>railsアプリのアップロード</h2>

<p>適当にアップロード。rsyncで適当にやった。</p>

<h2>unicorn起動</h2>

<p><code>sh
$ bundle exec unicorn_rails -D
</code></p>

<p>-Dはデーモンとして起動。configファイルを指定する場合は、-c path/to/config.rbを指定する。</p>

<h2>nginx起動</h2>

<p><code>sh
$ service nginx start
</code></p>

<p>以上でrailsアプリが見れるようになる。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rails4でPostgreSQLとBootstrap使ったアプリを作ってみた(4):ビューにBootstrapを使う]]></title>
    <link href="http://blog.shigepon.com/blog/2014/03/14/a-way-of-creating-rails-application4/"/>
    <updated>2014-03-14T09:10:41+09:00</updated>
    <id>http://blog.shigepon.com/blog/2014/03/14/a-way-of-creating-rails-application4</id>
    <content type="html"><![CDATA[<p>参考にした記事URL一覧</p>

<ul>
<li><a href="http://ubiqlog.com/archives/8749">Ruby on Rails 4.0正式リリースとBootstrapの正しい設定法 | ユービックログ研究所</a></li>
<li><a href="http://railscasts.com/episodes/328-twitter-bootstrap-basics?language=ja&amp;view=asciicast">#328 Twitter Bootstrap Basics &ndash; RailsCasts</a></li>
</ul>


<p>今回はそっけない表示画面をそれっぽくするためにビューにBootstrapを当てはめる。</p>

<p>Gemfileを編集</p>

<p><code>
+gem 'less-rails'
+gem 'twitter-bootstrap-rails'
+gem 'execjs'
-gem 'sass-rails'
</code></p>

<p>以下のコマンドを実行</p>

<p><code>sh
$ bundle install
$ rails g bootstrap:install
$ rails g bootstrap:layout application
</code></p>

<p>と実行したけど、最後のコマンドはビューを勝手に色々いじるので、しない方が良いかもしれない。上のコマンドを実行すると</p>

<p><code>
app/assets/javascripts/application.js
app/assets/javascripts/bootstrap.js.coffee
app/assets/stylesheets/application.css
app/assets/stylesheets/bootstrap_and_overrides.css.less
</code></p>

<p>が出来る。さて、この状態で出力を見ると、ページ上部がナビゲーションバーで隠れてしまった。
app/assets/stylesheets/bootstrap_and_overrides.css.lessを修正することで対処する</p>

<p>変更前</p>

<p><code>css
@import "twitter/bootstrap/bootstrap";
@import "twitter/bootstrap/responsive";
</code></p>

<p>変更後</p>

<p><code>css
@import "twitter/bootstrap/bootstrap";
body {padding-top:60px;}
@import "twitter/bootstrap/responsive";
</code></p>

<p>これでページが隠れなくなる。レイアウト変更にはapp/views/layouts/application.html.erbを編集する必要がある。</p>
]]></content>
  </entry>
  
</feed>
